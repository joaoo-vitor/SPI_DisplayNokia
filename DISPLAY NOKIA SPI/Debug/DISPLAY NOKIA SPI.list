
DISPLAY NOKIA SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004628  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  080047f8  080047f8  000147f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c94  08004c94  0002029c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c94  08004c94  00014c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c9c  08004c9c  0002029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c9c  08004c9c  00014c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ca0  08004ca0  00014ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000029c  20000000  08004ca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dc0  2000029c  08004f40  0002029c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000105c  08004f40  0002105c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000141b2  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ade  00000000  00000000  0003447e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00036f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  00037f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029160  00000000  00000000  00038d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014240  00000000  00000000  00061ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001083e0  00000000  00000000  00076118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017e4f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004438  00000000  00000000  0017e54c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000029c 	.word	0x2000029c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080047e0 	.word	0x080047e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002a0 	.word	0x200002a0
 800020c:	080047e0 	.word	0x080047e0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <MX_DMA_Init+0x3c>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <MX_DMA_Init+0x3c>)
 80005b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <MX_DMA_Init+0x3c>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	2010      	movs	r0, #16
 80005d0:	f000 fe09 	bl	80011e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005d4:	2010      	movs	r0, #16
 80005d6:	f000 fe22 	bl	800121e <HAL_NVIC_EnableIRQ>

}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800

080005e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08a      	sub	sp, #40	; 0x28
 80005ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	4b38      	ldr	r3, [pc, #224]	; (80006e4 <MX_GPIO_Init+0xfc>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a37      	ldr	r2, [pc, #220]	; (80006e4 <MX_GPIO_Init+0xfc>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b35      	ldr	r3, [pc, #212]	; (80006e4 <MX_GPIO_Init+0xfc>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	4b31      	ldr	r3, [pc, #196]	; (80006e4 <MX_GPIO_Init+0xfc>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <MX_GPIO_Init+0xfc>)
 8000624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b2e      	ldr	r3, [pc, #184]	; (80006e4 <MX_GPIO_Init+0xfc>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	4b2a      	ldr	r3, [pc, #168]	; (80006e4 <MX_GPIO_Init+0xfc>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a29      	ldr	r2, [pc, #164]	; (80006e4 <MX_GPIO_Init+0xfc>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <MX_GPIO_Init+0xfc>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <MX_GPIO_Init+0xfc>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <MX_GPIO_Init+0xfc>)
 800065c:	f043 0302 	orr.w	r3, r3, #2
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <MX_GPIO_Init+0xfc>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0302 	and.w	r3, r3, #2
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	2120      	movs	r1, #32
 8000672:	481d      	ldr	r0, [pc, #116]	; (80006e8 <MX_GPIO_Init+0x100>)
 8000674:	f001 fa8e 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NK_RST_Pin|NK_CS_Pin|NK_DO_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 800067e:	481b      	ldr	r0, [pc, #108]	; (80006ec <MX_GPIO_Init+0x104>)
 8000680:	f001 fa88 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000684:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800068a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	4619      	mov	r1, r3
 800069a:	4815      	ldr	r0, [pc, #84]	; (80006f0 <MX_GPIO_Init+0x108>)
 800069c:	f001 f8e6 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006a0:	2320      	movs	r3, #32
 80006a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	2301      	movs	r3, #1
 80006a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4619      	mov	r1, r3
 80006b6:	480c      	ldr	r0, [pc, #48]	; (80006e8 <MX_GPIO_Init+0x100>)
 80006b8:	f001 f8d8 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = NK_RST_Pin|NK_CS_Pin|NK_DO_Pin;
 80006bc:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 80006c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_GPIO_Init+0x104>)
 80006d6:	f001 f8c9 	bl	800186c <HAL_GPIO_Init>

}
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40020000 	.word	0x40020000
 80006ec:	40020400 	.word	0x40020400
 80006f0:	40020800 	.word	0x40020800

080006f4 <main>:
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006f8:	f000 fc04 	bl	8000f04 <HAL_Init>
	MX_SPI2_Init();
	/* USER CODE BEGIN 2 */
	//Inicialização da Instancia HLCD
	hlcd.hspi=&hspi2;
	hlcd.CS_Port=NK_CS_GPIO_Port;
	hlcd.CS_Pin=NK_CS_Pin;
 80006fc:	f000 f846 	bl	800078c <SystemClock_Config>
	hlcd.DC_Pin=NK_DO_Pin;
	hlcd.modo = LCD_BLOCK;

	LCD5110_init(&hlcd);

	LCD5110_set_callback(official_callback);
 8000700:	f7ff ff72 	bl	80005e8 <MX_GPIO_Init>

 8000704:	f000 fb62 	bl	8000dcc <MX_USART2_UART_Init>
	LCD5110_set_XY(0, 0);
 8000708:	f7ff ff4e 	bl	80005a8 <MX_DMA_Init>
	while( LCD5110_write_string("Micros é show - Testando")!=HAL_OK);
 800070c:	f000 f992 	bl	8000a34 <MX_SPI3_Init>
	while( LCD5110_set_XY(0, 4)!=HAL_OK);
 8000710:	f000 fb10 	bl	8000d34 <MX_TIM11_Init>
	HAL_Delay(3000);
	while(LCD5110_write_char('x', 0)!=HAL_OK);
 8000714:	4818      	ldr	r0, [pc, #96]	; (8000778 <main+0x84>)
 8000716:	f002 fcf1 	bl	80030fc <HAL_TIM_Base_Start_IT>
	HAL_Delay(3000);
	while( LCD5110_clear()!=HAL_OK);
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <main+0x88>)
 800071c:	4a18      	ldr	r2, [pc, #96]	; (8000780 <main+0x8c>)
 800071e:	601a      	str	r2, [r3, #0]
	while( LCD5110_set_XY(0, 0)!=HAL_OK);
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <main+0x88>)
 8000722:	4a18      	ldr	r2, [pc, #96]	; (8000784 <main+0x90>)
 8000724:	609a      	str	r2, [r3, #8]
	while(LCD5110_write_block(liber_bmp3, TAM_TELA)!=HAL_OK);
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <main+0x88>)
 8000728:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800072c:	819a      	strh	r2, [r3, #12]
	/* USER CODE END 2 */
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <main+0x88>)
 8000730:	4a14      	ldr	r2, [pc, #80]	; (8000784 <main+0x90>)
 8000732:	611a      	str	r2, [r3, #16]

 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <main+0x88>)
 8000736:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800073a:	829a      	strh	r2, [r3, #20]
	/* Infinite loop */
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <main+0x88>)
 800073e:	4a11      	ldr	r2, [pc, #68]	; (8000784 <main+0x90>)
 8000740:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN WHILE */
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <main+0x88>)
 8000744:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000748:	839a      	strh	r2, [r3, #28]
	while (1)
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <main+0x88>)
 800074c:	2202      	movs	r2, #2
 800074e:	711a      	strb	r2, [r3, #4]
	{
		//código para testar callback adicional
 8000750:	480a      	ldr	r0, [pc, #40]	; (800077c <main+0x88>)
 8000752:	f003 f9f5 	bl	8003b40 <LCD5110_init>
		sprintf(msg, "Já foram %d vezes", conta);
		while( LCD5110_clear()!=HAL_OK);
 8000756:	2100      	movs	r1, #0
 8000758:	2000      	movs	r0, #0
 800075a:	f003 fb3f 	bl	8003ddc <LCD5110_set_XY>
		while( LCD5110_set_XY(0, 0)!=HAL_OK);
 800075e:	bf00      	nop
 8000760:	4809      	ldr	r0, [pc, #36]	; (8000788 <main+0x94>)
 8000762:	f003 fab5 	bl	8003cd0 <LCD5110_write_string>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1f9      	bne.n	8000760 <main+0x6c>
		while( LCD5110_write_string(msg)!=HAL_OK);

 800076c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000770:	f000 fc3a 	bl	8000fe8 <HAL_Delay>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
 8000774:	e7fe      	b.n	8000774 <main+0x80>
 8000776:	bf00      	nop
 8000778:	200005e4 	.word	0x200005e4
 800077c:	20000508 	.word	0x20000508
 8000780:	2000052c 	.word	0x2000052c
 8000784:	40020400 	.word	0x40020400
 8000788:	080047f8 	.word	0x080047f8

0800078c <SystemClock_Config>:
{
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

	/** Configure the main internal regulator output voltage
	 */
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
	__HAL_RCC_PWR_CLK_ENABLE();
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2234      	movs	r2, #52	; 0x34
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f003 fbea 	bl	8003f74 <memset>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <SystemClock_Config+0xd4>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	4a29      	ldr	r2, [pc, #164]	; (8000860 <SystemClock_Config+0xd4>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	; 0x40
 80007c0:	4b27      	ldr	r3, [pc, #156]	; (8000860 <SystemClock_Config+0xd4>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007cc:	2300      	movs	r3, #0
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	4b24      	ldr	r3, [pc, #144]	; (8000864 <SystemClock_Config+0xd8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d8:	4a22      	ldr	r2, [pc, #136]	; (8000864 <SystemClock_Config+0xd8>)
 80007da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	4b20      	ldr	r3, [pc, #128]	; (8000864 <SystemClock_Config+0xd8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	683b      	ldr	r3, [r7, #0]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 16;
 80007ec:	2302      	movs	r3, #2
 80007ee:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLN = 336;
 80007f0:	2301      	movs	r3, #1
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007f4:	2310      	movs	r3, #16
 80007f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLR = 2;
 80007fc:	2300      	movs	r3, #0
 80007fe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000800:	2310      	movs	r3, #16
 8000802:	63fb      	str	r3, [r7, #60]	; 0x3c
	{
 8000804:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000808:	643b      	str	r3, [r7, #64]	; 0x40
		Error_Handler();
 800080a:	2304      	movs	r3, #4
 800080c:	647b      	str	r3, [r7, #68]	; 0x44
	}
 800080e:	2302      	movs	r3, #2
 8000810:	64bb      	str	r3, [r7, #72]	; 0x48
	/** Initializes the CPU, AHB and APB buses clocks
 8000812:	2302      	movs	r3, #2
 8000814:	64fb      	str	r3, [r7, #76]	; 0x4c
	 */
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4618      	mov	r0, r3
 800081c:	f001 fca0 	bl	8002160 <HAL_RCC_OscConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x9e>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000826:	f000 f8ff 	bl	8000a28 <Error_Handler>
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800082a:	230f      	movs	r3, #15
 800082c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

 800082e:	2302      	movs	r3, #2
 8000830:	60fb      	str	r3, [r7, #12]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
	{
 8000836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083a:	617b      	str	r3, [r7, #20]
		Error_Handler();
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
	}
}
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	2102      	movs	r1, #2
 8000846:	4618      	mov	r0, r3
 8000848:	f001 f9be 	bl	8001bc8 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xca>

 8000852:	f000 f8e9 	bl	8000a28 <Error_Handler>
/* USER CODE BEGIN 4 */

 8000856:	bf00      	nop
 8000858:	3750      	adds	r7, #80	; 0x50
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800
 8000864:	40007000 	.word	0x40007000

08000868 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END 4 */

/**
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 * @brief  This function is executed in case of error occurrence.
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a54      	ldr	r2, [pc, #336]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000876:	4293      	cmp	r3, r2
 8000878:	f040 8092 	bne.w	80009a0 <HAL_TIM_PeriodElapsedCallback+0x138>
 * @retval None
 */
 800087c:	4b53      	ldr	r3, [pc, #332]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x164>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b06      	cmp	r3, #6
 8000882:	f200 809c 	bhi.w	80009be <HAL_TIM_PeriodElapsedCallback+0x156>
 8000886:	a201      	add	r2, pc, #4	; (adr r2, 800088c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088c:	080008a9 	.word	0x080008a9
 8000890:	080008d1 	.word	0x080008d1
 8000894:	080008e9 	.word	0x080008e9
 8000898:	08000909 	.word	0x08000909
 800089c:	08000931 	.word	0x08000931
 80008a0:	0800095f 	.word	0x0800095f
 80008a4:	08000983 	.word	0x08000983
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
 80008a8:	4b49      	ldr	r3, [pc, #292]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	3b01      	subs	r3, #1
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	4b47      	ldr	r3, [pc, #284]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80008b2:	801a      	strh	r2, [r3, #0]
	/* User can add his own implementation to report the HAL error return state */
 80008b4:	4b46      	ldr	r3, [pc, #280]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d173      	bne.n	80009a4 <HAL_TIM_PeriodElapsedCallback+0x13c>
	__disable_irq();
 80008bc:	4b44      	ldr	r3, [pc, #272]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80008be:	2205      	movs	r2, #5
 80008c0:	801a      	strh	r2, [r3, #0]
	while (1)
	{
 80008c2:	4b42      	ldr	r3, [pc, #264]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x164>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	3301      	adds	r3, #1
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4b40      	ldr	r3, [pc, #256]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x164>)
 80008cc:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END Error_Handler_Debug */
 80008ce:	e069      	b.n	80009a4 <HAL_TIM_PeriodElapsedCallback+0x13c>
}

#ifdef  USE_FULL_ASSERT
/**
 80008d0:	f003 fa38 	bl	8003d44 <LCD5110_clear>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d166      	bne.n	80009a8 <HAL_TIM_PeriodElapsedCallback+0x140>
 * @brief  Reports the name of the source file and the source line number
 80008da:	4b3c      	ldr	r3, [pc, #240]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x164>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	3301      	adds	r3, #1
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4b3a      	ldr	r3, [pc, #232]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x164>)
 80008e4:	701a      	strb	r2, [r3, #0]
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 80008e6:	e05f      	b.n	80009a8 <HAL_TIM_PeriodElapsedCallback+0x140>
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
 80008e8:	2100      	movs	r1, #0
 80008ea:	2000      	movs	r0, #0
 80008ec:	f003 fa76 	bl	8003ddc <LCD5110_set_XY>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d15a      	bne.n	80009ac <HAL_TIM_PeriodElapsedCallback+0x144>
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
 80008f6:	4b35      	ldr	r3, [pc, #212]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x164>)
 80008f8:	781a      	ldrb	r2, [r3, #0]
 80008fa:	4b36      	ldr	r3, [pc, #216]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	4413      	add	r3, r2
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4b32      	ldr	r3, [pc, #200]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000904:	701a      	strb	r2, [r3, #0]

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
 8000906:	e051      	b.n	80009ac <HAL_TIM_PeriodElapsedCallback+0x144>
 8000908:	4933      	ldr	r1, [pc, #204]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800090a:	4834      	ldr	r0, [pc, #208]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x174>)
 800090c:	f003 fb3a 	bl	8003f84 <siprintf>
 8000910:	4832      	ldr	r0, [pc, #200]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000912:	f003 f9dd 	bl	8003cd0 <LCD5110_write_string>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d149      	bne.n	80009b0 <HAL_TIM_PeriodElapsedCallback+0x148>
 800091c:	4b2b      	ldr	r3, [pc, #172]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x164>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
 8000922:	4b2c      	ldr	r3, [pc, #176]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	3301      	adds	r3, #1
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4b2a      	ldr	r3, [pc, #168]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800092c:	701a      	strb	r2, [r3, #0]
 800092e:	e03f      	b.n	80009b0 <HAL_TIM_PeriodElapsedCallback+0x148>
 8000930:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	461a      	mov	r2, r3
 8000936:	492b      	ldr	r1, [pc, #172]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000938:	4828      	ldr	r0, [pc, #160]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x174>)
 800093a:	f003 fb23 	bl	8003f84 <siprintf>
 800093e:	4827      	ldr	r0, [pc, #156]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000940:	f003 f9c6 	bl	8003cd0 <LCD5110_write_string>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d134      	bne.n	80009b4 <HAL_TIM_PeriodElapsedCallback+0x14c>
 800094a:	4b20      	ldr	r3, [pc, #128]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x164>)
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
 8000950:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	3301      	adds	r3, #1
 8000956:	b2da      	uxtb	r2, r3
 8000958:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800095a:	701a      	strb	r2, [r3, #0]
 800095c:	e02a      	b.n	80009b4 <HAL_TIM_PeriodElapsedCallback+0x14c>
 800095e:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000962:	4821      	ldr	r0, [pc, #132]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000964:	f003 fa14 	bl	8003d90 <LCD5110_write_block>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d124      	bne.n	80009b8 <HAL_TIM_PeriodElapsedCallback+0x150>
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	3301      	adds	r3, #1
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800097e:	701a      	strb	r2, [r3, #0]
 8000980:	e01a      	b.n	80009b8 <HAL_TIM_PeriodElapsedCallback+0x150>
 8000982:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000986:	4819      	ldr	r0, [pc, #100]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000988:	f003 fa02 	bl	8003d90 <LCD5110_write_block>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d114      	bne.n	80009bc <HAL_TIM_PeriodElapsedCallback+0x154>
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000994:	2200      	movs	r2, #0
 8000996:	701a      	strb	r2, [r3, #0]
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800099a:	2201      	movs	r2, #1
 800099c:	701a      	strb	r2, [r3, #0]
 800099e:	e00d      	b.n	80009bc <HAL_TIM_PeriodElapsedCallback+0x154>
 80009a0:	bf00      	nop
 80009a2:	e00c      	b.n	80009be <HAL_TIM_PeriodElapsedCallback+0x156>
	/* USER CODE END Error_Handler_Debug */
 80009a4:	bf00      	nop
 80009a6:	e00a      	b.n	80009be <HAL_TIM_PeriodElapsedCallback+0x156>
 * @param  file: pointer to the source file name
 80009a8:	bf00      	nop
 80009aa:	e008      	b.n	80009be <HAL_TIM_PeriodElapsedCallback+0x156>
/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
 80009ac:	bf00      	nop
 80009ae:	e006      	b.n	80009be <HAL_TIM_PeriodElapsedCallback+0x156>
 80009b0:	bf00      	nop
 80009b2:	e004      	b.n	80009be <HAL_TIM_PeriodElapsedCallback+0x156>
 80009b4:	bf00      	nop
 80009b6:	e002      	b.n	80009be <HAL_TIM_PeriodElapsedCallback+0x156>
 80009b8:	bf00      	nop
 80009ba:	e000      	b.n	80009be <HAL_TIM_PeriodElapsedCallback+0x156>
 80009bc:	bf00      	nop
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40014800 	.word	0x40014800
 80009cc:	200002ba 	.word	0x200002ba
 80009d0:	20000002 	.word	0x20000002
 80009d4:	20000000 	.word	0x20000000
 80009d8:	08004808 	.word	0x08004808
 80009dc:	200004d4 	.word	0x200004d4
 80009e0:	200002b8 	.word	0x200002b8
 80009e4:	08004830 	.word	0x08004830
 80009e8:	08004850 	.word	0x08004850
 80009ec:	08004a48 	.word	0x08004a48

080009f0 <HAL_SPI_TxCpltCallback>:
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_SPI_TxCpltCallback+0x30>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d102      	bne.n	8000a0c <HAL_SPI_TxCpltCallback+0x1c>
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f003 fa60 	bl	8003ecc <LCD5110_TxCpltCallback>
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_SPI_TxCpltCallback+0x34>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	3301      	adds	r3, #1
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <HAL_SPI_TxCpltCallback+0x34>)
 8000a16:	801a      	strh	r2, [r3, #0]
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000508 	.word	0x20000508
 8000a24:	200002b8 	.word	0x200002b8

08000a28 <Error_Handler>:
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
 8000a30:	e7fe      	b.n	8000a30 <Error_Handler+0x8>
	...

08000a34 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_SPI3_Init+0x64>)
 8000a3a:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <MX_SPI3_Init+0x68>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <MX_SPI3_Init+0x64>)
 8000a40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a44:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_SPI3_Init+0x64>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_SPI3_Init+0x64>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_SPI3_Init+0x64>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_SPI3_Init+0x64>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_SPI3_Init+0x64>)
 8000a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a64:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_SPI3_Init+0x64>)
 8000a68:	2218      	movs	r2, #24
 8000a6a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <MX_SPI3_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_SPI3_Init+0x64>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <MX_SPI3_Init+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_SPI3_Init+0x64>)
 8000a80:	220a      	movs	r2, #10
 8000a82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_SPI3_Init+0x64>)
 8000a86:	f001 fe09 	bl	800269c <HAL_SPI_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000a90:	f7ff ffca 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	2000052c 	.word	0x2000052c
 8000a9c:	40003c00 	.word	0x40003c00

08000aa0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a3c      	ldr	r2, [pc, #240]	; (8000bb0 <HAL_SPI_MspInit+0x110>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d171      	bne.n	8000ba6 <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b3b      	ldr	r3, [pc, #236]	; (8000bb4 <HAL_SPI_MspInit+0x114>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	4a3a      	ldr	r2, [pc, #232]	; (8000bb4 <HAL_SPI_MspInit+0x114>)
 8000acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad2:	4b38      	ldr	r3, [pc, #224]	; (8000bb4 <HAL_SPI_MspInit+0x114>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b34      	ldr	r3, [pc, #208]	; (8000bb4 <HAL_SPI_MspInit+0x114>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a33      	ldr	r2, [pc, #204]	; (8000bb4 <HAL_SPI_MspInit+0x114>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b31      	ldr	r3, [pc, #196]	; (8000bb4 <HAL_SPI_MspInit+0x114>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC1     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = NK_DI_Pin;
 8000afa:	2302      	movs	r3, #2
 8000afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b06:	2303      	movs	r3, #3
 8000b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8000b0a:	2305      	movs	r3, #5
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(NK_DI_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	4828      	ldr	r0, [pc, #160]	; (8000bb8 <HAL_SPI_MspInit+0x118>)
 8000b16:	f000 fea9 	bl	800186c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NK_SCK_Pin;
 8000b1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b2c:	2306      	movs	r3, #6
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(NK_SCK_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	4820      	ldr	r0, [pc, #128]	; (8000bb8 <HAL_SPI_MspInit+0x118>)
 8000b38:	f000 fe98 	bl	800186c <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <HAL_SPI_MspInit+0x11c>)
 8000b3e:	4a20      	ldr	r2, [pc, #128]	; (8000bc0 <HAL_SPI_MspInit+0x120>)
 8000b40:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000b42:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <HAL_SPI_MspInit+0x11c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b48:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <HAL_SPI_MspInit+0x11c>)
 8000b4a:	2240      	movs	r2, #64	; 0x40
 8000b4c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b4e:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <HAL_SPI_MspInit+0x11c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <HAL_SPI_MspInit+0x11c>)
 8000b56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b5a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b5c:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <HAL_SPI_MspInit+0x11c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b62:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <HAL_SPI_MspInit+0x11c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <HAL_SPI_MspInit+0x11c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <HAL_SPI_MspInit+0x11c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_SPI_MspInit+0x11c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000b7a:	4810      	ldr	r0, [pc, #64]	; (8000bbc <HAL_SPI_MspInit+0x11c>)
 8000b7c:	f000 fb6a 	bl	8001254 <HAL_DMA_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_SPI_MspInit+0xea>
    {
      Error_Handler();
 8000b86:	f7ff ff4f 	bl	8000a28 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <HAL_SPI_MspInit+0x11c>)
 8000b8e:	649a      	str	r2, [r3, #72]	; 0x48
 8000b90:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <HAL_SPI_MspInit+0x11c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2033      	movs	r0, #51	; 0x33
 8000b9c:	f000 fb23 	bl	80011e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000ba0:	2033      	movs	r0, #51	; 0x33
 8000ba2:	f000 fb3c 	bl	800121e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	3728      	adds	r7, #40	; 0x28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40003c00 	.word	0x40003c00
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020800 	.word	0x40020800
 8000bbc:	20000584 	.word	0x20000584
 8000bc0:	40026088 	.word	0x40026088

08000bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	4a0f      	ldr	r2, [pc, #60]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c02:	2007      	movs	r0, #7
 8000c04:	f000 fae4 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40023800 	.word	0x40023800

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <NMI_Handler+0x4>

08000c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <MemManage_Handler+0x4>

08000c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c60:	f000 f9a2 	bl	8000fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <DMA1_Stream5_IRQHandler+0x10>)
 8000c6e:	f000 fbc1 	bl	80013f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000584 	.word	0x20000584

08000c7c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000c82:	f002 faab 	bl	80031dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200005e4 	.word	0x200005e4

08000c90 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <SPI3_IRQHandler+0x10>)
 8000c96:	f001 ff51 	bl	8002b3c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2000052c 	.word	0x2000052c

08000ca4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cac:	4a14      	ldr	r2, [pc, #80]	; (8000d00 <_sbrk+0x5c>)
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <_sbrk+0x60>)
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d102      	bne.n	8000cc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <_sbrk+0x64>)
 8000cc2:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <_sbrk+0x68>)
 8000cc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d207      	bcs.n	8000ce4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd4:	f003 f924 	bl	8003f20 <__errno>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	220c      	movs	r2, #12
 8000cdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce2:	e009      	b.n	8000cf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <_sbrk+0x64>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	4a05      	ldr	r2, [pc, #20]	; (8000d08 <_sbrk+0x64>)
 8000cf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20020000 	.word	0x20020000
 8000d04:	00000400 	.word	0x00000400
 8000d08:	200002bc 	.word	0x200002bc
 8000d0c:	20001060 	.word	0x20001060

08000d10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <SystemInit+0x20>)
 8000d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1a:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <SystemInit+0x20>)
 8000d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000d38:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <MX_TIM11_Init+0x40>)
 8000d3a:	4a0f      	ldr	r2, [pc, #60]	; (8000d78 <MX_TIM11_Init+0x44>)
 8000d3c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8399;
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <MX_TIM11_Init+0x40>)
 8000d40:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000d44:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <MX_TIM11_Init+0x40>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_TIM11_Init+0x40>)
 8000d4e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d52:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <MX_TIM11_Init+0x40>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MX_TIM11_Init+0x40>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000d60:	4804      	ldr	r0, [pc, #16]	; (8000d74 <MX_TIM11_Init+0x40>)
 8000d62:	f002 f97b 	bl	800305c <HAL_TIM_Base_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8000d6c:	f7ff fe5c 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	200005e4 	.word	0x200005e4
 8000d78:	40014800 	.word	0x40014800

08000d7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <HAL_TIM_Base_MspInit+0x48>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d115      	bne.n	8000dba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <HAL_TIM_Base_MspInit+0x4c>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	4a0c      	ldr	r2, [pc, #48]	; (8000dc8 <HAL_TIM_Base_MspInit+0x4c>)
 8000d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <HAL_TIM_Base_MspInit+0x4c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2100      	movs	r1, #0
 8000dae:	201a      	movs	r0, #26
 8000db0:	f000 fa19 	bl	80011e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000db4:	201a      	movs	r0, #26
 8000db6:	f000 fa32 	bl	800121e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40014800 	.word	0x40014800
 8000dc8:	40023800 	.word	0x40023800

08000dcc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <MX_USART2_UART_Init+0x50>)
 8000dd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000dd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ddc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000df2:	220c      	movs	r2, #12
 8000df4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000e04:	f002 fbce 	bl	80035a4 <HAL_UART_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e0e:	f7ff fe0b 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	2000062c 	.word	0x2000062c
 8000e1c:	40004400 	.word	0x40004400

08000e20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a19      	ldr	r2, [pc, #100]	; (8000ea4 <HAL_UART_MspInit+0x84>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d12b      	bne.n	8000e9a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	4a17      	ldr	r2, [pc, #92]	; (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e50:	6413      	str	r3, [r2, #64]	; 0x40
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e7a:	230c      	movs	r3, #12
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	2303      	movs	r3, #3
 8000e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	; (8000eac <HAL_UART_MspInit+0x8c>)
 8000e96:	f000 fce9 	bl	800186c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	; 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40004400 	.word	0x40004400
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020000 	.word	0x40020000

08000eb0 <Reset_Handler>:
 8000eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee8 <LoopFillZerobss+0x12>
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <LoopFillZerobss+0x16>)
 8000eb6:	490e      	ldr	r1, [pc, #56]	; (8000ef0 <LoopFillZerobss+0x1a>)
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <LoopFillZerobss+0x1e>)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e002      	b.n	8000ec4 <LoopCopyDataInit>

08000ebe <CopyDataInit>:
 8000ebe:	58d4      	ldr	r4, [r2, r3]
 8000ec0:	50c4      	str	r4, [r0, r3]
 8000ec2:	3304      	adds	r3, #4

08000ec4 <LoopCopyDataInit>:
 8000ec4:	18c4      	adds	r4, r0, r3
 8000ec6:	428c      	cmp	r4, r1
 8000ec8:	d3f9      	bcc.n	8000ebe <CopyDataInit>
 8000eca:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <LoopFillZerobss+0x22>)
 8000ecc:	4c0b      	ldr	r4, [pc, #44]	; (8000efc <LoopFillZerobss+0x26>)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e001      	b.n	8000ed6 <LoopFillZerobss>

08000ed2 <FillZerobss>:
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	3204      	adds	r2, #4

08000ed6 <LoopFillZerobss>:
 8000ed6:	42a2      	cmp	r2, r4
 8000ed8:	d3fb      	bcc.n	8000ed2 <FillZerobss>
 8000eda:	f7ff ff19 	bl	8000d10 <SystemInit>
 8000ede:	f003 f825 	bl	8003f2c <__libc_init_array>
 8000ee2:	f7ff fc07 	bl	80006f4 <main>
 8000ee6:	4770      	bx	lr
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	2000029c 	.word	0x2000029c
 8000ef4:	08004ca4 	.word	0x08004ca4
 8000ef8:	2000029c 	.word	0x2000029c
 8000efc:	2000105c 	.word	0x2000105c

08000f00 <ADC_IRQHandler>:
 8000f00:	e7fe      	b.n	8000f00 <ADC_IRQHandler>
	...

08000f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <HAL_Init+0x40>)
 8000f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <HAL_Init+0x40>)
 8000f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <HAL_Init+0x40>)
 8000f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 f94f 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f000 f808 	bl	8000f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f38:	f7ff fe44 	bl	8000bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40023c00 	.word	0x40023c00

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_InitTick+0x54>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_InitTick+0x58>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f967 	bl	800123a <HAL_SYSTICK_Config>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00e      	b.n	8000f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b0f      	cmp	r3, #15
 8000f7a:	d80a      	bhi.n	8000f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f000 f92f 	bl	80011e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f88:	4a06      	ldr	r2, [pc, #24]	; (8000fa4 <HAL_InitTick+0x5c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e000      	b.n	8000f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000004 	.word	0x20000004
 8000fa0:	2000000c 	.word	0x2000000c
 8000fa4:	20000008 	.word	0x20000008

08000fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_IncTick+0x20>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_IncTick+0x24>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <HAL_IncTick+0x24>)
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	2000000c 	.word	0x2000000c
 8000fcc:	20000670 	.word	0x20000670

08000fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <HAL_GetTick+0x14>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000670 	.word	0x20000670

08000fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff0:	f7ff ffee 	bl	8000fd0 <HAL_GetTick>
 8000ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001000:	d005      	beq.n	800100e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_Delay+0x44>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4413      	add	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800100e:	bf00      	nop
 8001010:	f7ff ffde 	bl	8000fd0 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	429a      	cmp	r2, r3
 800101e:	d8f7      	bhi.n	8001010 <HAL_Delay+0x28>
  {
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2000000c 	.word	0x2000000c

08001030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800104c:	4013      	ands	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800105c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001062:	4a04      	ldr	r2, [pc, #16]	; (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	60d3      	str	r3, [r2, #12]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <__NVIC_GetPriorityGrouping+0x18>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	f003 0307 	and.w	r3, r3, #7
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	db0b      	blt.n	80010be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	f003 021f 	and.w	r2, r3, #31
 80010ac:	4907      	ldr	r1, [pc, #28]	; (80010cc <__NVIC_EnableIRQ+0x38>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	095b      	lsrs	r3, r3, #5
 80010b4:	2001      	movs	r0, #1
 80010b6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000e100 	.word	0xe000e100

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	; (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	; (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2b04      	cmp	r3, #4
 8001140:	bf28      	it	cs
 8001142:	2304      	movcs	r3, #4
 8001144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3304      	adds	r3, #4
 800114a:	2b06      	cmp	r3, #6
 800114c:	d902      	bls.n	8001154 <NVIC_EncodePriority+0x30>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3b03      	subs	r3, #3
 8001152:	e000      	b.n	8001156 <NVIC_EncodePriority+0x32>
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	f04f 32ff 	mov.w	r2, #4294967295
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116c:	f04f 31ff 	mov.w	r1, #4294967295
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43d9      	mvns	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	4313      	orrs	r3, r2
         );
}
 800117e:	4618      	mov	r0, r3
 8001180:	3724      	adds	r7, #36	; 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800119c:	d301      	bcc.n	80011a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119e:	2301      	movs	r3, #1
 80011a0:	e00f      	b.n	80011c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <SysTick_Config+0x40>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011aa:	210f      	movs	r1, #15
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f7ff ff8e 	bl	80010d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <SysTick_Config+0x40>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ba:	4b04      	ldr	r3, [pc, #16]	; (80011cc <SysTick_Config+0x40>)
 80011bc:	2207      	movs	r2, #7
 80011be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	e000e010 	.word	0xe000e010

080011d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff29 	bl	8001030 <__NVIC_SetPriorityGrouping>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f8:	f7ff ff3e 	bl	8001078 <__NVIC_GetPriorityGrouping>
 80011fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	6978      	ldr	r0, [r7, #20]
 8001204:	f7ff ff8e 	bl	8001124 <NVIC_EncodePriority>
 8001208:	4602      	mov	r2, r0
 800120a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff5d 	bl	80010d0 <__NVIC_SetPriority>
}
 8001216:	bf00      	nop
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff31 	bl	8001094 <__NVIC_EnableIRQ>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ffa2 	bl	800118c <SysTick_Config>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001260:	f7ff feb6 	bl	8000fd0 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e099      	b.n	80013a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2202      	movs	r2, #2
 8001274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f022 0201 	bic.w	r2, r2, #1
 800128e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001290:	e00f      	b.n	80012b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001292:	f7ff fe9d 	bl	8000fd0 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b05      	cmp	r3, #5
 800129e:	d908      	bls.n	80012b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2220      	movs	r2, #32
 80012a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2203      	movs	r2, #3
 80012aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e078      	b.n	80013a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1e8      	bne.n	8001292 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	4b38      	ldr	r3, [pc, #224]	; (80013ac <HAL_DMA_Init+0x158>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	4313      	orrs	r3, r2
 8001302:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001308:	2b04      	cmp	r3, #4
 800130a:	d107      	bne.n	800131c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001314:	4313      	orrs	r3, r2
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	4313      	orrs	r3, r2
 800131a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f023 0307 	bic.w	r3, r3, #7
 8001332:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	4313      	orrs	r3, r2
 800133c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001342:	2b04      	cmp	r3, #4
 8001344:	d117      	bne.n	8001376 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	4313      	orrs	r3, r2
 800134e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00e      	beq.n	8001376 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 fa0b 	bl	8001774 <DMA_CheckFifoParam>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d008      	beq.n	8001376 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2240      	movs	r2, #64	; 0x40
 8001368:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001372:	2301      	movs	r3, #1
 8001374:	e016      	b.n	80013a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 f9c2 	bl	8001708 <DMA_CalcBaseAndBitshift>
 8001384:	4603      	mov	r3, r0
 8001386:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138c:	223f      	movs	r2, #63	; 0x3f
 800138e:	409a      	lsls	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	f010803f 	.word	0xf010803f

080013b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d004      	beq.n	80013ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2280      	movs	r2, #128	; 0x80
 80013c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00c      	b.n	80013e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2205      	movs	r2, #5
 80013d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 0201 	bic.w	r2, r2, #1
 80013e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001400:	4b92      	ldr	r3, [pc, #584]	; (800164c <HAL_DMA_IRQHandler+0x258>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a92      	ldr	r2, [pc, #584]	; (8001650 <HAL_DMA_IRQHandler+0x25c>)
 8001406:	fba2 2303 	umull	r2, r3, r2, r3
 800140a:	0a9b      	lsrs	r3, r3, #10
 800140c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001412:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141e:	2208      	movs	r2, #8
 8001420:	409a      	lsls	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4013      	ands	r3, r2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d01a      	beq.n	8001460 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	d013      	beq.n	8001460 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0204 	bic.w	r2, r2, #4
 8001446:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144c:	2208      	movs	r2, #8
 800144e:	409a      	lsls	r2, r3
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001458:	f043 0201 	orr.w	r2, r3, #1
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001464:	2201      	movs	r2, #1
 8001466:	409a      	lsls	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4013      	ands	r3, r2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d012      	beq.n	8001496 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00b      	beq.n	8001496 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001482:	2201      	movs	r2, #1
 8001484:	409a      	lsls	r2, r3
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800148e:	f043 0202 	orr.w	r2, r3, #2
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149a:	2204      	movs	r2, #4
 800149c:	409a      	lsls	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d012      	beq.n	80014cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d00b      	beq.n	80014cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b8:	2204      	movs	r2, #4
 80014ba:	409a      	lsls	r2, r3
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c4:	f043 0204 	orr.w	r2, r3, #4
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d0:	2210      	movs	r2, #16
 80014d2:	409a      	lsls	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4013      	ands	r3, r2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d043      	beq.n	8001564 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d03c      	beq.n	8001564 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ee:	2210      	movs	r2, #16
 80014f0:	409a      	lsls	r2, r3
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d018      	beq.n	8001536 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d108      	bne.n	8001524 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	2b00      	cmp	r3, #0
 8001518:	d024      	beq.n	8001564 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	4798      	blx	r3
 8001522:	e01f      	b.n	8001564 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001528:	2b00      	cmp	r3, #0
 800152a:	d01b      	beq.n	8001564 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	4798      	blx	r3
 8001534:	e016      	b.n	8001564 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001540:	2b00      	cmp	r3, #0
 8001542:	d107      	bne.n	8001554 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0208 	bic.w	r2, r2, #8
 8001552:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001568:	2220      	movs	r2, #32
 800156a:	409a      	lsls	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4013      	ands	r3, r2
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 808e 	beq.w	8001692 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0310 	and.w	r3, r3, #16
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 8086 	beq.w	8001692 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158a:	2220      	movs	r2, #32
 800158c:	409a      	lsls	r2, r3
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b05      	cmp	r3, #5
 800159c:	d136      	bne.n	800160c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0216 	bic.w	r2, r2, #22
 80015ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	695a      	ldr	r2, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d103      	bne.n	80015ce <HAL_DMA_IRQHandler+0x1da>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d007      	beq.n	80015de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 0208 	bic.w	r2, r2, #8
 80015dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e2:	223f      	movs	r2, #63	; 0x3f
 80015e4:	409a      	lsls	r2, r3
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d07d      	beq.n	80016fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	4798      	blx	r3
        }
        return;
 800160a:	e078      	b.n	80016fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d01c      	beq.n	8001654 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d108      	bne.n	800163a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162c:	2b00      	cmp	r3, #0
 800162e:	d030      	beq.n	8001692 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	4798      	blx	r3
 8001638:	e02b      	b.n	8001692 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163e:	2b00      	cmp	r3, #0
 8001640:	d027      	beq.n	8001692 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	4798      	blx	r3
 800164a:	e022      	b.n	8001692 <HAL_DMA_IRQHandler+0x29e>
 800164c:	20000004 	.word	0x20000004
 8001650:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10f      	bne.n	8001682 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 0210 	bic.w	r2, r2, #16
 8001670:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001696:	2b00      	cmp	r3, #0
 8001698:	d032      	beq.n	8001700 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d022      	beq.n	80016ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2205      	movs	r2, #5
 80016aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0201 	bic.w	r2, r2, #1
 80016bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	3301      	adds	r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d307      	bcc.n	80016da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1f2      	bne.n	80016be <HAL_DMA_IRQHandler+0x2ca>
 80016d8:	e000      	b.n	80016dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80016da:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	4798      	blx	r3
 80016fc:	e000      	b.n	8001700 <HAL_DMA_IRQHandler+0x30c>
        return;
 80016fe:	bf00      	nop
    }
  }
}
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop

08001708 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	3b10      	subs	r3, #16
 8001718:	4a14      	ldr	r2, [pc, #80]	; (800176c <DMA_CalcBaseAndBitshift+0x64>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	091b      	lsrs	r3, r3, #4
 8001720:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001722:	4a13      	ldr	r2, [pc, #76]	; (8001770 <DMA_CalcBaseAndBitshift+0x68>)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4413      	add	r3, r2
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2b03      	cmp	r3, #3
 8001734:	d909      	bls.n	800174a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800173e:	f023 0303 	bic.w	r3, r3, #3
 8001742:	1d1a      	adds	r2, r3, #4
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	659a      	str	r2, [r3, #88]	; 0x58
 8001748:	e007      	b.n	800175a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001752:	f023 0303 	bic.w	r3, r3, #3
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800175e:	4618      	mov	r0, r3
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	aaaaaaab 	.word	0xaaaaaaab
 8001770:	08004c58 	.word	0x08004c58

08001774 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001784:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d11f      	bne.n	80017ce <DMA_CheckFifoParam+0x5a>
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	2b03      	cmp	r3, #3
 8001792:	d856      	bhi.n	8001842 <DMA_CheckFifoParam+0xce>
 8001794:	a201      	add	r2, pc, #4	; (adr r2, 800179c <DMA_CheckFifoParam+0x28>)
 8001796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179a:	bf00      	nop
 800179c:	080017ad 	.word	0x080017ad
 80017a0:	080017bf 	.word	0x080017bf
 80017a4:	080017ad 	.word	0x080017ad
 80017a8:	08001843 	.word	0x08001843
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d046      	beq.n	8001846 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017bc:	e043      	b.n	8001846 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017c6:	d140      	bne.n	800184a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017cc:	e03d      	b.n	800184a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017d6:	d121      	bne.n	800181c <DMA_CheckFifoParam+0xa8>
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d837      	bhi.n	800184e <DMA_CheckFifoParam+0xda>
 80017de:	a201      	add	r2, pc, #4	; (adr r2, 80017e4 <DMA_CheckFifoParam+0x70>)
 80017e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e4:	080017f5 	.word	0x080017f5
 80017e8:	080017fb 	.word	0x080017fb
 80017ec:	080017f5 	.word	0x080017f5
 80017f0:	0800180d 	.word	0x0800180d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
      break;
 80017f8:	e030      	b.n	800185c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d025      	beq.n	8001852 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800180a:	e022      	b.n	8001852 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001810:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001814:	d11f      	bne.n	8001856 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800181a:	e01c      	b.n	8001856 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d903      	bls.n	800182a <DMA_CheckFifoParam+0xb6>
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2b03      	cmp	r3, #3
 8001826:	d003      	beq.n	8001830 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001828:	e018      	b.n	800185c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	73fb      	strb	r3, [r7, #15]
      break;
 800182e:	e015      	b.n	800185c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00e      	beq.n	800185a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	73fb      	strb	r3, [r7, #15]
      break;
 8001840:	e00b      	b.n	800185a <DMA_CheckFifoParam+0xe6>
      break;
 8001842:	bf00      	nop
 8001844:	e00a      	b.n	800185c <DMA_CheckFifoParam+0xe8>
      break;
 8001846:	bf00      	nop
 8001848:	e008      	b.n	800185c <DMA_CheckFifoParam+0xe8>
      break;
 800184a:	bf00      	nop
 800184c:	e006      	b.n	800185c <DMA_CheckFifoParam+0xe8>
      break;
 800184e:	bf00      	nop
 8001850:	e004      	b.n	800185c <DMA_CheckFifoParam+0xe8>
      break;
 8001852:	bf00      	nop
 8001854:	e002      	b.n	800185c <DMA_CheckFifoParam+0xe8>
      break;   
 8001856:	bf00      	nop
 8001858:	e000      	b.n	800185c <DMA_CheckFifoParam+0xe8>
      break;
 800185a:	bf00      	nop
    }
  } 
  
  return status; 
 800185c:	7bfb      	ldrb	r3, [r7, #15]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop

0800186c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800187e:	2300      	movs	r3, #0
 8001880:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
 8001886:	e165      	b.n	8001b54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001888:	2201      	movs	r2, #1
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	f040 8154 	bne.w	8001b4e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d005      	beq.n	80018be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d130      	bne.n	8001920 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	2203      	movs	r2, #3
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4013      	ands	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f4:	2201      	movs	r2, #1
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	f003 0201 	and.w	r2, r3, #1
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	2b03      	cmp	r3, #3
 800192a:	d017      	beq.n	800195c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	2203      	movs	r2, #3
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d123      	bne.n	80019b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	08da      	lsrs	r2, r3, #3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3208      	adds	r2, #8
 8001970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	220f      	movs	r2, #15
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	691a      	ldr	r2, [r3, #16]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	08da      	lsrs	r2, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3208      	adds	r2, #8
 80019aa:	69b9      	ldr	r1, [r7, #24]
 80019ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	2203      	movs	r2, #3
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0203 	and.w	r2, r3, #3
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 80ae 	beq.w	8001b4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	4b5d      	ldr	r3, [pc, #372]	; (8001b6c <HAL_GPIO_Init+0x300>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	4a5c      	ldr	r2, [pc, #368]	; (8001b6c <HAL_GPIO_Init+0x300>)
 80019fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a00:	6453      	str	r3, [r2, #68]	; 0x44
 8001a02:	4b5a      	ldr	r3, [pc, #360]	; (8001b6c <HAL_GPIO_Init+0x300>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a0e:	4a58      	ldr	r2, [pc, #352]	; (8001b70 <HAL_GPIO_Init+0x304>)
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	089b      	lsrs	r3, r3, #2
 8001a14:	3302      	adds	r3, #2
 8001a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	220f      	movs	r2, #15
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a4f      	ldr	r2, [pc, #316]	; (8001b74 <HAL_GPIO_Init+0x308>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d025      	beq.n	8001a86 <HAL_GPIO_Init+0x21a>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a4e      	ldr	r2, [pc, #312]	; (8001b78 <HAL_GPIO_Init+0x30c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d01f      	beq.n	8001a82 <HAL_GPIO_Init+0x216>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a4d      	ldr	r2, [pc, #308]	; (8001b7c <HAL_GPIO_Init+0x310>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d019      	beq.n	8001a7e <HAL_GPIO_Init+0x212>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a4c      	ldr	r2, [pc, #304]	; (8001b80 <HAL_GPIO_Init+0x314>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_Init+0x20e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a4b      	ldr	r2, [pc, #300]	; (8001b84 <HAL_GPIO_Init+0x318>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d00d      	beq.n	8001a76 <HAL_GPIO_Init+0x20a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a4a      	ldr	r2, [pc, #296]	; (8001b88 <HAL_GPIO_Init+0x31c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d007      	beq.n	8001a72 <HAL_GPIO_Init+0x206>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a49      	ldr	r2, [pc, #292]	; (8001b8c <HAL_GPIO_Init+0x320>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_GPIO_Init+0x202>
 8001a6a:	2306      	movs	r3, #6
 8001a6c:	e00c      	b.n	8001a88 <HAL_GPIO_Init+0x21c>
 8001a6e:	2307      	movs	r3, #7
 8001a70:	e00a      	b.n	8001a88 <HAL_GPIO_Init+0x21c>
 8001a72:	2305      	movs	r3, #5
 8001a74:	e008      	b.n	8001a88 <HAL_GPIO_Init+0x21c>
 8001a76:	2304      	movs	r3, #4
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x21c>
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e004      	b.n	8001a88 <HAL_GPIO_Init+0x21c>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e002      	b.n	8001a88 <HAL_GPIO_Init+0x21c>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_GPIO_Init+0x21c>
 8001a86:	2300      	movs	r3, #0
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	f002 0203 	and.w	r2, r2, #3
 8001a8e:	0092      	lsls	r2, r2, #2
 8001a90:	4093      	lsls	r3, r2
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a98:	4935      	ldr	r1, [pc, #212]	; (8001b70 <HAL_GPIO_Init+0x304>)
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	089b      	lsrs	r3, r3, #2
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aa6:	4b3a      	ldr	r3, [pc, #232]	; (8001b90 <HAL_GPIO_Init+0x324>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aca:	4a31      	ldr	r2, [pc, #196]	; (8001b90 <HAL_GPIO_Init+0x324>)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ad0:	4b2f      	ldr	r3, [pc, #188]	; (8001b90 <HAL_GPIO_Init+0x324>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001af4:	4a26      	ldr	r2, [pc, #152]	; (8001b90 <HAL_GPIO_Init+0x324>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001afa:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <HAL_GPIO_Init+0x324>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b1e:	4a1c      	ldr	r2, [pc, #112]	; (8001b90 <HAL_GPIO_Init+0x324>)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b24:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <HAL_GPIO_Init+0x324>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b48:	4a11      	ldr	r2, [pc, #68]	; (8001b90 <HAL_GPIO_Init+0x324>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3301      	adds	r3, #1
 8001b52:	61fb      	str	r3, [r7, #28]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	2b0f      	cmp	r3, #15
 8001b58:	f67f ae96 	bls.w	8001888 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	3724      	adds	r7, #36	; 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40013800 	.word	0x40013800
 8001b74:	40020000 	.word	0x40020000
 8001b78:	40020400 	.word	0x40020400
 8001b7c:	40020800 	.word	0x40020800
 8001b80:	40020c00 	.word	0x40020c00
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40021400 	.word	0x40021400
 8001b8c:	40021800 	.word	0x40021800
 8001b90:	40013c00 	.word	0x40013c00

08001b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba4:	787b      	ldrb	r3, [r7, #1]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bb0:	e003      	b.n	8001bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bb2:	887b      	ldrh	r3, [r7, #2]
 8001bb4:	041a      	lsls	r2, r3, #16
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	619a      	str	r2, [r3, #24]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0cc      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bdc:	4b68      	ldr	r3, [pc, #416]	; (8001d80 <HAL_RCC_ClockConfig+0x1b8>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d90c      	bls.n	8001c04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bea:	4b65      	ldr	r3, [pc, #404]	; (8001d80 <HAL_RCC_ClockConfig+0x1b8>)
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf2:	4b63      	ldr	r3, [pc, #396]	; (8001d80 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0b8      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d020      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c1c:	4b59      	ldr	r3, [pc, #356]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	4a58      	ldr	r2, [pc, #352]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c34:	4b53      	ldr	r3, [pc, #332]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	4a52      	ldr	r2, [pc, #328]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c40:	4b50      	ldr	r3, [pc, #320]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	494d      	ldr	r1, [pc, #308]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d044      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d107      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c66:	4b47      	ldr	r3, [pc, #284]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d119      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e07f      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d003      	beq.n	8001c86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c82:	2b03      	cmp	r3, #3
 8001c84:	d107      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c86:	4b3f      	ldr	r3, [pc, #252]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d109      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e06f      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c96:	4b3b      	ldr	r3, [pc, #236]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e067      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ca6:	4b37      	ldr	r3, [pc, #220]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f023 0203 	bic.w	r2, r3, #3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	4934      	ldr	r1, [pc, #208]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cb8:	f7ff f98a 	bl	8000fd0 <HAL_GetTick>
 8001cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc0:	f7ff f986 	bl	8000fd0 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e04f      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd6:	4b2b      	ldr	r3, [pc, #172]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 020c 	and.w	r2, r3, #12
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d1eb      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce8:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <HAL_RCC_ClockConfig+0x1b8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d20c      	bcs.n	8001d10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf6:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfe:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <HAL_RCC_ClockConfig+0x1b8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e032      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d008      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d1c:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	4916      	ldr	r1, [pc, #88]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d009      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	490e      	ldr	r1, [pc, #56]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d4e:	f000 f855 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 8001d52:	4602      	mov	r2, r0
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	490a      	ldr	r1, [pc, #40]	; (8001d88 <HAL_RCC_ClockConfig+0x1c0>)
 8001d60:	5ccb      	ldrb	r3, [r1, r3]
 8001d62:	fa22 f303 	lsr.w	r3, r2, r3
 8001d66:	4a09      	ldr	r2, [pc, #36]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_RCC_ClockConfig+0x1c8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff f8ea 	bl	8000f48 <HAL_InitTick>

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023c00 	.word	0x40023c00
 8001d84:	40023800 	.word	0x40023800
 8001d88:	08004c40 	.word	0x08004c40
 8001d8c:	20000004 	.word	0x20000004
 8001d90:	20000008 	.word	0x20000008

08001d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	20000004 	.word	0x20000004

08001dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001db0:	f7ff fff0 	bl	8001d94 <HAL_RCC_GetHCLKFreq>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	0a9b      	lsrs	r3, r3, #10
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	4903      	ldr	r1, [pc, #12]	; (8001dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dc2:	5ccb      	ldrb	r3, [r1, r3]
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	08004c50 	.word	0x08004c50

08001dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dd8:	f7ff ffdc 	bl	8001d94 <HAL_RCC_GetHCLKFreq>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	0b5b      	lsrs	r3, r3, #13
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	4903      	ldr	r1, [pc, #12]	; (8001df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dea:	5ccb      	ldrb	r3, [r1, r3]
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40023800 	.word	0x40023800
 8001df8:	08004c50 	.word	0x08004c50

08001dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e00:	b088      	sub	sp, #32
 8001e02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e18:	4bce      	ldr	r3, [pc, #824]	; (8002154 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 030c 	and.w	r3, r3, #12
 8001e20:	2b0c      	cmp	r3, #12
 8001e22:	f200 818d 	bhi.w	8002140 <HAL_RCC_GetSysClockFreq+0x344>
 8001e26:	a201      	add	r2, pc, #4	; (adr r2, 8001e2c <HAL_RCC_GetSysClockFreq+0x30>)
 8001e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2c:	08001e61 	.word	0x08001e61
 8001e30:	08002141 	.word	0x08002141
 8001e34:	08002141 	.word	0x08002141
 8001e38:	08002141 	.word	0x08002141
 8001e3c:	08001e67 	.word	0x08001e67
 8001e40:	08002141 	.word	0x08002141
 8001e44:	08002141 	.word	0x08002141
 8001e48:	08002141 	.word	0x08002141
 8001e4c:	08001e6d 	.word	0x08001e6d
 8001e50:	08002141 	.word	0x08002141
 8001e54:	08002141 	.word	0x08002141
 8001e58:	08002141 	.word	0x08002141
 8001e5c:	08001fe1 	.word	0x08001fe1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e60:	4bbd      	ldr	r3, [pc, #756]	; (8002158 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e62:	61bb      	str	r3, [r7, #24]
       break;
 8001e64:	e16f      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e66:	4bbd      	ldr	r3, [pc, #756]	; (800215c <HAL_RCC_GetSysClockFreq+0x360>)
 8001e68:	61bb      	str	r3, [r7, #24]
      break;
 8001e6a:	e16c      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e6c:	4bb9      	ldr	r3, [pc, #740]	; (8002154 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e74:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e76:	4bb7      	ldr	r3, [pc, #732]	; (8002154 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d053      	beq.n	8001f2a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e82:	4bb4      	ldr	r3, [pc, #720]	; (8002154 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	099b      	lsrs	r3, r3, #6
 8001e88:	461a      	mov	r2, r3
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e92:	f04f 0100 	mov.w	r1, #0
 8001e96:	ea02 0400 	and.w	r4, r2, r0
 8001e9a:	603c      	str	r4, [r7, #0]
 8001e9c:	400b      	ands	r3, r1
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	4629      	mov	r1, r5
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	014b      	lsls	r3, r1, #5
 8001eb2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001eb6:	0142      	lsls	r2, r0, #5
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4623      	mov	r3, r4
 8001ebe:	1ac0      	subs	r0, r0, r3
 8001ec0:	462b      	mov	r3, r5
 8001ec2:	eb61 0103 	sbc.w	r1, r1, r3
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	018b      	lsls	r3, r1, #6
 8001ed0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ed4:	0182      	lsls	r2, r0, #6
 8001ed6:	1a12      	subs	r2, r2, r0
 8001ed8:	eb63 0301 	sbc.w	r3, r3, r1
 8001edc:	f04f 0000 	mov.w	r0, #0
 8001ee0:	f04f 0100 	mov.w	r1, #0
 8001ee4:	00d9      	lsls	r1, r3, #3
 8001ee6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001eea:	00d0      	lsls	r0, r2, #3
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4621      	mov	r1, r4
 8001ef2:	1852      	adds	r2, r2, r1
 8001ef4:	4629      	mov	r1, r5
 8001ef6:	eb43 0101 	adc.w	r1, r3, r1
 8001efa:	460b      	mov	r3, r1
 8001efc:	f04f 0000 	mov.w	r0, #0
 8001f00:	f04f 0100 	mov.w	r1, #0
 8001f04:	0259      	lsls	r1, r3, #9
 8001f06:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001f0a:	0250      	lsls	r0, r2, #9
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4610      	mov	r0, r2
 8001f12:	4619      	mov	r1, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	461a      	mov	r2, r3
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	f7fe f9c8 	bl	80002b0 <__aeabi_uldivmod>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4613      	mov	r3, r2
 8001f26:	61fb      	str	r3, [r7, #28]
 8001f28:	e04c      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f2a:	4b8a      	ldr	r3, [pc, #552]	; (8002154 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	099b      	lsrs	r3, r3, #6
 8001f30:	461a      	mov	r2, r3
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f3a:	f04f 0100 	mov.w	r1, #0
 8001f3e:	ea02 0a00 	and.w	sl, r2, r0
 8001f42:	ea03 0b01 	and.w	fp, r3, r1
 8001f46:	4650      	mov	r0, sl
 8001f48:	4659      	mov	r1, fp
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	014b      	lsls	r3, r1, #5
 8001f54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f58:	0142      	lsls	r2, r0, #5
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	ebb0 000a 	subs.w	r0, r0, sl
 8001f62:	eb61 010b 	sbc.w	r1, r1, fp
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	018b      	lsls	r3, r1, #6
 8001f70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f74:	0182      	lsls	r2, r0, #6
 8001f76:	1a12      	subs	r2, r2, r0
 8001f78:	eb63 0301 	sbc.w	r3, r3, r1
 8001f7c:	f04f 0000 	mov.w	r0, #0
 8001f80:	f04f 0100 	mov.w	r1, #0
 8001f84:	00d9      	lsls	r1, r3, #3
 8001f86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f8a:	00d0      	lsls	r0, r2, #3
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	eb12 020a 	adds.w	r2, r2, sl
 8001f94:	eb43 030b 	adc.w	r3, r3, fp
 8001f98:	f04f 0000 	mov.w	r0, #0
 8001f9c:	f04f 0100 	mov.w	r1, #0
 8001fa0:	0299      	lsls	r1, r3, #10
 8001fa2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001fa6:	0290      	lsls	r0, r2, #10
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4610      	mov	r0, r2
 8001fae:	4619      	mov	r1, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	f7fe f97a 	bl	80002b0 <__aeabi_uldivmod>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fc4:	4b63      	ldr	r3, [pc, #396]	; (8002154 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	0c1b      	lsrs	r3, r3, #16
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	3301      	adds	r3, #1
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001fd4:	69fa      	ldr	r2, [r7, #28]
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fdc:	61bb      	str	r3, [r7, #24]
      break;
 8001fde:	e0b2      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fe0:	4b5c      	ldr	r3, [pc, #368]	; (8002154 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fe8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fea:	4b5a      	ldr	r3, [pc, #360]	; (8002154 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d04d      	beq.n	8002092 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ff6:	4b57      	ldr	r3, [pc, #348]	; (8002154 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	099b      	lsrs	r3, r3, #6
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002006:	f04f 0100 	mov.w	r1, #0
 800200a:	ea02 0800 	and.w	r8, r2, r0
 800200e:	ea03 0901 	and.w	r9, r3, r1
 8002012:	4640      	mov	r0, r8
 8002014:	4649      	mov	r1, r9
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	f04f 0300 	mov.w	r3, #0
 800201e:	014b      	lsls	r3, r1, #5
 8002020:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002024:	0142      	lsls	r2, r0, #5
 8002026:	4610      	mov	r0, r2
 8002028:	4619      	mov	r1, r3
 800202a:	ebb0 0008 	subs.w	r0, r0, r8
 800202e:	eb61 0109 	sbc.w	r1, r1, r9
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	018b      	lsls	r3, r1, #6
 800203c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002040:	0182      	lsls	r2, r0, #6
 8002042:	1a12      	subs	r2, r2, r0
 8002044:	eb63 0301 	sbc.w	r3, r3, r1
 8002048:	f04f 0000 	mov.w	r0, #0
 800204c:	f04f 0100 	mov.w	r1, #0
 8002050:	00d9      	lsls	r1, r3, #3
 8002052:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002056:	00d0      	lsls	r0, r2, #3
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	eb12 0208 	adds.w	r2, r2, r8
 8002060:	eb43 0309 	adc.w	r3, r3, r9
 8002064:	f04f 0000 	mov.w	r0, #0
 8002068:	f04f 0100 	mov.w	r1, #0
 800206c:	0259      	lsls	r1, r3, #9
 800206e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002072:	0250      	lsls	r0, r2, #9
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4610      	mov	r0, r2
 800207a:	4619      	mov	r1, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	461a      	mov	r2, r3
 8002080:	f04f 0300 	mov.w	r3, #0
 8002084:	f7fe f914 	bl	80002b0 <__aeabi_uldivmod>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4613      	mov	r3, r2
 800208e:	61fb      	str	r3, [r7, #28]
 8002090:	e04a      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002092:	4b30      	ldr	r3, [pc, #192]	; (8002154 <HAL_RCC_GetSysClockFreq+0x358>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	099b      	lsrs	r3, r3, #6
 8002098:	461a      	mov	r2, r3
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020a2:	f04f 0100 	mov.w	r1, #0
 80020a6:	ea02 0400 	and.w	r4, r2, r0
 80020aa:	ea03 0501 	and.w	r5, r3, r1
 80020ae:	4620      	mov	r0, r4
 80020b0:	4629      	mov	r1, r5
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	014b      	lsls	r3, r1, #5
 80020bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020c0:	0142      	lsls	r2, r0, #5
 80020c2:	4610      	mov	r0, r2
 80020c4:	4619      	mov	r1, r3
 80020c6:	1b00      	subs	r0, r0, r4
 80020c8:	eb61 0105 	sbc.w	r1, r1, r5
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	f04f 0300 	mov.w	r3, #0
 80020d4:	018b      	lsls	r3, r1, #6
 80020d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020da:	0182      	lsls	r2, r0, #6
 80020dc:	1a12      	subs	r2, r2, r0
 80020de:	eb63 0301 	sbc.w	r3, r3, r1
 80020e2:	f04f 0000 	mov.w	r0, #0
 80020e6:	f04f 0100 	mov.w	r1, #0
 80020ea:	00d9      	lsls	r1, r3, #3
 80020ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020f0:	00d0      	lsls	r0, r2, #3
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	1912      	adds	r2, r2, r4
 80020f8:	eb45 0303 	adc.w	r3, r5, r3
 80020fc:	f04f 0000 	mov.w	r0, #0
 8002100:	f04f 0100 	mov.w	r1, #0
 8002104:	0299      	lsls	r1, r3, #10
 8002106:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800210a:	0290      	lsls	r0, r2, #10
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4610      	mov	r0, r2
 8002112:	4619      	mov	r1, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	461a      	mov	r2, r3
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	f7fe f8c8 	bl	80002b0 <__aeabi_uldivmod>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4613      	mov	r3, r2
 8002126:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002128:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <HAL_RCC_GetSysClockFreq+0x358>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	0f1b      	lsrs	r3, r3, #28
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	fbb2 f3f3 	udiv	r3, r2, r3
 800213c:	61bb      	str	r3, [r7, #24]
      break;
 800213e:	e002      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002142:	61bb      	str	r3, [r7, #24]
      break;
 8002144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002146:	69bb      	ldr	r3, [r7, #24]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3720      	adds	r7, #32
 800214c:	46bd      	mov	sp, r7
 800214e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	00f42400 	.word	0x00f42400
 800215c:	007a1200 	.word	0x007a1200

08002160 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e28d      	b.n	800268e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 8083 	beq.w	8002286 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002180:	4b94      	ldr	r3, [pc, #592]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 030c 	and.w	r3, r3, #12
 8002188:	2b04      	cmp	r3, #4
 800218a:	d019      	beq.n	80021c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800218c:	4b91      	ldr	r3, [pc, #580]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002194:	2b08      	cmp	r3, #8
 8002196:	d106      	bne.n	80021a6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002198:	4b8e      	ldr	r3, [pc, #568]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021a4:	d00c      	beq.n	80021c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021a6:	4b8b      	ldr	r3, [pc, #556]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021ae:	2b0c      	cmp	r3, #12
 80021b0:	d112      	bne.n	80021d8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021b2:	4b88      	ldr	r3, [pc, #544]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021be:	d10b      	bne.n	80021d8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c0:	4b84      	ldr	r3, [pc, #528]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d05b      	beq.n	8002284 <HAL_RCC_OscConfig+0x124>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d157      	bne.n	8002284 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e25a      	b.n	800268e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e0:	d106      	bne.n	80021f0 <HAL_RCC_OscConfig+0x90>
 80021e2:	4b7c      	ldr	r3, [pc, #496]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a7b      	ldr	r2, [pc, #492]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e01d      	b.n	800222c <HAL_RCC_OscConfig+0xcc>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0xb4>
 80021fa:	4b76      	ldr	r3, [pc, #472]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a75      	ldr	r2, [pc, #468]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 8002200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	4b73      	ldr	r3, [pc, #460]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a72      	ldr	r2, [pc, #456]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 800220c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e00b      	b.n	800222c <HAL_RCC_OscConfig+0xcc>
 8002214:	4b6f      	ldr	r3, [pc, #444]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a6e      	ldr	r2, [pc, #440]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 800221a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b6c      	ldr	r3, [pc, #432]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a6b      	ldr	r2, [pc, #428]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 8002226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800222a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d013      	beq.n	800225c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7fe fecc 	bl	8000fd0 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800223c:	f7fe fec8 	bl	8000fd0 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	; 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e21f      	b.n	800268e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224e:	4b61      	ldr	r3, [pc, #388]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0xdc>
 800225a:	e014      	b.n	8002286 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7fe feb8 	bl	8000fd0 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002264:	f7fe feb4 	bl	8000fd0 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	; 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e20b      	b.n	800268e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002276:	4b57      	ldr	r3, [pc, #348]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x104>
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d06f      	beq.n	8002372 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002292:	4b50      	ldr	r3, [pc, #320]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b00      	cmp	r3, #0
 800229c:	d017      	beq.n	80022ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800229e:	4b4d      	ldr	r3, [pc, #308]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d105      	bne.n	80022b6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022aa:	4b4a      	ldr	r3, [pc, #296]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00b      	beq.n	80022ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022b6:	4b47      	ldr	r3, [pc, #284]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022be:	2b0c      	cmp	r3, #12
 80022c0:	d11c      	bne.n	80022fc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022c2:	4b44      	ldr	r3, [pc, #272]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d116      	bne.n	80022fc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ce:	4b41      	ldr	r3, [pc, #260]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d005      	beq.n	80022e6 <HAL_RCC_OscConfig+0x186>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d001      	beq.n	80022e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e1d3      	b.n	800268e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e6:	4b3b      	ldr	r3, [pc, #236]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4937      	ldr	r1, [pc, #220]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fa:	e03a      	b.n	8002372 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d020      	beq.n	8002346 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002304:	4b34      	ldr	r3, [pc, #208]	; (80023d8 <HAL_RCC_OscConfig+0x278>)
 8002306:	2201      	movs	r2, #1
 8002308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230a:	f7fe fe61 	bl	8000fd0 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002312:	f7fe fe5d 	bl	8000fd0 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e1b4      	b.n	800268e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002324:	4b2b      	ldr	r3, [pc, #172]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002330:	4b28      	ldr	r3, [pc, #160]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4925      	ldr	r1, [pc, #148]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 8002340:	4313      	orrs	r3, r2
 8002342:	600b      	str	r3, [r1, #0]
 8002344:	e015      	b.n	8002372 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002346:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <HAL_RCC_OscConfig+0x278>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234c:	f7fe fe40 	bl	8000fd0 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002354:	f7fe fe3c 	bl	8000fd0 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e193      	b.n	800268e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002366:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d036      	beq.n	80023ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d016      	beq.n	80023b4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <HAL_RCC_OscConfig+0x27c>)
 8002388:	2201      	movs	r2, #1
 800238a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238c:	f7fe fe20 	bl	8000fd0 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002394:	f7fe fe1c 	bl	8000fd0 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e173      	b.n	800268e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a6:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 80023a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x234>
 80023b2:	e01b      	b.n	80023ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HAL_RCC_OscConfig+0x27c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ba:	f7fe fe09 	bl	8000fd0 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c0:	e00e      	b.n	80023e0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023c2:	f7fe fe05 	bl	8000fd0 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d907      	bls.n	80023e0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e15c      	b.n	800268e <HAL_RCC_OscConfig+0x52e>
 80023d4:	40023800 	.word	0x40023800
 80023d8:	42470000 	.word	0x42470000
 80023dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e0:	4b8a      	ldr	r3, [pc, #552]	; (800260c <HAL_RCC_OscConfig+0x4ac>)
 80023e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1ea      	bne.n	80023c2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 8097 	beq.w	8002528 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023fa:	2300      	movs	r3, #0
 80023fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023fe:	4b83      	ldr	r3, [pc, #524]	; (800260c <HAL_RCC_OscConfig+0x4ac>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10f      	bne.n	800242a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	4b7f      	ldr	r3, [pc, #508]	; (800260c <HAL_RCC_OscConfig+0x4ac>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	4a7e      	ldr	r2, [pc, #504]	; (800260c <HAL_RCC_OscConfig+0x4ac>)
 8002414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002418:	6413      	str	r3, [r2, #64]	; 0x40
 800241a:	4b7c      	ldr	r3, [pc, #496]	; (800260c <HAL_RCC_OscConfig+0x4ac>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002426:	2301      	movs	r3, #1
 8002428:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242a:	4b79      	ldr	r3, [pc, #484]	; (8002610 <HAL_RCC_OscConfig+0x4b0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002432:	2b00      	cmp	r3, #0
 8002434:	d118      	bne.n	8002468 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002436:	4b76      	ldr	r3, [pc, #472]	; (8002610 <HAL_RCC_OscConfig+0x4b0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a75      	ldr	r2, [pc, #468]	; (8002610 <HAL_RCC_OscConfig+0x4b0>)
 800243c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002442:	f7fe fdc5 	bl	8000fd0 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800244a:	f7fe fdc1 	bl	8000fd0 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e118      	b.n	800268e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245c:	4b6c      	ldr	r3, [pc, #432]	; (8002610 <HAL_RCC_OscConfig+0x4b0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0f0      	beq.n	800244a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d106      	bne.n	800247e <HAL_RCC_OscConfig+0x31e>
 8002470:	4b66      	ldr	r3, [pc, #408]	; (800260c <HAL_RCC_OscConfig+0x4ac>)
 8002472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002474:	4a65      	ldr	r2, [pc, #404]	; (800260c <HAL_RCC_OscConfig+0x4ac>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6713      	str	r3, [r2, #112]	; 0x70
 800247c:	e01c      	b.n	80024b8 <HAL_RCC_OscConfig+0x358>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b05      	cmp	r3, #5
 8002484:	d10c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x340>
 8002486:	4b61      	ldr	r3, [pc, #388]	; (800260c <HAL_RCC_OscConfig+0x4ac>)
 8002488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248a:	4a60      	ldr	r2, [pc, #384]	; (800260c <HAL_RCC_OscConfig+0x4ac>)
 800248c:	f043 0304 	orr.w	r3, r3, #4
 8002490:	6713      	str	r3, [r2, #112]	; 0x70
 8002492:	4b5e      	ldr	r3, [pc, #376]	; (800260c <HAL_RCC_OscConfig+0x4ac>)
 8002494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002496:	4a5d      	ldr	r2, [pc, #372]	; (800260c <HAL_RCC_OscConfig+0x4ac>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6713      	str	r3, [r2, #112]	; 0x70
 800249e:	e00b      	b.n	80024b8 <HAL_RCC_OscConfig+0x358>
 80024a0:	4b5a      	ldr	r3, [pc, #360]	; (800260c <HAL_RCC_OscConfig+0x4ac>)
 80024a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a4:	4a59      	ldr	r2, [pc, #356]	; (800260c <HAL_RCC_OscConfig+0x4ac>)
 80024a6:	f023 0301 	bic.w	r3, r3, #1
 80024aa:	6713      	str	r3, [r2, #112]	; 0x70
 80024ac:	4b57      	ldr	r3, [pc, #348]	; (800260c <HAL_RCC_OscConfig+0x4ac>)
 80024ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b0:	4a56      	ldr	r2, [pc, #344]	; (800260c <HAL_RCC_OscConfig+0x4ac>)
 80024b2:	f023 0304 	bic.w	r3, r3, #4
 80024b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d015      	beq.n	80024ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c0:	f7fe fd86 	bl	8000fd0 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c6:	e00a      	b.n	80024de <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c8:	f7fe fd82 	bl	8000fd0 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e0d7      	b.n	800268e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024de:	4b4b      	ldr	r3, [pc, #300]	; (800260c <HAL_RCC_OscConfig+0x4ac>)
 80024e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0ee      	beq.n	80024c8 <HAL_RCC_OscConfig+0x368>
 80024ea:	e014      	b.n	8002516 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ec:	f7fe fd70 	bl	8000fd0 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f2:	e00a      	b.n	800250a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024f4:	f7fe fd6c 	bl	8000fd0 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002502:	4293      	cmp	r3, r2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e0c1      	b.n	800268e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800250a:	4b40      	ldr	r3, [pc, #256]	; (800260c <HAL_RCC_OscConfig+0x4ac>)
 800250c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1ee      	bne.n	80024f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002516:	7dfb      	ldrb	r3, [r7, #23]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d105      	bne.n	8002528 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251c:	4b3b      	ldr	r3, [pc, #236]	; (800260c <HAL_RCC_OscConfig+0x4ac>)
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	4a3a      	ldr	r2, [pc, #232]	; (800260c <HAL_RCC_OscConfig+0x4ac>)
 8002522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002526:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80ad 	beq.w	800268c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002532:	4b36      	ldr	r3, [pc, #216]	; (800260c <HAL_RCC_OscConfig+0x4ac>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b08      	cmp	r3, #8
 800253c:	d060      	beq.n	8002600 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d145      	bne.n	80025d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002546:	4b33      	ldr	r3, [pc, #204]	; (8002614 <HAL_RCC_OscConfig+0x4b4>)
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254c:	f7fe fd40 	bl	8000fd0 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002554:	f7fe fd3c 	bl	8000fd0 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e093      	b.n	800268e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002566:	4b29      	ldr	r3, [pc, #164]	; (800260c <HAL_RCC_OscConfig+0x4ac>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f0      	bne.n	8002554 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69da      	ldr	r2, [r3, #28]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	019b      	lsls	r3, r3, #6
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	085b      	lsrs	r3, r3, #1
 800258a:	3b01      	subs	r3, #1
 800258c:	041b      	lsls	r3, r3, #16
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002594:	061b      	lsls	r3, r3, #24
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	071b      	lsls	r3, r3, #28
 800259e:	491b      	ldr	r1, [pc, #108]	; (800260c <HAL_RCC_OscConfig+0x4ac>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a4:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <HAL_RCC_OscConfig+0x4b4>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025aa:	f7fe fd11 	bl	8000fd0 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b2:	f7fe fd0d 	bl	8000fd0 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e064      	b.n	800268e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <HAL_RCC_OscConfig+0x4ac>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x452>
 80025d0:	e05c      	b.n	800268c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d2:	4b10      	ldr	r3, [pc, #64]	; (8002614 <HAL_RCC_OscConfig+0x4b4>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7fe fcfa 	bl	8000fd0 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e0:	f7fe fcf6 	bl	8000fd0 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e04d      	b.n	800268e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_RCC_OscConfig+0x4ac>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x480>
 80025fe:	e045      	b.n	800268c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d107      	bne.n	8002618 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e040      	b.n	800268e <HAL_RCC_OscConfig+0x52e>
 800260c:	40023800 	.word	0x40023800
 8002610:	40007000 	.word	0x40007000
 8002614:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002618:	4b1f      	ldr	r3, [pc, #124]	; (8002698 <HAL_RCC_OscConfig+0x538>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d030      	beq.n	8002688 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002630:	429a      	cmp	r2, r3
 8002632:	d129      	bne.n	8002688 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d122      	bne.n	8002688 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002648:	4013      	ands	r3, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800264e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002650:	4293      	cmp	r3, r2
 8002652:	d119      	bne.n	8002688 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265e:	085b      	lsrs	r3, r3, #1
 8002660:	3b01      	subs	r3, #1
 8002662:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002664:	429a      	cmp	r2, r3
 8002666:	d10f      	bne.n	8002688 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002672:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002674:	429a      	cmp	r2, r3
 8002676:	d107      	bne.n	8002688 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40023800 	.word	0x40023800

0800269c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e07b      	b.n	80027a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d108      	bne.n	80026c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026be:	d009      	beq.n	80026d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	61da      	str	r2, [r3, #28]
 80026c6:	e005      	b.n	80026d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d106      	bne.n	80026f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7fe f9d6 	bl	8000aa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800270a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002758:	ea42 0103 	orr.w	r1, r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	0c1b      	lsrs	r3, r3, #16
 8002772:	f003 0104 	and.w	r1, r3, #4
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	f003 0210 	and.w	r2, r3, #16
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69da      	ldr	r2, [r3, #28]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002794:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b088      	sub	sp, #32
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	603b      	str	r3, [r7, #0]
 80027ba:	4613      	mov	r3, r2
 80027bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_SPI_Transmit+0x22>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e126      	b.n	8002a1e <HAL_SPI_Transmit+0x270>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027d8:	f7fe fbfa 	bl	8000fd0 <HAL_GetTick>
 80027dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80027de:	88fb      	ldrh	r3, [r7, #6]
 80027e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d002      	beq.n	80027f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80027ee:	2302      	movs	r3, #2
 80027f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027f2:	e10b      	b.n	8002a0c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <HAL_SPI_Transmit+0x52>
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d102      	bne.n	8002806 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002804:	e102      	b.n	8002a0c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2203      	movs	r2, #3
 800280a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	88fa      	ldrh	r2, [r7, #6]
 800281e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	88fa      	ldrh	r2, [r7, #6]
 8002824:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800284c:	d10f      	bne.n	800286e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800285c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800286c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002878:	2b40      	cmp	r3, #64	; 0x40
 800287a:	d007      	beq.n	800288c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800288a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002894:	d14b      	bne.n	800292e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d002      	beq.n	80028a4 <HAL_SPI_Transmit+0xf6>
 800289e:	8afb      	ldrh	r3, [r7, #22]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d13e      	bne.n	8002922 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	881a      	ldrh	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	1c9a      	adds	r2, r3, #2
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028be:	b29b      	uxth	r3, r3
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028c8:	e02b      	b.n	8002922 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d112      	bne.n	80028fe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	881a      	ldrh	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	1c9a      	adds	r2, r3, #2
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80028fc:	e011      	b.n	8002922 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028fe:	f7fe fb67 	bl	8000fd0 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d803      	bhi.n	8002916 <HAL_SPI_Transmit+0x168>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002914:	d102      	bne.n	800291c <HAL_SPI_Transmit+0x16e>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d102      	bne.n	8002922 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002920:	e074      	b.n	8002a0c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002926:	b29b      	uxth	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1ce      	bne.n	80028ca <HAL_SPI_Transmit+0x11c>
 800292c:	e04c      	b.n	80029c8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <HAL_SPI_Transmit+0x18e>
 8002936:	8afb      	ldrh	r3, [r7, #22]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d140      	bne.n	80029be <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	330c      	adds	r3, #12
 8002946:	7812      	ldrb	r2, [r2, #0]
 8002948:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002958:	b29b      	uxth	r3, r3
 800295a:	3b01      	subs	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002962:	e02c      	b.n	80029be <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b02      	cmp	r3, #2
 8002970:	d113      	bne.n	800299a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	330c      	adds	r3, #12
 800297c:	7812      	ldrb	r2, [r2, #0]
 800297e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	86da      	strh	r2, [r3, #54]	; 0x36
 8002998:	e011      	b.n	80029be <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800299a:	f7fe fb19 	bl	8000fd0 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d803      	bhi.n	80029b2 <HAL_SPI_Transmit+0x204>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b0:	d102      	bne.n	80029b8 <HAL_SPI_Transmit+0x20a>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d102      	bne.n	80029be <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029bc:	e026      	b.n	8002a0c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1cd      	bne.n	8002964 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	6839      	ldr	r1, [r7, #0]
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 faa1 	bl	8002f14 <SPI_EndRxTxTransaction>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2220      	movs	r2, #32
 80029dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10a      	bne.n	80029fc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029e6:	2300      	movs	r3, #0
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	77fb      	strb	r3, [r7, #31]
 8002a08:	e000      	b.n	8002a0c <HAL_SPI_Transmit+0x25e>
  }

error:
 8002a0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3720      	adds	r7, #32
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	4613      	mov	r3, r2
 8002a34:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_SPI_Transmit_IT+0x20>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e06f      	b.n	8002b28 <HAL_SPI_Transmit_IT+0x100>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <HAL_SPI_Transmit_IT+0x34>
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d102      	bne.n	8002a62 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a60:	e05d      	b.n	8002b1e <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d002      	beq.n	8002a74 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a72:	e054      	b.n	8002b1e <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2203      	movs	r2, #3
 8002a78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	88fa      	ldrh	r2, [r7, #6]
 8002a8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	88fa      	ldrh	r2, [r7, #6]
 8002a92:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4a1f      	ldr	r2, [pc, #124]	; (8002b34 <HAL_SPI_Transmit_IT+0x10c>)
 8002ab8:	645a      	str	r2, [r3, #68]	; 0x44
 8002aba:	e002      	b.n	8002ac2 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4a1e      	ldr	r2, [pc, #120]	; (8002b38 <HAL_SPI_Transmit_IT+0x110>)
 8002ac0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aca:	d10f      	bne.n	8002aec <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ada:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002aea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8002afa:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b06:	2b40      	cmp	r3, #64	; 0x40
 8002b08:	d008      	beq.n	8002b1c <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	e000      	b.n	8002b1e <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8002b1c:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	371c      	adds	r7, #28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	08002dbf 	.word	0x08002dbf
 8002b38:	08002d79 	.word	0x08002d79

08002b3c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	099b      	lsrs	r3, r3, #6
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10f      	bne.n	8002b80 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	099b      	lsrs	r3, r3, #6
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d004      	beq.n	8002b80 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	4798      	blx	r3
    return;
 8002b7e:	e0d7      	b.n	8002d30 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	085b      	lsrs	r3, r3, #1
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <HAL_SPI_IRQHandler+0x66>
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	09db      	lsrs	r3, r3, #7
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d004      	beq.n	8002ba2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	4798      	blx	r3
    return;
 8002ba0:	e0c6      	b.n	8002d30 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10c      	bne.n	8002bc8 <HAL_SPI_IRQHandler+0x8c>
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	099b      	lsrs	r3, r3, #6
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d106      	bne.n	8002bc8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	0a1b      	lsrs	r3, r3, #8
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 80b4 	beq.w	8002d30 <HAL_SPI_IRQHandler+0x1f4>
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 80ad 	beq.w	8002d30 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	099b      	lsrs	r3, r3, #6
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d023      	beq.n	8002c2a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	d011      	beq.n	8002c12 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf2:	f043 0204 	orr.w	r2, r3, #4
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	e00b      	b.n	8002c2a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	693b      	ldr	r3, [r7, #16]
        return;
 8002c28:	e082      	b.n	8002d30 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	095b      	lsrs	r3, r3, #5
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d014      	beq.n	8002c60 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3a:	f043 0201 	orr.w	r2, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002c42:	2300      	movs	r3, #0
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	0a1b      	lsrs	r3, r3, #8
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00c      	beq.n	8002c86 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c70:	f043 0208 	orr.w	r2, r3, #8
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d04f      	beq.n	8002d2e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c9c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d104      	bne.n	8002cba <HAL_SPI_IRQHandler+0x17e>
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d034      	beq.n	8002d24 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 0203 	bic.w	r2, r2, #3
 8002cc8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d011      	beq.n	8002cf6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd6:	4a18      	ldr	r2, [pc, #96]	; (8002d38 <HAL_SPI_IRQHandler+0x1fc>)
 8002cd8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe fb66 	bl	80013b0 <HAL_DMA_Abort_IT>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d005      	beq.n	8002cf6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d016      	beq.n	8002d2c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d02:	4a0d      	ldr	r2, [pc, #52]	; (8002d38 <HAL_SPI_IRQHandler+0x1fc>)
 8002d04:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe fb50 	bl	80013b0 <HAL_DMA_Abort_IT>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002d22:	e003      	b.n	8002d2c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f809 	bl	8002d3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002d2a:	e000      	b.n	8002d2e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002d2c:	bf00      	nop
    return;
 8002d2e:	bf00      	nop
  }
}
 8002d30:	3720      	adds	r7, #32
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	08002d51 	.word	0x08002d51

08002d3c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f7ff ffe6 	bl	8002d3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	330c      	adds	r3, #12
 8002d8a:	7812      	ldrb	r2, [r2, #0]
 8002d8c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d102      	bne.n	8002db6 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f8f1 	bl	8002f98 <SPI_CloseTx_ISR>
  }
}
 8002db6:	bf00      	nop
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	881a      	ldrh	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	1c9a      	adds	r2, r3, #2
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d102      	bne.n	8002dfa <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f8cf 	bl	8002f98 <SPI_CloseTx_ISR>
  }
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	4613      	mov	r3, r2
 8002e12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e14:	f7fe f8dc 	bl	8000fd0 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	4413      	add	r3, r2
 8002e22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e24:	f7fe f8d4 	bl	8000fd0 <HAL_GetTick>
 8002e28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e2a:	4b39      	ldr	r3, [pc, #228]	; (8002f10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	015b      	lsls	r3, r3, #5
 8002e30:	0d1b      	lsrs	r3, r3, #20
 8002e32:	69fa      	ldr	r2, [r7, #28]
 8002e34:	fb02 f303 	mul.w	r3, r2, r3
 8002e38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e3a:	e054      	b.n	8002ee6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e42:	d050      	beq.n	8002ee6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e44:	f7fe f8c4 	bl	8000fd0 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	69fa      	ldr	r2, [r7, #28]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d902      	bls.n	8002e5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d13d      	bne.n	8002ed6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e72:	d111      	bne.n	8002e98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e7c:	d004      	beq.n	8002e88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e86:	d107      	bne.n	8002e98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ea0:	d10f      	bne.n	8002ec2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ec0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e017      	b.n	8002f06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	bf0c      	ite	eq
 8002ef6:	2301      	moveq	r3, #1
 8002ef8:	2300      	movne	r3, #0
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	461a      	mov	r2, r3
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d19b      	bne.n	8002e3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3720      	adds	r7, #32
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000004 	.word	0x20000004

08002f14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f20:	4b1b      	ldr	r3, [pc, #108]	; (8002f90 <SPI_EndRxTxTransaction+0x7c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1b      	ldr	r2, [pc, #108]	; (8002f94 <SPI_EndRxTxTransaction+0x80>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	0d5b      	lsrs	r3, r3, #21
 8002f2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f30:	fb02 f303 	mul.w	r3, r2, r3
 8002f34:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f3e:	d112      	bne.n	8002f66 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2200      	movs	r2, #0
 8002f48:	2180      	movs	r1, #128	; 0x80
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f7ff ff5a 	bl	8002e04 <SPI_WaitFlagStateUntilTimeout>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d016      	beq.n	8002f84 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5a:	f043 0220 	orr.w	r2, r3, #32
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e00f      	b.n	8002f86 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00a      	beq.n	8002f82 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7c:	2b80      	cmp	r3, #128	; 0x80
 8002f7e:	d0f2      	beq.n	8002f66 <SPI_EndRxTxTransaction+0x52>
 8002f80:	e000      	b.n	8002f84 <SPI_EndRxTxTransaction+0x70>
        break;
 8002f82:	bf00      	nop
  }

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000004 	.word	0x20000004
 8002f94:	165e9f81 	.word	0x165e9f81

08002f98 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002fa0:	4b2c      	ldr	r3, [pc, #176]	; (8003054 <SPI_CloseTx_ISR+0xbc>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a2c      	ldr	r2, [pc, #176]	; (8003058 <SPI_CloseTx_ISR+0xc0>)
 8002fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002faa:	0a5b      	lsrs	r3, r3, #9
 8002fac:	2264      	movs	r2, #100	; 0x64
 8002fae:	fb02 f303 	mul.w	r3, r2, r3
 8002fb2:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fb4:	f7fe f80c 	bl	8000fd0 <HAL_GetTick>
 8002fb8:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d106      	bne.n	8002fce <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc4:	f043 0220 	orr.w	r2, r3, #32
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002fcc:	e009      	b.n	8002fe2 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0eb      	beq.n	8002fba <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ff0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	2164      	movs	r1, #100	; 0x64
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff ff8c 	bl	8002f14 <SPI_EndRxTxTransaction>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003006:	f043 0220 	orr.w	r2, r3, #32
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10a      	bne.n	800302c <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff fe7d 	bl	8002d3c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8003042:	e002      	b.n	800304a <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7fd fcd3 	bl	80009f0 <HAL_SPI_TxCpltCallback>
}
 800304a:	bf00      	nop
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000004 	.word	0x20000004
 8003058:	057619f1 	.word	0x057619f1

0800305c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e041      	b.n	80030f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d106      	bne.n	8003088 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7fd fe7a 	bl	8000d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3304      	adds	r3, #4
 8003098:	4619      	mov	r1, r3
 800309a:	4610      	mov	r0, r2
 800309c:	f000 f9ce 	bl	800343c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b01      	cmp	r3, #1
 800310e:	d001      	beq.n	8003114 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e04e      	b.n	80031b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a23      	ldr	r2, [pc, #140]	; (80031c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d022      	beq.n	800317c <HAL_TIM_Base_Start_IT+0x80>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800313e:	d01d      	beq.n	800317c <HAL_TIM_Base_Start_IT+0x80>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a1f      	ldr	r2, [pc, #124]	; (80031c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d018      	beq.n	800317c <HAL_TIM_Base_Start_IT+0x80>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a1e      	ldr	r2, [pc, #120]	; (80031c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d013      	beq.n	800317c <HAL_TIM_Base_Start_IT+0x80>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a1c      	ldr	r2, [pc, #112]	; (80031cc <HAL_TIM_Base_Start_IT+0xd0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d00e      	beq.n	800317c <HAL_TIM_Base_Start_IT+0x80>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a1b      	ldr	r2, [pc, #108]	; (80031d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d009      	beq.n	800317c <HAL_TIM_Base_Start_IT+0x80>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a19      	ldr	r2, [pc, #100]	; (80031d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d004      	beq.n	800317c <HAL_TIM_Base_Start_IT+0x80>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a18      	ldr	r2, [pc, #96]	; (80031d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d111      	bne.n	80031a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2b06      	cmp	r3, #6
 800318c:	d010      	beq.n	80031b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f042 0201 	orr.w	r2, r2, #1
 800319c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800319e:	e007      	b.n	80031b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0201 	orr.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	40010000 	.word	0x40010000
 80031c4:	40000400 	.word	0x40000400
 80031c8:	40000800 	.word	0x40000800
 80031cc:	40000c00 	.word	0x40000c00
 80031d0:	40010400 	.word	0x40010400
 80031d4:	40014000 	.word	0x40014000
 80031d8:	40001800 	.word	0x40001800

080031dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d122      	bne.n	8003238 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d11b      	bne.n	8003238 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f06f 0202 	mvn.w	r2, #2
 8003208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f8ee 	bl	8003400 <HAL_TIM_IC_CaptureCallback>
 8003224:	e005      	b.n	8003232 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f8e0 	bl	80033ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f8f1 	bl	8003414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	2b04      	cmp	r3, #4
 8003244:	d122      	bne.n	800328c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b04      	cmp	r3, #4
 8003252:	d11b      	bne.n	800328c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f06f 0204 	mvn.w	r2, #4
 800325c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2202      	movs	r2, #2
 8003262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f8c4 	bl	8003400 <HAL_TIM_IC_CaptureCallback>
 8003278:	e005      	b.n	8003286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f8b6 	bl	80033ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f8c7 	bl	8003414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b08      	cmp	r3, #8
 8003298:	d122      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f003 0308 	and.w	r3, r3, #8
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d11b      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f06f 0208 	mvn.w	r2, #8
 80032b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2204      	movs	r2, #4
 80032b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f89a 	bl	8003400 <HAL_TIM_IC_CaptureCallback>
 80032cc:	e005      	b.n	80032da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f88c 	bl	80033ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f89d 	bl	8003414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f003 0310 	and.w	r3, r3, #16
 80032ea:	2b10      	cmp	r3, #16
 80032ec:	d122      	bne.n	8003334 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	2b10      	cmp	r3, #16
 80032fa:	d11b      	bne.n	8003334 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f06f 0210 	mvn.w	r2, #16
 8003304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2208      	movs	r2, #8
 800330a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f870 	bl	8003400 <HAL_TIM_IC_CaptureCallback>
 8003320:	e005      	b.n	800332e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f862 	bl	80033ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f873 	bl	8003414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b01      	cmp	r3, #1
 8003340:	d10e      	bne.n	8003360 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b01      	cmp	r3, #1
 800334e:	d107      	bne.n	8003360 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0201 	mvn.w	r2, #1
 8003358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7fd fa84 	bl	8000868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336a:	2b80      	cmp	r3, #128	; 0x80
 800336c:	d10e      	bne.n	800338c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003378:	2b80      	cmp	r3, #128	; 0x80
 800337a:	d107      	bne.n	800338c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f902 	bl	8003590 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003396:	2b40      	cmp	r3, #64	; 0x40
 8003398:	d10e      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a4:	2b40      	cmp	r3, #64	; 0x40
 80033a6:	d107      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f838 	bl	8003428 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f003 0320 	and.w	r3, r3, #32
 80033c2:	2b20      	cmp	r3, #32
 80033c4:	d10e      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f003 0320 	and.w	r3, r3, #32
 80033d0:	2b20      	cmp	r3, #32
 80033d2:	d107      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0220 	mvn.w	r2, #32
 80033dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f8cc 	bl	800357c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033e4:	bf00      	nop
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a40      	ldr	r2, [pc, #256]	; (8003550 <TIM_Base_SetConfig+0x114>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d013      	beq.n	800347c <TIM_Base_SetConfig+0x40>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800345a:	d00f      	beq.n	800347c <TIM_Base_SetConfig+0x40>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a3d      	ldr	r2, [pc, #244]	; (8003554 <TIM_Base_SetConfig+0x118>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00b      	beq.n	800347c <TIM_Base_SetConfig+0x40>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a3c      	ldr	r2, [pc, #240]	; (8003558 <TIM_Base_SetConfig+0x11c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d007      	beq.n	800347c <TIM_Base_SetConfig+0x40>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a3b      	ldr	r2, [pc, #236]	; (800355c <TIM_Base_SetConfig+0x120>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d003      	beq.n	800347c <TIM_Base_SetConfig+0x40>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a3a      	ldr	r2, [pc, #232]	; (8003560 <TIM_Base_SetConfig+0x124>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d108      	bne.n	800348e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	4313      	orrs	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a2f      	ldr	r2, [pc, #188]	; (8003550 <TIM_Base_SetConfig+0x114>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d02b      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800349c:	d027      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a2c      	ldr	r2, [pc, #176]	; (8003554 <TIM_Base_SetConfig+0x118>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d023      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a2b      	ldr	r2, [pc, #172]	; (8003558 <TIM_Base_SetConfig+0x11c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d01f      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a2a      	ldr	r2, [pc, #168]	; (800355c <TIM_Base_SetConfig+0x120>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d01b      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a29      	ldr	r2, [pc, #164]	; (8003560 <TIM_Base_SetConfig+0x124>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d017      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a28      	ldr	r2, [pc, #160]	; (8003564 <TIM_Base_SetConfig+0x128>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a27      	ldr	r2, [pc, #156]	; (8003568 <TIM_Base_SetConfig+0x12c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00f      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a26      	ldr	r2, [pc, #152]	; (800356c <TIM_Base_SetConfig+0x130>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00b      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a25      	ldr	r2, [pc, #148]	; (8003570 <TIM_Base_SetConfig+0x134>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d007      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a24      	ldr	r2, [pc, #144]	; (8003574 <TIM_Base_SetConfig+0x138>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d003      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a23      	ldr	r2, [pc, #140]	; (8003578 <TIM_Base_SetConfig+0x13c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d108      	bne.n	8003500 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	4313      	orrs	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a0a      	ldr	r2, [pc, #40]	; (8003550 <TIM_Base_SetConfig+0x114>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d003      	beq.n	8003534 <TIM_Base_SetConfig+0xf8>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a0c      	ldr	r2, [pc, #48]	; (8003560 <TIM_Base_SetConfig+0x124>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d103      	bne.n	800353c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	615a      	str	r2, [r3, #20]
}
 8003542:	bf00      	nop
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40010000 	.word	0x40010000
 8003554:	40000400 	.word	0x40000400
 8003558:	40000800 	.word	0x40000800
 800355c:	40000c00 	.word	0x40000c00
 8003560:	40010400 	.word	0x40010400
 8003564:	40014000 	.word	0x40014000
 8003568:	40014400 	.word	0x40014400
 800356c:	40014800 	.word	0x40014800
 8003570:	40001800 	.word	0x40001800
 8003574:	40001c00 	.word	0x40001c00
 8003578:	40002000 	.word	0x40002000

0800357c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e03f      	b.n	8003636 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fd fc28 	bl	8000e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2224      	movs	r2, #36	; 0x24
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f829 	bl	8003640 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695a      	ldr	r2, [r3, #20]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800360c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800361c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003644:	b09f      	sub	sp, #124	; 0x7c
 8003646:	af00      	add	r7, sp, #0
 8003648:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800364a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003656:	68d9      	ldr	r1, [r3, #12]
 8003658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	ea40 0301 	orr.w	r3, r0, r1
 8003660:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	431a      	orrs	r2, r3
 800366c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	431a      	orrs	r2, r3
 8003672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	4313      	orrs	r3, r2
 8003678:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800367a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003684:	f021 010c 	bic.w	r1, r1, #12
 8003688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800368e:	430b      	orrs	r3, r1
 8003690:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800369c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800369e:	6999      	ldr	r1, [r3, #24]
 80036a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	ea40 0301 	orr.w	r3, r0, r1
 80036a8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	4bc5      	ldr	r3, [pc, #788]	; (80039c4 <UART_SetConfig+0x384>)
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d004      	beq.n	80036be <UART_SetConfig+0x7e>
 80036b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	4bc3      	ldr	r3, [pc, #780]	; (80039c8 <UART_SetConfig+0x388>)
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d103      	bne.n	80036c6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036be:	f7fe fb89 	bl	8001dd4 <HAL_RCC_GetPCLK2Freq>
 80036c2:	6778      	str	r0, [r7, #116]	; 0x74
 80036c4:	e002      	b.n	80036cc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036c6:	f7fe fb71 	bl	8001dac <HAL_RCC_GetPCLK1Freq>
 80036ca:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036d4:	f040 80b6 	bne.w	8003844 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036da:	461c      	mov	r4, r3
 80036dc:	f04f 0500 	mov.w	r5, #0
 80036e0:	4622      	mov	r2, r4
 80036e2:	462b      	mov	r3, r5
 80036e4:	1891      	adds	r1, r2, r2
 80036e6:	6439      	str	r1, [r7, #64]	; 0x40
 80036e8:	415b      	adcs	r3, r3
 80036ea:	647b      	str	r3, [r7, #68]	; 0x44
 80036ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036f0:	1912      	adds	r2, r2, r4
 80036f2:	eb45 0303 	adc.w	r3, r5, r3
 80036f6:	f04f 0000 	mov.w	r0, #0
 80036fa:	f04f 0100 	mov.w	r1, #0
 80036fe:	00d9      	lsls	r1, r3, #3
 8003700:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003704:	00d0      	lsls	r0, r2, #3
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	1911      	adds	r1, r2, r4
 800370c:	6639      	str	r1, [r7, #96]	; 0x60
 800370e:	416b      	adcs	r3, r5
 8003710:	667b      	str	r3, [r7, #100]	; 0x64
 8003712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	461a      	mov	r2, r3
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	1891      	adds	r1, r2, r2
 800371e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003720:	415b      	adcs	r3, r3
 8003722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003724:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003728:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800372c:	f7fc fdc0 	bl	80002b0 <__aeabi_uldivmod>
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	4ba5      	ldr	r3, [pc, #660]	; (80039cc <UART_SetConfig+0x38c>)
 8003736:	fba3 2302 	umull	r2, r3, r3, r2
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	011e      	lsls	r6, r3, #4
 800373e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003740:	461c      	mov	r4, r3
 8003742:	f04f 0500 	mov.w	r5, #0
 8003746:	4622      	mov	r2, r4
 8003748:	462b      	mov	r3, r5
 800374a:	1891      	adds	r1, r2, r2
 800374c:	6339      	str	r1, [r7, #48]	; 0x30
 800374e:	415b      	adcs	r3, r3
 8003750:	637b      	str	r3, [r7, #52]	; 0x34
 8003752:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003756:	1912      	adds	r2, r2, r4
 8003758:	eb45 0303 	adc.w	r3, r5, r3
 800375c:	f04f 0000 	mov.w	r0, #0
 8003760:	f04f 0100 	mov.w	r1, #0
 8003764:	00d9      	lsls	r1, r3, #3
 8003766:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800376a:	00d0      	lsls	r0, r2, #3
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	1911      	adds	r1, r2, r4
 8003772:	65b9      	str	r1, [r7, #88]	; 0x58
 8003774:	416b      	adcs	r3, r5
 8003776:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	461a      	mov	r2, r3
 800377e:	f04f 0300 	mov.w	r3, #0
 8003782:	1891      	adds	r1, r2, r2
 8003784:	62b9      	str	r1, [r7, #40]	; 0x28
 8003786:	415b      	adcs	r3, r3
 8003788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800378a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800378e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003792:	f7fc fd8d 	bl	80002b0 <__aeabi_uldivmod>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4b8c      	ldr	r3, [pc, #560]	; (80039cc <UART_SetConfig+0x38c>)
 800379c:	fba3 1302 	umull	r1, r3, r3, r2
 80037a0:	095b      	lsrs	r3, r3, #5
 80037a2:	2164      	movs	r1, #100	; 0x64
 80037a4:	fb01 f303 	mul.w	r3, r1, r3
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	3332      	adds	r3, #50	; 0x32
 80037ae:	4a87      	ldr	r2, [pc, #540]	; (80039cc <UART_SetConfig+0x38c>)
 80037b0:	fba2 2303 	umull	r2, r3, r2, r3
 80037b4:	095b      	lsrs	r3, r3, #5
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037bc:	441e      	add	r6, r3
 80037be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037c0:	4618      	mov	r0, r3
 80037c2:	f04f 0100 	mov.w	r1, #0
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	1894      	adds	r4, r2, r2
 80037cc:	623c      	str	r4, [r7, #32]
 80037ce:	415b      	adcs	r3, r3
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
 80037d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037d6:	1812      	adds	r2, r2, r0
 80037d8:	eb41 0303 	adc.w	r3, r1, r3
 80037dc:	f04f 0400 	mov.w	r4, #0
 80037e0:	f04f 0500 	mov.w	r5, #0
 80037e4:	00dd      	lsls	r5, r3, #3
 80037e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80037ea:	00d4      	lsls	r4, r2, #3
 80037ec:	4622      	mov	r2, r4
 80037ee:	462b      	mov	r3, r5
 80037f0:	1814      	adds	r4, r2, r0
 80037f2:	653c      	str	r4, [r7, #80]	; 0x50
 80037f4:	414b      	adcs	r3, r1
 80037f6:	657b      	str	r3, [r7, #84]	; 0x54
 80037f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	461a      	mov	r2, r3
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	1891      	adds	r1, r2, r2
 8003804:	61b9      	str	r1, [r7, #24]
 8003806:	415b      	adcs	r3, r3
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800380e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003812:	f7fc fd4d 	bl	80002b0 <__aeabi_uldivmod>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4b6c      	ldr	r3, [pc, #432]	; (80039cc <UART_SetConfig+0x38c>)
 800381c:	fba3 1302 	umull	r1, r3, r3, r2
 8003820:	095b      	lsrs	r3, r3, #5
 8003822:	2164      	movs	r1, #100	; 0x64
 8003824:	fb01 f303 	mul.w	r3, r1, r3
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	3332      	adds	r3, #50	; 0x32
 800382e:	4a67      	ldr	r2, [pc, #412]	; (80039cc <UART_SetConfig+0x38c>)
 8003830:	fba2 2303 	umull	r2, r3, r2, r3
 8003834:	095b      	lsrs	r3, r3, #5
 8003836:	f003 0207 	and.w	r2, r3, #7
 800383a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4432      	add	r2, r6
 8003840:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003842:	e0b9      	b.n	80039b8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003844:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003846:	461c      	mov	r4, r3
 8003848:	f04f 0500 	mov.w	r5, #0
 800384c:	4622      	mov	r2, r4
 800384e:	462b      	mov	r3, r5
 8003850:	1891      	adds	r1, r2, r2
 8003852:	6139      	str	r1, [r7, #16]
 8003854:	415b      	adcs	r3, r3
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800385c:	1912      	adds	r2, r2, r4
 800385e:	eb45 0303 	adc.w	r3, r5, r3
 8003862:	f04f 0000 	mov.w	r0, #0
 8003866:	f04f 0100 	mov.w	r1, #0
 800386a:	00d9      	lsls	r1, r3, #3
 800386c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003870:	00d0      	lsls	r0, r2, #3
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	eb12 0804 	adds.w	r8, r2, r4
 800387a:	eb43 0905 	adc.w	r9, r3, r5
 800387e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4618      	mov	r0, r3
 8003884:	f04f 0100 	mov.w	r1, #0
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	008b      	lsls	r3, r1, #2
 8003892:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003896:	0082      	lsls	r2, r0, #2
 8003898:	4640      	mov	r0, r8
 800389a:	4649      	mov	r1, r9
 800389c:	f7fc fd08 	bl	80002b0 <__aeabi_uldivmod>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4b49      	ldr	r3, [pc, #292]	; (80039cc <UART_SetConfig+0x38c>)
 80038a6:	fba3 2302 	umull	r2, r3, r3, r2
 80038aa:	095b      	lsrs	r3, r3, #5
 80038ac:	011e      	lsls	r6, r3, #4
 80038ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038b0:	4618      	mov	r0, r3
 80038b2:	f04f 0100 	mov.w	r1, #0
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	1894      	adds	r4, r2, r2
 80038bc:	60bc      	str	r4, [r7, #8]
 80038be:	415b      	adcs	r3, r3
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038c6:	1812      	adds	r2, r2, r0
 80038c8:	eb41 0303 	adc.w	r3, r1, r3
 80038cc:	f04f 0400 	mov.w	r4, #0
 80038d0:	f04f 0500 	mov.w	r5, #0
 80038d4:	00dd      	lsls	r5, r3, #3
 80038d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80038da:	00d4      	lsls	r4, r2, #3
 80038dc:	4622      	mov	r2, r4
 80038de:	462b      	mov	r3, r5
 80038e0:	1814      	adds	r4, r2, r0
 80038e2:	64bc      	str	r4, [r7, #72]	; 0x48
 80038e4:	414b      	adcs	r3, r1
 80038e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f04f 0100 	mov.w	r1, #0
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	008b      	lsls	r3, r1, #2
 80038fc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003900:	0082      	lsls	r2, r0, #2
 8003902:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003906:	f7fc fcd3 	bl	80002b0 <__aeabi_uldivmod>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4b2f      	ldr	r3, [pc, #188]	; (80039cc <UART_SetConfig+0x38c>)
 8003910:	fba3 1302 	umull	r1, r3, r3, r2
 8003914:	095b      	lsrs	r3, r3, #5
 8003916:	2164      	movs	r1, #100	; 0x64
 8003918:	fb01 f303 	mul.w	r3, r1, r3
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	3332      	adds	r3, #50	; 0x32
 8003922:	4a2a      	ldr	r2, [pc, #168]	; (80039cc <UART_SetConfig+0x38c>)
 8003924:	fba2 2303 	umull	r2, r3, r2, r3
 8003928:	095b      	lsrs	r3, r3, #5
 800392a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800392e:	441e      	add	r6, r3
 8003930:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003932:	4618      	mov	r0, r3
 8003934:	f04f 0100 	mov.w	r1, #0
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	1894      	adds	r4, r2, r2
 800393e:	603c      	str	r4, [r7, #0]
 8003940:	415b      	adcs	r3, r3
 8003942:	607b      	str	r3, [r7, #4]
 8003944:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003948:	1812      	adds	r2, r2, r0
 800394a:	eb41 0303 	adc.w	r3, r1, r3
 800394e:	f04f 0400 	mov.w	r4, #0
 8003952:	f04f 0500 	mov.w	r5, #0
 8003956:	00dd      	lsls	r5, r3, #3
 8003958:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800395c:	00d4      	lsls	r4, r2, #3
 800395e:	4622      	mov	r2, r4
 8003960:	462b      	mov	r3, r5
 8003962:	eb12 0a00 	adds.w	sl, r2, r0
 8003966:	eb43 0b01 	adc.w	fp, r3, r1
 800396a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	4618      	mov	r0, r3
 8003970:	f04f 0100 	mov.w	r1, #0
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	008b      	lsls	r3, r1, #2
 800397e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003982:	0082      	lsls	r2, r0, #2
 8003984:	4650      	mov	r0, sl
 8003986:	4659      	mov	r1, fp
 8003988:	f7fc fc92 	bl	80002b0 <__aeabi_uldivmod>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4b0e      	ldr	r3, [pc, #56]	; (80039cc <UART_SetConfig+0x38c>)
 8003992:	fba3 1302 	umull	r1, r3, r3, r2
 8003996:	095b      	lsrs	r3, r3, #5
 8003998:	2164      	movs	r1, #100	; 0x64
 800399a:	fb01 f303 	mul.w	r3, r1, r3
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	3332      	adds	r3, #50	; 0x32
 80039a4:	4a09      	ldr	r2, [pc, #36]	; (80039cc <UART_SetConfig+0x38c>)
 80039a6:	fba2 2303 	umull	r2, r3, r2, r3
 80039aa:	095b      	lsrs	r3, r3, #5
 80039ac:	f003 020f 	and.w	r2, r3, #15
 80039b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4432      	add	r2, r6
 80039b6:	609a      	str	r2, [r3, #8]
}
 80039b8:	bf00      	nop
 80039ba:	377c      	adds	r7, #124	; 0x7c
 80039bc:	46bd      	mov	sp, r7
 80039be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039c2:	bf00      	nop
 80039c4:	40011000 	.word	0x40011000
 80039c8:	40011400 	.word	0x40011400
 80039cc:	51eb851f 	.word	0x51eb851f

080039d0 <LCD_write_bloque>:
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	70fb      	strb	r3, [r7, #3]
 80039dc:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <LCD_write_bloque+0x78>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6898      	ldr	r0, [r3, #8]
 80039e2:	4b19      	ldr	r3, [pc, #100]	; (8003a48 <LCD_write_bloque+0x78>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	899b      	ldrh	r3, [r3, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	4619      	mov	r1, r3
 80039ec:	f7fe f8d2 	bl	8001b94 <HAL_GPIO_WritePin>
 80039f0:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <LCD_write_bloque+0x78>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6918      	ldr	r0, [r3, #16]
 80039f6:	4b14      	ldr	r3, [pc, #80]	; (8003a48 <LCD_write_bloque+0x78>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	8a9b      	ldrh	r3, [r3, #20]
 80039fc:	78fa      	ldrb	r2, [r7, #3]
 80039fe:	4619      	mov	r1, r3
 8003a00:	f7fe f8c8 	bl	8001b94 <HAL_GPIO_WritePin>
 8003a04:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <LCD_write_bloque+0x78>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6819      	ldr	r1, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	88da      	ldrh	r2, [r3, #6]
 8003a12:	f247 5330 	movw	r3, #30000	; 0x7530
 8003a16:	f7fe feca 	bl	80027ae <HAL_SPI_Transmit>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	73fb      	strb	r3, [r7, #15]
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <LCD_write_bloque+0x78>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6898      	ldr	r0, [r3, #8]
 8003a24:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <LCD_write_bloque+0x78>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	899b      	ldrh	r3, [r3, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	f7fe f8b1 	bl	8001b94 <HAL_GPIO_WritePin>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	711a      	strb	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a04      	ldr	r2, [pc, #16]	; (8003a4c <LCD_write_bloque+0x7c>)
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	200002c0 	.word	0x200002c0
 8003a4c:	200002c4 	.word	0x200002c4

08003a50 <LCD_write_IT>:
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	70fb      	strb	r3, [r7, #3]
 8003a5c:	4b18      	ldr	r3, [pc, #96]	; (8003ac0 <LCD_write_IT+0x70>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d001      	beq.n	8003a70 <LCD_write_IT+0x20>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e023      	b.n	8003ab8 <LCD_write_IT+0x68>
 8003a70:	4a14      	ldr	r2, [pc, #80]	; (8003ac4 <LCD_write_IT+0x74>)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	4b12      	ldr	r3, [pc, #72]	; (8003ac0 <LCD_write_IT+0x70>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6898      	ldr	r0, [r3, #8]
 8003a7c:	4b10      	ldr	r3, [pc, #64]	; (8003ac0 <LCD_write_IT+0x70>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	899b      	ldrh	r3, [r3, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	4619      	mov	r1, r3
 8003a86:	f7fe f885 	bl	8001b94 <HAL_GPIO_WritePin>
 8003a8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ac0 <LCD_write_IT+0x70>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6918      	ldr	r0, [r3, #16]
 8003a90:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <LCD_write_IT+0x70>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	8a9b      	ldrh	r3, [r3, #20]
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	4619      	mov	r1, r3
 8003a9a:	f7fe f87b 	bl	8001b94 <HAL_GPIO_WritePin>
 8003a9e:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <LCD_write_IT+0x70>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6819      	ldr	r1, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	88db      	ldrh	r3, [r3, #6]
 8003aac:	461a      	mov	r2, r3
 8003aae:	f7fe ffbb 	bl	8002a28 <HAL_SPI_Transmit_IT>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	73fb      	strb	r3, [r7, #15]
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	200002c0 	.word	0x200002c0
 8003ac4:	200004c4 	.word	0x200004c4

08003ac8 <LCD_write_DMA>:
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	70fb      	strb	r3, [r7, #3]
 8003ad4:	4b18      	ldr	r3, [pc, #96]	; (8003b38 <LCD_write_DMA+0x70>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d001      	beq.n	8003ae8 <LCD_write_DMA+0x20>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e023      	b.n	8003b30 <LCD_write_DMA+0x68>
 8003ae8:	4a14      	ldr	r2, [pc, #80]	; (8003b3c <LCD_write_DMA+0x74>)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	4b12      	ldr	r3, [pc, #72]	; (8003b38 <LCD_write_DMA+0x70>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6898      	ldr	r0, [r3, #8]
 8003af4:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <LCD_write_DMA+0x70>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	899b      	ldrh	r3, [r3, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	4619      	mov	r1, r3
 8003afe:	f7fe f849 	bl	8001b94 <HAL_GPIO_WritePin>
 8003b02:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <LCD_write_DMA+0x70>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6918      	ldr	r0, [r3, #16]
 8003b08:	4b0b      	ldr	r3, [pc, #44]	; (8003b38 <LCD_write_DMA+0x70>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	8a9b      	ldrh	r3, [r3, #20]
 8003b0e:	78fa      	ldrb	r2, [r7, #3]
 8003b10:	4619      	mov	r1, r3
 8003b12:	f7fe f83f 	bl	8001b94 <HAL_GPIO_WritePin>
 8003b16:	4b08      	ldr	r3, [pc, #32]	; (8003b38 <LCD_write_DMA+0x70>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6819      	ldr	r1, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	88db      	ldrh	r3, [r3, #6]
 8003b24:	461a      	mov	r2, r3
 8003b26:	f7fe ff7f 	bl	8002a28 <HAL_SPI_Transmit_IT>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	73fb      	strb	r3, [r7, #15]
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	200002c0 	.word	0x200002c0
 8003b3c:	200004c4 	.word	0x200004c4

08003b40 <LCD5110_init>:
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	4a44      	ldr	r2, [pc, #272]	; (8003c5c <LCD5110_init+0x11c>)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	e007      	b.n	8003b64 <LCD5110_init+0x24>
 8003b54:	4a42      	ldr	r2, [pc, #264]	; (8003c60 <LCD5110_init+0x120>)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4413      	add	r3, r2
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	701a      	strb	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3301      	adds	r3, #1
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8003b6a:	dbf3      	blt.n	8003b54 <LCD5110_init+0x14>
 8003b6c:	4b3d      	ldr	r3, [pc, #244]	; (8003c64 <LCD5110_init+0x124>)
 8003b6e:	4a3e      	ldr	r2, [pc, #248]	; (8003c68 <LCD5110_init+0x128>)
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	4b3c      	ldr	r3, [pc, #240]	; (8003c64 <LCD5110_init+0x124>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	80da      	strh	r2, [r3, #6]
 8003b78:	4b3a      	ldr	r3, [pc, #232]	; (8003c64 <LCD5110_init+0x124>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	711a      	strb	r2, [r3, #4]
 8003b7e:	4b37      	ldr	r3, [pc, #220]	; (8003c5c <LCD5110_init+0x11c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	791b      	ldrb	r3, [r3, #4]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d011      	beq.n	8003bac <LCD5110_init+0x6c>
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	dc03      	bgt.n	8003b94 <LCD5110_init+0x54>
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d005      	beq.n	8003b9c <LCD5110_init+0x5c>
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d007      	beq.n	8003ba4 <LCD5110_init+0x64>
 8003b94:	4b35      	ldr	r3, [pc, #212]	; (8003c6c <LCD5110_init+0x12c>)
 8003b96:	4a36      	ldr	r2, [pc, #216]	; (8003c70 <LCD5110_init+0x130>)
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	e00b      	b.n	8003bb4 <LCD5110_init+0x74>
 8003b9c:	4b33      	ldr	r3, [pc, #204]	; (8003c6c <LCD5110_init+0x12c>)
 8003b9e:	4a34      	ldr	r2, [pc, #208]	; (8003c70 <LCD5110_init+0x130>)
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	e007      	b.n	8003bb4 <LCD5110_init+0x74>
 8003ba4:	4b31      	ldr	r3, [pc, #196]	; (8003c6c <LCD5110_init+0x12c>)
 8003ba6:	4a33      	ldr	r2, [pc, #204]	; (8003c74 <LCD5110_init+0x134>)
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	e003      	b.n	8003bb4 <LCD5110_init+0x74>
 8003bac:	4b2f      	ldr	r3, [pc, #188]	; (8003c6c <LCD5110_init+0x12c>)
 8003bae:	4a32      	ldr	r2, [pc, #200]	; (8003c78 <LCD5110_init+0x138>)
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	bf00      	nop
 8003bb4:	4b29      	ldr	r3, [pc, #164]	; (8003c5c <LCD5110_init+0x11c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	619a      	str	r2, [r3, #24]
 8003bbc:	4b27      	ldr	r3, [pc, #156]	; (8003c5c <LCD5110_init+0x11c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6918      	ldr	r0, [r3, #16]
 8003bc2:	4b26      	ldr	r3, [pc, #152]	; (8003c5c <LCD5110_init+0x11c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	8a9b      	ldrh	r3, [r3, #20]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	4619      	mov	r1, r3
 8003bcc:	f7fd ffe2 	bl	8001b94 <HAL_GPIO_WritePin>
 8003bd0:	4b22      	ldr	r3, [pc, #136]	; (8003c5c <LCD5110_init+0x11c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6898      	ldr	r0, [r3, #8]
 8003bd6:	4b21      	ldr	r3, [pc, #132]	; (8003c5c <LCD5110_init+0x11c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	899b      	ldrh	r3, [r3, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	4619      	mov	r1, r3
 8003be0:	f7fd ffd8 	bl	8001b94 <HAL_GPIO_WritePin>
 8003be4:	2000      	movs	r0, #0
 8003be6:	f000 f93b 	bl	8003e60 <LCD5110_RST>
 8003bea:	200a      	movs	r0, #10
 8003bec:	f000 f956 	bl	8003e9c <LCD5110_LCD_delay_ms>
 8003bf0:	2001      	movs	r0, #1
 8003bf2:	f000 f935 	bl	8003e60 <LCD5110_RST>
 8003bf6:	bf00      	nop
 8003bf8:	f000 f8a4 	bl	8003d44 <LCD5110_clear>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1fa      	bne.n	8003bf8 <LCD5110_init+0xb8>
 8003c02:	4b19      	ldr	r3, [pc, #100]	; (8003c68 <LCD5110_init+0x128>)
 8003c04:	2221      	movs	r2, #33	; 0x21
 8003c06:	701a      	strb	r2, [r3, #0]
 8003c08:	4b17      	ldr	r3, [pc, #92]	; (8003c68 <LCD5110_init+0x128>)
 8003c0a:	22c0      	movs	r2, #192	; 0xc0
 8003c0c:	705a      	strb	r2, [r3, #1]
 8003c0e:	4b16      	ldr	r3, [pc, #88]	; (8003c68 <LCD5110_init+0x128>)
 8003c10:	2206      	movs	r2, #6
 8003c12:	709a      	strb	r2, [r3, #2]
 8003c14:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <LCD5110_init+0x128>)
 8003c16:	2213      	movs	r2, #19
 8003c18:	70da      	strb	r2, [r3, #3]
 8003c1a:	4b13      	ldr	r3, [pc, #76]	; (8003c68 <LCD5110_init+0x128>)
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	711a      	strb	r2, [r3, #4]
 8003c20:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <LCD5110_init+0x128>)
 8003c22:	220c      	movs	r2, #12
 8003c24:	715a      	strb	r2, [r3, #5]
 8003c26:	bf00      	nop
 8003c28:	4b0e      	ldr	r3, [pc, #56]	; (8003c64 <LCD5110_init+0x124>)
 8003c2a:	791b      	ldrb	r3, [r3, #4]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d0fb      	beq.n	8003c28 <LCD5110_init+0xe8>
 8003c30:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <LCD5110_init+0x124>)
 8003c32:	2206      	movs	r2, #6
 8003c34:	80da      	strh	r2, [r3, #6]
 8003c36:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <LCD5110_init+0x124>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	711a      	strb	r2, [r3, #4]
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <LCD5110_init+0x12c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2100      	movs	r1, #0
 8003c42:	4808      	ldr	r0, [pc, #32]	; (8003c64 <LCD5110_init+0x124>)
 8003c44:	4798      	blx	r3
 8003c46:	bf00      	nop
 8003c48:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <LCD5110_init+0x124>)
 8003c4a:	791b      	ldrb	r3, [r3, #4]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d0fb      	beq.n	8003c48 <LCD5110_init+0x108>
 8003c50:	bf00      	nop
 8003c52:	bf00      	nop
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	200002c0 	.word	0x200002c0
 8003c60:	20000674 	.word	0x20000674
 8003c64:	200004bc 	.word	0x200004bc
 8003c68:	200002c4 	.word	0x200002c4
 8003c6c:	200004c8 	.word	0x200004c8
 8003c70:	080039d1 	.word	0x080039d1
 8003c74:	08003a51 	.word	0x08003a51
 8003c78:	08003ac9 	.word	0x08003ac9

08003c7c <LCD_drawchar>:
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	6039      	str	r1, [r7, #0]
 8003c86:	71fb      	strb	r3, [r7, #7]
 8003c88:	79fb      	ldrb	r3, [r7, #7]
 8003c8a:	3b20      	subs	r3, #32
 8003c8c:	71fb      	strb	r3, [r7, #7]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	73fb      	strb	r3, [r7, #15]
 8003c92:	e011      	b.n	8003cb8 <LCD_drawchar+0x3c>
 8003c94:	79fa      	ldrb	r2, [r7, #7]
 8003c96:	7bf9      	ldrb	r1, [r7, #15]
 8003c98:	480c      	ldr	r0, [pc, #48]	; (8003ccc <LCD_drawchar+0x50>)
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	4413      	add	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4403      	add	r3, r0
 8003ca4:	440b      	add	r3, r1
 8003ca6:	781a      	ldrb	r2, [r3, #0]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	701a      	strb	r2, [r3, #0]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	73fb      	strb	r3, [r7, #15]
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
 8003cba:	2b05      	cmp	r3, #5
 8003cbc:	d9ea      	bls.n	8003c94 <LCD_drawchar+0x18>
 8003cbe:	bf00      	nop
 8003cc0:	bf00      	nop
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	20000010 	.word	0x20000010

08003cd0 <LCD5110_write_string>:
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	82fb      	strh	r3, [r7, #22]
 8003cdc:	4b17      	ldr	r3, [pc, #92]	; (8003d3c <LCD5110_write_string+0x6c>)
 8003cde:	791b      	ldrb	r3, [r3, #4]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <LCD5110_write_string+0x18>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e024      	b.n	8003d32 <LCD5110_write_string+0x62>
 8003ce8:	4b14      	ldr	r3, [pc, #80]	; (8003d3c <LCD5110_write_string+0x6c>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	711a      	strb	r2, [r3, #4]
 8003cee:	4b13      	ldr	r3, [pc, #76]	; (8003d3c <LCD5110_write_string+0x6c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	613b      	str	r3, [r7, #16]
 8003cf4:	e00e      	b.n	8003d14 <LCD5110_write_string+0x44>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	6939      	ldr	r1, [r7, #16]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff ffbd 	bl	8003c7c <LCD_drawchar>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3301      	adds	r3, #1
 8003d06:	607b      	str	r3, [r7, #4]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	3306      	adds	r3, #6
 8003d0c:	613b      	str	r3, [r7, #16]
 8003d0e:	8afb      	ldrh	r3, [r7, #22]
 8003d10:	3306      	adds	r3, #6
 8003d12:	82fb      	strh	r3, [r7, #22]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1ec      	bne.n	8003cf6 <LCD5110_write_string+0x26>
 8003d1c:	4a07      	ldr	r2, [pc, #28]	; (8003d3c <LCD5110_write_string+0x6c>)
 8003d1e:	8afb      	ldrh	r3, [r7, #22]
 8003d20:	80d3      	strh	r3, [r2, #6]
 8003d22:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <LCD5110_write_string+0x70>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2101      	movs	r1, #1
 8003d28:	4804      	ldr	r0, [pc, #16]	; (8003d3c <LCD5110_write_string+0x6c>)
 8003d2a:	4798      	blx	r3
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	73fb      	strb	r3, [r7, #15]
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
 8003d32:	4618      	mov	r0, r3
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	200004bc 	.word	0x200004bc
 8003d40:	200004c8 	.word	0x200004c8

08003d44 <LCD5110_clear>:
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4b0e      	ldr	r3, [pc, #56]	; (8003d84 <LCD5110_clear+0x40>)
 8003d4c:	791b      	ldrb	r3, [r3, #4]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <LCD5110_clear+0x12>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e011      	b.n	8003d7a <LCD5110_clear+0x36>
 8003d56:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <LCD5110_clear+0x40>)
 8003d58:	2201      	movs	r2, #1
 8003d5a:	711a      	strb	r2, [r3, #4]
 8003d5c:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <LCD5110_clear+0x40>)
 8003d5e:	4a0a      	ldr	r2, [pc, #40]	; (8003d88 <LCD5110_clear+0x44>)
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <LCD5110_clear+0x40>)
 8003d64:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8003d68:	80da      	strh	r2, [r3, #6]
 8003d6a:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <LCD5110_clear+0x48>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2101      	movs	r1, #1
 8003d70:	4804      	ldr	r0, [pc, #16]	; (8003d84 <LCD5110_clear+0x40>)
 8003d72:	4798      	blx	r3
 8003d74:	4603      	mov	r3, r0
 8003d76:	71fb      	strb	r3, [r7, #7]
 8003d78:	79fb      	ldrb	r3, [r7, #7]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	200004bc 	.word	0x200004bc
 8003d88:	20000674 	.word	0x20000674
 8003d8c:	200004c8 	.word	0x200004c8

08003d90 <LCD5110_write_block>:
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	807b      	strh	r3, [r7, #2]
 8003d9c:	4b0d      	ldr	r3, [pc, #52]	; (8003dd4 <LCD5110_write_block+0x44>)
 8003d9e:	791b      	ldrb	r3, [r3, #4]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <LCD5110_write_block+0x18>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e010      	b.n	8003dca <LCD5110_write_block+0x3a>
 8003da8:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <LCD5110_write_block+0x44>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	711a      	strb	r2, [r3, #4]
 8003dae:	4a09      	ldr	r2, [pc, #36]	; (8003dd4 <LCD5110_write_block+0x44>)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	4a07      	ldr	r2, [pc, #28]	; (8003dd4 <LCD5110_write_block+0x44>)
 8003db6:	887b      	ldrh	r3, [r7, #2]
 8003db8:	80d3      	strh	r3, [r2, #6]
 8003dba:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <LCD5110_write_block+0x48>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	4804      	ldr	r0, [pc, #16]	; (8003dd4 <LCD5110_write_block+0x44>)
 8003dc2:	4798      	blx	r3
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	73fb      	strb	r3, [r7, #15]
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	200004bc 	.word	0x200004bc
 8003dd8:	200004c8 	.word	0x200004c8

08003ddc <LCD5110_set_XY>:
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	460a      	mov	r2, r1
 8003de6:	71fb      	strb	r3, [r7, #7]
 8003de8:	4613      	mov	r3, r2
 8003dea:	71bb      	strb	r3, [r7, #6]
 8003dec:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <LCD5110_set_XY+0x7c>)
 8003dee:	791b      	ldrb	r3, [r3, #4]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <LCD5110_set_XY+0x1c>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e02a      	b.n	8003e4e <LCD5110_set_XY+0x72>
 8003df8:	4b17      	ldr	r3, [pc, #92]	; (8003e58 <LCD5110_set_XY+0x7c>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	711a      	strb	r2, [r3, #4]
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	461a      	mov	r2, r3
 8003e02:	0052      	lsls	r2, r2, #1
 8003e04:	4413      	add	r3, r2
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	71fb      	strb	r3, [r7, #7]
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e10:	71fb      	strb	r3, [r7, #7]
 8003e12:	79bb      	ldrb	r3, [r7, #6]
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	71bb      	strb	r3, [r7, #6]
 8003e1a:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <LCD5110_set_XY+0x7c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	79ba      	ldrb	r2, [r7, #6]
 8003e20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e24:	b2d2      	uxtb	r2, r2
 8003e26:	701a      	strb	r2, [r3, #0]
 8003e28:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <LCD5110_set_XY+0x7c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	79fa      	ldrb	r2, [r7, #7]
 8003e30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	701a      	strb	r2, [r3, #0]
 8003e38:	4b07      	ldr	r3, [pc, #28]	; (8003e58 <LCD5110_set_XY+0x7c>)
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	80da      	strh	r2, [r3, #6]
 8003e3e:	4b07      	ldr	r3, [pc, #28]	; (8003e5c <LCD5110_set_XY+0x80>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2100      	movs	r1, #0
 8003e44:	4804      	ldr	r0, [pc, #16]	; (8003e58 <LCD5110_set_XY+0x7c>)
 8003e46:	4798      	blx	r3
 8003e48:	4603      	mov	r3, r0
 8003e4a:	73fb      	strb	r3, [r7, #15]
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	200004bc 	.word	0x200004bc
 8003e5c:	200004c8 	.word	0x200004c8

08003e60 <LCD5110_RST>:
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	71fb      	strb	r3, [r7, #7]
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d006      	beq.n	8003e7e <LCD5110_RST+0x1e>
 8003e70:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <LCD5110_RST+0x38>)
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	4a08      	ldr	r2, [pc, #32]	; (8003e98 <LCD5110_RST+0x38>)
 8003e76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e7a:	6153      	str	r3, [r2, #20]
 8003e7c:	e005      	b.n	8003e8a <LCD5110_RST+0x2a>
 8003e7e:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <LCD5110_RST+0x38>)
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	4a05      	ldr	r2, [pc, #20]	; (8003e98 <LCD5110_RST+0x38>)
 8003e84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e88:	6153      	str	r3, [r2, #20]
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40020400 	.word	0x40020400

08003e9c <LCD5110_LCD_delay_ms>:
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f649 4240 	movw	r2, #40000	; 0x9c40
 8003eaa:	fb02 f303 	mul.w	r3, r2, r3
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	bf00      	nop
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	1e5a      	subs	r2, r3, #1
 8003eb6:	60fa      	str	r2, [r7, #12]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1fa      	bne.n	8003eb2 <LCD5110_LCD_delay_ms+0x16>
 8003ebc:	bf00      	nop
 8003ebe:	bf00      	nop
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
	...

08003ecc <LCD5110_TxCpltCallback>:
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	4b0d      	ldr	r3, [pc, #52]	; (8003f10 <LCD5110_TxCpltCallback+0x44>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d110      	bne.n	8003f06 <LCD5110_TxCpltCallback+0x3a>
 8003ee4:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <LCD5110_TxCpltCallback+0x44>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6898      	ldr	r0, [r3, #8]
 8003eea:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <LCD5110_TxCpltCallback+0x44>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	899b      	ldrh	r3, [r3, #12]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	f7fd fe4e 	bl	8001b94 <HAL_GPIO_WritePin>
 8003ef8:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <LCD5110_TxCpltCallback+0x48>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2200      	movs	r2, #0
 8003efe:	711a      	strb	r2, [r3, #4]
 8003f00:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <LCD5110_TxCpltCallback+0x4c>)
 8003f02:	4a06      	ldr	r2, [pc, #24]	; (8003f1c <LCD5110_TxCpltCallback+0x50>)
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	bf00      	nop
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	200002c0 	.word	0x200002c0
 8003f14:	200004c4 	.word	0x200004c4
 8003f18:	200004bc 	.word	0x200004bc
 8003f1c:	200002c4 	.word	0x200002c4

08003f20 <__errno>:
 8003f20:	4b01      	ldr	r3, [pc, #4]	; (8003f28 <__errno+0x8>)
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	20000238 	.word	0x20000238

08003f2c <__libc_init_array>:
 8003f2c:	b570      	push	{r4, r5, r6, lr}
 8003f2e:	4d0d      	ldr	r5, [pc, #52]	; (8003f64 <__libc_init_array+0x38>)
 8003f30:	4c0d      	ldr	r4, [pc, #52]	; (8003f68 <__libc_init_array+0x3c>)
 8003f32:	1b64      	subs	r4, r4, r5
 8003f34:	10a4      	asrs	r4, r4, #2
 8003f36:	2600      	movs	r6, #0
 8003f38:	42a6      	cmp	r6, r4
 8003f3a:	d109      	bne.n	8003f50 <__libc_init_array+0x24>
 8003f3c:	4d0b      	ldr	r5, [pc, #44]	; (8003f6c <__libc_init_array+0x40>)
 8003f3e:	4c0c      	ldr	r4, [pc, #48]	; (8003f70 <__libc_init_array+0x44>)
 8003f40:	f000 fc4e 	bl	80047e0 <_init>
 8003f44:	1b64      	subs	r4, r4, r5
 8003f46:	10a4      	asrs	r4, r4, #2
 8003f48:	2600      	movs	r6, #0
 8003f4a:	42a6      	cmp	r6, r4
 8003f4c:	d105      	bne.n	8003f5a <__libc_init_array+0x2e>
 8003f4e:	bd70      	pop	{r4, r5, r6, pc}
 8003f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f54:	4798      	blx	r3
 8003f56:	3601      	adds	r6, #1
 8003f58:	e7ee      	b.n	8003f38 <__libc_init_array+0xc>
 8003f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f5e:	4798      	blx	r3
 8003f60:	3601      	adds	r6, #1
 8003f62:	e7f2      	b.n	8003f4a <__libc_init_array+0x1e>
 8003f64:	08004c9c 	.word	0x08004c9c
 8003f68:	08004c9c 	.word	0x08004c9c
 8003f6c:	08004c9c 	.word	0x08004c9c
 8003f70:	08004ca0 	.word	0x08004ca0

08003f74 <memset>:
 8003f74:	4402      	add	r2, r0
 8003f76:	4603      	mov	r3, r0
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d100      	bne.n	8003f7e <memset+0xa>
 8003f7c:	4770      	bx	lr
 8003f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f82:	e7f9      	b.n	8003f78 <memset+0x4>

08003f84 <siprintf>:
 8003f84:	b40e      	push	{r1, r2, r3}
 8003f86:	b500      	push	{lr}
 8003f88:	b09c      	sub	sp, #112	; 0x70
 8003f8a:	ab1d      	add	r3, sp, #116	; 0x74
 8003f8c:	9002      	str	r0, [sp, #8]
 8003f8e:	9006      	str	r0, [sp, #24]
 8003f90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f94:	4809      	ldr	r0, [pc, #36]	; (8003fbc <siprintf+0x38>)
 8003f96:	9107      	str	r1, [sp, #28]
 8003f98:	9104      	str	r1, [sp, #16]
 8003f9a:	4909      	ldr	r1, [pc, #36]	; (8003fc0 <siprintf+0x3c>)
 8003f9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fa0:	9105      	str	r1, [sp, #20]
 8003fa2:	6800      	ldr	r0, [r0, #0]
 8003fa4:	9301      	str	r3, [sp, #4]
 8003fa6:	a902      	add	r1, sp, #8
 8003fa8:	f000 f868 	bl	800407c <_svfiprintf_r>
 8003fac:	9b02      	ldr	r3, [sp, #8]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	701a      	strb	r2, [r3, #0]
 8003fb2:	b01c      	add	sp, #112	; 0x70
 8003fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fb8:	b003      	add	sp, #12
 8003fba:	4770      	bx	lr
 8003fbc:	20000238 	.word	0x20000238
 8003fc0:	ffff0208 	.word	0xffff0208

08003fc4 <__ssputs_r>:
 8003fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc8:	688e      	ldr	r6, [r1, #8]
 8003fca:	429e      	cmp	r6, r3
 8003fcc:	4682      	mov	sl, r0
 8003fce:	460c      	mov	r4, r1
 8003fd0:	4690      	mov	r8, r2
 8003fd2:	461f      	mov	r7, r3
 8003fd4:	d838      	bhi.n	8004048 <__ssputs_r+0x84>
 8003fd6:	898a      	ldrh	r2, [r1, #12]
 8003fd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003fdc:	d032      	beq.n	8004044 <__ssputs_r+0x80>
 8003fde:	6825      	ldr	r5, [r4, #0]
 8003fe0:	6909      	ldr	r1, [r1, #16]
 8003fe2:	eba5 0901 	sub.w	r9, r5, r1
 8003fe6:	6965      	ldr	r5, [r4, #20]
 8003fe8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	444b      	add	r3, r9
 8003ff4:	106d      	asrs	r5, r5, #1
 8003ff6:	429d      	cmp	r5, r3
 8003ff8:	bf38      	it	cc
 8003ffa:	461d      	movcc	r5, r3
 8003ffc:	0553      	lsls	r3, r2, #21
 8003ffe:	d531      	bpl.n	8004064 <__ssputs_r+0xa0>
 8004000:	4629      	mov	r1, r5
 8004002:	f000 fb47 	bl	8004694 <_malloc_r>
 8004006:	4606      	mov	r6, r0
 8004008:	b950      	cbnz	r0, 8004020 <__ssputs_r+0x5c>
 800400a:	230c      	movs	r3, #12
 800400c:	f8ca 3000 	str.w	r3, [sl]
 8004010:	89a3      	ldrh	r3, [r4, #12]
 8004012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004016:	81a3      	strh	r3, [r4, #12]
 8004018:	f04f 30ff 	mov.w	r0, #4294967295
 800401c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004020:	6921      	ldr	r1, [r4, #16]
 8004022:	464a      	mov	r2, r9
 8004024:	f000 fabe 	bl	80045a4 <memcpy>
 8004028:	89a3      	ldrh	r3, [r4, #12]
 800402a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800402e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004032:	81a3      	strh	r3, [r4, #12]
 8004034:	6126      	str	r6, [r4, #16]
 8004036:	6165      	str	r5, [r4, #20]
 8004038:	444e      	add	r6, r9
 800403a:	eba5 0509 	sub.w	r5, r5, r9
 800403e:	6026      	str	r6, [r4, #0]
 8004040:	60a5      	str	r5, [r4, #8]
 8004042:	463e      	mov	r6, r7
 8004044:	42be      	cmp	r6, r7
 8004046:	d900      	bls.n	800404a <__ssputs_r+0x86>
 8004048:	463e      	mov	r6, r7
 800404a:	4632      	mov	r2, r6
 800404c:	6820      	ldr	r0, [r4, #0]
 800404e:	4641      	mov	r1, r8
 8004050:	f000 fab6 	bl	80045c0 <memmove>
 8004054:	68a3      	ldr	r3, [r4, #8]
 8004056:	6822      	ldr	r2, [r4, #0]
 8004058:	1b9b      	subs	r3, r3, r6
 800405a:	4432      	add	r2, r6
 800405c:	60a3      	str	r3, [r4, #8]
 800405e:	6022      	str	r2, [r4, #0]
 8004060:	2000      	movs	r0, #0
 8004062:	e7db      	b.n	800401c <__ssputs_r+0x58>
 8004064:	462a      	mov	r2, r5
 8004066:	f000 fb6f 	bl	8004748 <_realloc_r>
 800406a:	4606      	mov	r6, r0
 800406c:	2800      	cmp	r0, #0
 800406e:	d1e1      	bne.n	8004034 <__ssputs_r+0x70>
 8004070:	6921      	ldr	r1, [r4, #16]
 8004072:	4650      	mov	r0, sl
 8004074:	f000 fabe 	bl	80045f4 <_free_r>
 8004078:	e7c7      	b.n	800400a <__ssputs_r+0x46>
	...

0800407c <_svfiprintf_r>:
 800407c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004080:	4698      	mov	r8, r3
 8004082:	898b      	ldrh	r3, [r1, #12]
 8004084:	061b      	lsls	r3, r3, #24
 8004086:	b09d      	sub	sp, #116	; 0x74
 8004088:	4607      	mov	r7, r0
 800408a:	460d      	mov	r5, r1
 800408c:	4614      	mov	r4, r2
 800408e:	d50e      	bpl.n	80040ae <_svfiprintf_r+0x32>
 8004090:	690b      	ldr	r3, [r1, #16]
 8004092:	b963      	cbnz	r3, 80040ae <_svfiprintf_r+0x32>
 8004094:	2140      	movs	r1, #64	; 0x40
 8004096:	f000 fafd 	bl	8004694 <_malloc_r>
 800409a:	6028      	str	r0, [r5, #0]
 800409c:	6128      	str	r0, [r5, #16]
 800409e:	b920      	cbnz	r0, 80040aa <_svfiprintf_r+0x2e>
 80040a0:	230c      	movs	r3, #12
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	f04f 30ff 	mov.w	r0, #4294967295
 80040a8:	e0d1      	b.n	800424e <_svfiprintf_r+0x1d2>
 80040aa:	2340      	movs	r3, #64	; 0x40
 80040ac:	616b      	str	r3, [r5, #20]
 80040ae:	2300      	movs	r3, #0
 80040b0:	9309      	str	r3, [sp, #36]	; 0x24
 80040b2:	2320      	movs	r3, #32
 80040b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80040bc:	2330      	movs	r3, #48	; 0x30
 80040be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004268 <_svfiprintf_r+0x1ec>
 80040c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040c6:	f04f 0901 	mov.w	r9, #1
 80040ca:	4623      	mov	r3, r4
 80040cc:	469a      	mov	sl, r3
 80040ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040d2:	b10a      	cbz	r2, 80040d8 <_svfiprintf_r+0x5c>
 80040d4:	2a25      	cmp	r2, #37	; 0x25
 80040d6:	d1f9      	bne.n	80040cc <_svfiprintf_r+0x50>
 80040d8:	ebba 0b04 	subs.w	fp, sl, r4
 80040dc:	d00b      	beq.n	80040f6 <_svfiprintf_r+0x7a>
 80040de:	465b      	mov	r3, fp
 80040e0:	4622      	mov	r2, r4
 80040e2:	4629      	mov	r1, r5
 80040e4:	4638      	mov	r0, r7
 80040e6:	f7ff ff6d 	bl	8003fc4 <__ssputs_r>
 80040ea:	3001      	adds	r0, #1
 80040ec:	f000 80aa 	beq.w	8004244 <_svfiprintf_r+0x1c8>
 80040f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040f2:	445a      	add	r2, fp
 80040f4:	9209      	str	r2, [sp, #36]	; 0x24
 80040f6:	f89a 3000 	ldrb.w	r3, [sl]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 80a2 	beq.w	8004244 <_svfiprintf_r+0x1c8>
 8004100:	2300      	movs	r3, #0
 8004102:	f04f 32ff 	mov.w	r2, #4294967295
 8004106:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800410a:	f10a 0a01 	add.w	sl, sl, #1
 800410e:	9304      	str	r3, [sp, #16]
 8004110:	9307      	str	r3, [sp, #28]
 8004112:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004116:	931a      	str	r3, [sp, #104]	; 0x68
 8004118:	4654      	mov	r4, sl
 800411a:	2205      	movs	r2, #5
 800411c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004120:	4851      	ldr	r0, [pc, #324]	; (8004268 <_svfiprintf_r+0x1ec>)
 8004122:	f7fc f875 	bl	8000210 <memchr>
 8004126:	9a04      	ldr	r2, [sp, #16]
 8004128:	b9d8      	cbnz	r0, 8004162 <_svfiprintf_r+0xe6>
 800412a:	06d0      	lsls	r0, r2, #27
 800412c:	bf44      	itt	mi
 800412e:	2320      	movmi	r3, #32
 8004130:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004134:	0711      	lsls	r1, r2, #28
 8004136:	bf44      	itt	mi
 8004138:	232b      	movmi	r3, #43	; 0x2b
 800413a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800413e:	f89a 3000 	ldrb.w	r3, [sl]
 8004142:	2b2a      	cmp	r3, #42	; 0x2a
 8004144:	d015      	beq.n	8004172 <_svfiprintf_r+0xf6>
 8004146:	9a07      	ldr	r2, [sp, #28]
 8004148:	4654      	mov	r4, sl
 800414a:	2000      	movs	r0, #0
 800414c:	f04f 0c0a 	mov.w	ip, #10
 8004150:	4621      	mov	r1, r4
 8004152:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004156:	3b30      	subs	r3, #48	; 0x30
 8004158:	2b09      	cmp	r3, #9
 800415a:	d94e      	bls.n	80041fa <_svfiprintf_r+0x17e>
 800415c:	b1b0      	cbz	r0, 800418c <_svfiprintf_r+0x110>
 800415e:	9207      	str	r2, [sp, #28]
 8004160:	e014      	b.n	800418c <_svfiprintf_r+0x110>
 8004162:	eba0 0308 	sub.w	r3, r0, r8
 8004166:	fa09 f303 	lsl.w	r3, r9, r3
 800416a:	4313      	orrs	r3, r2
 800416c:	9304      	str	r3, [sp, #16]
 800416e:	46a2      	mov	sl, r4
 8004170:	e7d2      	b.n	8004118 <_svfiprintf_r+0x9c>
 8004172:	9b03      	ldr	r3, [sp, #12]
 8004174:	1d19      	adds	r1, r3, #4
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	9103      	str	r1, [sp, #12]
 800417a:	2b00      	cmp	r3, #0
 800417c:	bfbb      	ittet	lt
 800417e:	425b      	neglt	r3, r3
 8004180:	f042 0202 	orrlt.w	r2, r2, #2
 8004184:	9307      	strge	r3, [sp, #28]
 8004186:	9307      	strlt	r3, [sp, #28]
 8004188:	bfb8      	it	lt
 800418a:	9204      	strlt	r2, [sp, #16]
 800418c:	7823      	ldrb	r3, [r4, #0]
 800418e:	2b2e      	cmp	r3, #46	; 0x2e
 8004190:	d10c      	bne.n	80041ac <_svfiprintf_r+0x130>
 8004192:	7863      	ldrb	r3, [r4, #1]
 8004194:	2b2a      	cmp	r3, #42	; 0x2a
 8004196:	d135      	bne.n	8004204 <_svfiprintf_r+0x188>
 8004198:	9b03      	ldr	r3, [sp, #12]
 800419a:	1d1a      	adds	r2, r3, #4
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	9203      	str	r2, [sp, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	bfb8      	it	lt
 80041a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80041a8:	3402      	adds	r4, #2
 80041aa:	9305      	str	r3, [sp, #20]
 80041ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004278 <_svfiprintf_r+0x1fc>
 80041b0:	7821      	ldrb	r1, [r4, #0]
 80041b2:	2203      	movs	r2, #3
 80041b4:	4650      	mov	r0, sl
 80041b6:	f7fc f82b 	bl	8000210 <memchr>
 80041ba:	b140      	cbz	r0, 80041ce <_svfiprintf_r+0x152>
 80041bc:	2340      	movs	r3, #64	; 0x40
 80041be:	eba0 000a 	sub.w	r0, r0, sl
 80041c2:	fa03 f000 	lsl.w	r0, r3, r0
 80041c6:	9b04      	ldr	r3, [sp, #16]
 80041c8:	4303      	orrs	r3, r0
 80041ca:	3401      	adds	r4, #1
 80041cc:	9304      	str	r3, [sp, #16]
 80041ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041d2:	4826      	ldr	r0, [pc, #152]	; (800426c <_svfiprintf_r+0x1f0>)
 80041d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041d8:	2206      	movs	r2, #6
 80041da:	f7fc f819 	bl	8000210 <memchr>
 80041de:	2800      	cmp	r0, #0
 80041e0:	d038      	beq.n	8004254 <_svfiprintf_r+0x1d8>
 80041e2:	4b23      	ldr	r3, [pc, #140]	; (8004270 <_svfiprintf_r+0x1f4>)
 80041e4:	bb1b      	cbnz	r3, 800422e <_svfiprintf_r+0x1b2>
 80041e6:	9b03      	ldr	r3, [sp, #12]
 80041e8:	3307      	adds	r3, #7
 80041ea:	f023 0307 	bic.w	r3, r3, #7
 80041ee:	3308      	adds	r3, #8
 80041f0:	9303      	str	r3, [sp, #12]
 80041f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041f4:	4433      	add	r3, r6
 80041f6:	9309      	str	r3, [sp, #36]	; 0x24
 80041f8:	e767      	b.n	80040ca <_svfiprintf_r+0x4e>
 80041fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80041fe:	460c      	mov	r4, r1
 8004200:	2001      	movs	r0, #1
 8004202:	e7a5      	b.n	8004150 <_svfiprintf_r+0xd4>
 8004204:	2300      	movs	r3, #0
 8004206:	3401      	adds	r4, #1
 8004208:	9305      	str	r3, [sp, #20]
 800420a:	4619      	mov	r1, r3
 800420c:	f04f 0c0a 	mov.w	ip, #10
 8004210:	4620      	mov	r0, r4
 8004212:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004216:	3a30      	subs	r2, #48	; 0x30
 8004218:	2a09      	cmp	r2, #9
 800421a:	d903      	bls.n	8004224 <_svfiprintf_r+0x1a8>
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0c5      	beq.n	80041ac <_svfiprintf_r+0x130>
 8004220:	9105      	str	r1, [sp, #20]
 8004222:	e7c3      	b.n	80041ac <_svfiprintf_r+0x130>
 8004224:	fb0c 2101 	mla	r1, ip, r1, r2
 8004228:	4604      	mov	r4, r0
 800422a:	2301      	movs	r3, #1
 800422c:	e7f0      	b.n	8004210 <_svfiprintf_r+0x194>
 800422e:	ab03      	add	r3, sp, #12
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	462a      	mov	r2, r5
 8004234:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <_svfiprintf_r+0x1f8>)
 8004236:	a904      	add	r1, sp, #16
 8004238:	4638      	mov	r0, r7
 800423a:	f3af 8000 	nop.w
 800423e:	1c42      	adds	r2, r0, #1
 8004240:	4606      	mov	r6, r0
 8004242:	d1d6      	bne.n	80041f2 <_svfiprintf_r+0x176>
 8004244:	89ab      	ldrh	r3, [r5, #12]
 8004246:	065b      	lsls	r3, r3, #25
 8004248:	f53f af2c 	bmi.w	80040a4 <_svfiprintf_r+0x28>
 800424c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800424e:	b01d      	add	sp, #116	; 0x74
 8004250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004254:	ab03      	add	r3, sp, #12
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	462a      	mov	r2, r5
 800425a:	4b06      	ldr	r3, [pc, #24]	; (8004274 <_svfiprintf_r+0x1f8>)
 800425c:	a904      	add	r1, sp, #16
 800425e:	4638      	mov	r0, r7
 8004260:	f000 f87a 	bl	8004358 <_printf_i>
 8004264:	e7eb      	b.n	800423e <_svfiprintf_r+0x1c2>
 8004266:	bf00      	nop
 8004268:	08004c60 	.word	0x08004c60
 800426c:	08004c6a 	.word	0x08004c6a
 8004270:	00000000 	.word	0x00000000
 8004274:	08003fc5 	.word	0x08003fc5
 8004278:	08004c66 	.word	0x08004c66

0800427c <_printf_common>:
 800427c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004280:	4616      	mov	r6, r2
 8004282:	4699      	mov	r9, r3
 8004284:	688a      	ldr	r2, [r1, #8]
 8004286:	690b      	ldr	r3, [r1, #16]
 8004288:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800428c:	4293      	cmp	r3, r2
 800428e:	bfb8      	it	lt
 8004290:	4613      	movlt	r3, r2
 8004292:	6033      	str	r3, [r6, #0]
 8004294:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004298:	4607      	mov	r7, r0
 800429a:	460c      	mov	r4, r1
 800429c:	b10a      	cbz	r2, 80042a2 <_printf_common+0x26>
 800429e:	3301      	adds	r3, #1
 80042a0:	6033      	str	r3, [r6, #0]
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	0699      	lsls	r1, r3, #26
 80042a6:	bf42      	ittt	mi
 80042a8:	6833      	ldrmi	r3, [r6, #0]
 80042aa:	3302      	addmi	r3, #2
 80042ac:	6033      	strmi	r3, [r6, #0]
 80042ae:	6825      	ldr	r5, [r4, #0]
 80042b0:	f015 0506 	ands.w	r5, r5, #6
 80042b4:	d106      	bne.n	80042c4 <_printf_common+0x48>
 80042b6:	f104 0a19 	add.w	sl, r4, #25
 80042ba:	68e3      	ldr	r3, [r4, #12]
 80042bc:	6832      	ldr	r2, [r6, #0]
 80042be:	1a9b      	subs	r3, r3, r2
 80042c0:	42ab      	cmp	r3, r5
 80042c2:	dc26      	bgt.n	8004312 <_printf_common+0x96>
 80042c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042c8:	1e13      	subs	r3, r2, #0
 80042ca:	6822      	ldr	r2, [r4, #0]
 80042cc:	bf18      	it	ne
 80042ce:	2301      	movne	r3, #1
 80042d0:	0692      	lsls	r2, r2, #26
 80042d2:	d42b      	bmi.n	800432c <_printf_common+0xb0>
 80042d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042d8:	4649      	mov	r1, r9
 80042da:	4638      	mov	r0, r7
 80042dc:	47c0      	blx	r8
 80042de:	3001      	adds	r0, #1
 80042e0:	d01e      	beq.n	8004320 <_printf_common+0xa4>
 80042e2:	6823      	ldr	r3, [r4, #0]
 80042e4:	68e5      	ldr	r5, [r4, #12]
 80042e6:	6832      	ldr	r2, [r6, #0]
 80042e8:	f003 0306 	and.w	r3, r3, #6
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	bf08      	it	eq
 80042f0:	1aad      	subeq	r5, r5, r2
 80042f2:	68a3      	ldr	r3, [r4, #8]
 80042f4:	6922      	ldr	r2, [r4, #16]
 80042f6:	bf0c      	ite	eq
 80042f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042fc:	2500      	movne	r5, #0
 80042fe:	4293      	cmp	r3, r2
 8004300:	bfc4      	itt	gt
 8004302:	1a9b      	subgt	r3, r3, r2
 8004304:	18ed      	addgt	r5, r5, r3
 8004306:	2600      	movs	r6, #0
 8004308:	341a      	adds	r4, #26
 800430a:	42b5      	cmp	r5, r6
 800430c:	d11a      	bne.n	8004344 <_printf_common+0xc8>
 800430e:	2000      	movs	r0, #0
 8004310:	e008      	b.n	8004324 <_printf_common+0xa8>
 8004312:	2301      	movs	r3, #1
 8004314:	4652      	mov	r2, sl
 8004316:	4649      	mov	r1, r9
 8004318:	4638      	mov	r0, r7
 800431a:	47c0      	blx	r8
 800431c:	3001      	adds	r0, #1
 800431e:	d103      	bne.n	8004328 <_printf_common+0xac>
 8004320:	f04f 30ff 	mov.w	r0, #4294967295
 8004324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004328:	3501      	adds	r5, #1
 800432a:	e7c6      	b.n	80042ba <_printf_common+0x3e>
 800432c:	18e1      	adds	r1, r4, r3
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	2030      	movs	r0, #48	; 0x30
 8004332:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004336:	4422      	add	r2, r4
 8004338:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800433c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004340:	3302      	adds	r3, #2
 8004342:	e7c7      	b.n	80042d4 <_printf_common+0x58>
 8004344:	2301      	movs	r3, #1
 8004346:	4622      	mov	r2, r4
 8004348:	4649      	mov	r1, r9
 800434a:	4638      	mov	r0, r7
 800434c:	47c0      	blx	r8
 800434e:	3001      	adds	r0, #1
 8004350:	d0e6      	beq.n	8004320 <_printf_common+0xa4>
 8004352:	3601      	adds	r6, #1
 8004354:	e7d9      	b.n	800430a <_printf_common+0x8e>
	...

08004358 <_printf_i>:
 8004358:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800435c:	460c      	mov	r4, r1
 800435e:	4691      	mov	r9, r2
 8004360:	7e27      	ldrb	r7, [r4, #24]
 8004362:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004364:	2f78      	cmp	r7, #120	; 0x78
 8004366:	4680      	mov	r8, r0
 8004368:	469a      	mov	sl, r3
 800436a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800436e:	d807      	bhi.n	8004380 <_printf_i+0x28>
 8004370:	2f62      	cmp	r7, #98	; 0x62
 8004372:	d80a      	bhi.n	800438a <_printf_i+0x32>
 8004374:	2f00      	cmp	r7, #0
 8004376:	f000 80d8 	beq.w	800452a <_printf_i+0x1d2>
 800437a:	2f58      	cmp	r7, #88	; 0x58
 800437c:	f000 80a3 	beq.w	80044c6 <_printf_i+0x16e>
 8004380:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004384:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004388:	e03a      	b.n	8004400 <_printf_i+0xa8>
 800438a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800438e:	2b15      	cmp	r3, #21
 8004390:	d8f6      	bhi.n	8004380 <_printf_i+0x28>
 8004392:	a001      	add	r0, pc, #4	; (adr r0, 8004398 <_printf_i+0x40>)
 8004394:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004398:	080043f1 	.word	0x080043f1
 800439c:	08004405 	.word	0x08004405
 80043a0:	08004381 	.word	0x08004381
 80043a4:	08004381 	.word	0x08004381
 80043a8:	08004381 	.word	0x08004381
 80043ac:	08004381 	.word	0x08004381
 80043b0:	08004405 	.word	0x08004405
 80043b4:	08004381 	.word	0x08004381
 80043b8:	08004381 	.word	0x08004381
 80043bc:	08004381 	.word	0x08004381
 80043c0:	08004381 	.word	0x08004381
 80043c4:	08004511 	.word	0x08004511
 80043c8:	08004435 	.word	0x08004435
 80043cc:	080044f3 	.word	0x080044f3
 80043d0:	08004381 	.word	0x08004381
 80043d4:	08004381 	.word	0x08004381
 80043d8:	08004533 	.word	0x08004533
 80043dc:	08004381 	.word	0x08004381
 80043e0:	08004435 	.word	0x08004435
 80043e4:	08004381 	.word	0x08004381
 80043e8:	08004381 	.word	0x08004381
 80043ec:	080044fb 	.word	0x080044fb
 80043f0:	680b      	ldr	r3, [r1, #0]
 80043f2:	1d1a      	adds	r2, r3, #4
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	600a      	str	r2, [r1, #0]
 80043f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80043fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004400:	2301      	movs	r3, #1
 8004402:	e0a3      	b.n	800454c <_printf_i+0x1f4>
 8004404:	6825      	ldr	r5, [r4, #0]
 8004406:	6808      	ldr	r0, [r1, #0]
 8004408:	062e      	lsls	r6, r5, #24
 800440a:	f100 0304 	add.w	r3, r0, #4
 800440e:	d50a      	bpl.n	8004426 <_printf_i+0xce>
 8004410:	6805      	ldr	r5, [r0, #0]
 8004412:	600b      	str	r3, [r1, #0]
 8004414:	2d00      	cmp	r5, #0
 8004416:	da03      	bge.n	8004420 <_printf_i+0xc8>
 8004418:	232d      	movs	r3, #45	; 0x2d
 800441a:	426d      	negs	r5, r5
 800441c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004420:	485e      	ldr	r0, [pc, #376]	; (800459c <_printf_i+0x244>)
 8004422:	230a      	movs	r3, #10
 8004424:	e019      	b.n	800445a <_printf_i+0x102>
 8004426:	f015 0f40 	tst.w	r5, #64	; 0x40
 800442a:	6805      	ldr	r5, [r0, #0]
 800442c:	600b      	str	r3, [r1, #0]
 800442e:	bf18      	it	ne
 8004430:	b22d      	sxthne	r5, r5
 8004432:	e7ef      	b.n	8004414 <_printf_i+0xbc>
 8004434:	680b      	ldr	r3, [r1, #0]
 8004436:	6825      	ldr	r5, [r4, #0]
 8004438:	1d18      	adds	r0, r3, #4
 800443a:	6008      	str	r0, [r1, #0]
 800443c:	0628      	lsls	r0, r5, #24
 800443e:	d501      	bpl.n	8004444 <_printf_i+0xec>
 8004440:	681d      	ldr	r5, [r3, #0]
 8004442:	e002      	b.n	800444a <_printf_i+0xf2>
 8004444:	0669      	lsls	r1, r5, #25
 8004446:	d5fb      	bpl.n	8004440 <_printf_i+0xe8>
 8004448:	881d      	ldrh	r5, [r3, #0]
 800444a:	4854      	ldr	r0, [pc, #336]	; (800459c <_printf_i+0x244>)
 800444c:	2f6f      	cmp	r7, #111	; 0x6f
 800444e:	bf0c      	ite	eq
 8004450:	2308      	moveq	r3, #8
 8004452:	230a      	movne	r3, #10
 8004454:	2100      	movs	r1, #0
 8004456:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800445a:	6866      	ldr	r6, [r4, #4]
 800445c:	60a6      	str	r6, [r4, #8]
 800445e:	2e00      	cmp	r6, #0
 8004460:	bfa2      	ittt	ge
 8004462:	6821      	ldrge	r1, [r4, #0]
 8004464:	f021 0104 	bicge.w	r1, r1, #4
 8004468:	6021      	strge	r1, [r4, #0]
 800446a:	b90d      	cbnz	r5, 8004470 <_printf_i+0x118>
 800446c:	2e00      	cmp	r6, #0
 800446e:	d04d      	beq.n	800450c <_printf_i+0x1b4>
 8004470:	4616      	mov	r6, r2
 8004472:	fbb5 f1f3 	udiv	r1, r5, r3
 8004476:	fb03 5711 	mls	r7, r3, r1, r5
 800447a:	5dc7      	ldrb	r7, [r0, r7]
 800447c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004480:	462f      	mov	r7, r5
 8004482:	42bb      	cmp	r3, r7
 8004484:	460d      	mov	r5, r1
 8004486:	d9f4      	bls.n	8004472 <_printf_i+0x11a>
 8004488:	2b08      	cmp	r3, #8
 800448a:	d10b      	bne.n	80044a4 <_printf_i+0x14c>
 800448c:	6823      	ldr	r3, [r4, #0]
 800448e:	07df      	lsls	r7, r3, #31
 8004490:	d508      	bpl.n	80044a4 <_printf_i+0x14c>
 8004492:	6923      	ldr	r3, [r4, #16]
 8004494:	6861      	ldr	r1, [r4, #4]
 8004496:	4299      	cmp	r1, r3
 8004498:	bfde      	ittt	le
 800449a:	2330      	movle	r3, #48	; 0x30
 800449c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80044a4:	1b92      	subs	r2, r2, r6
 80044a6:	6122      	str	r2, [r4, #16]
 80044a8:	f8cd a000 	str.w	sl, [sp]
 80044ac:	464b      	mov	r3, r9
 80044ae:	aa03      	add	r2, sp, #12
 80044b0:	4621      	mov	r1, r4
 80044b2:	4640      	mov	r0, r8
 80044b4:	f7ff fee2 	bl	800427c <_printf_common>
 80044b8:	3001      	adds	r0, #1
 80044ba:	d14c      	bne.n	8004556 <_printf_i+0x1fe>
 80044bc:	f04f 30ff 	mov.w	r0, #4294967295
 80044c0:	b004      	add	sp, #16
 80044c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044c6:	4835      	ldr	r0, [pc, #212]	; (800459c <_printf_i+0x244>)
 80044c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80044cc:	6823      	ldr	r3, [r4, #0]
 80044ce:	680e      	ldr	r6, [r1, #0]
 80044d0:	061f      	lsls	r7, r3, #24
 80044d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80044d6:	600e      	str	r6, [r1, #0]
 80044d8:	d514      	bpl.n	8004504 <_printf_i+0x1ac>
 80044da:	07d9      	lsls	r1, r3, #31
 80044dc:	bf44      	itt	mi
 80044de:	f043 0320 	orrmi.w	r3, r3, #32
 80044e2:	6023      	strmi	r3, [r4, #0]
 80044e4:	b91d      	cbnz	r5, 80044ee <_printf_i+0x196>
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	f023 0320 	bic.w	r3, r3, #32
 80044ec:	6023      	str	r3, [r4, #0]
 80044ee:	2310      	movs	r3, #16
 80044f0:	e7b0      	b.n	8004454 <_printf_i+0xfc>
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	f043 0320 	orr.w	r3, r3, #32
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	2378      	movs	r3, #120	; 0x78
 80044fc:	4828      	ldr	r0, [pc, #160]	; (80045a0 <_printf_i+0x248>)
 80044fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004502:	e7e3      	b.n	80044cc <_printf_i+0x174>
 8004504:	065e      	lsls	r6, r3, #25
 8004506:	bf48      	it	mi
 8004508:	b2ad      	uxthmi	r5, r5
 800450a:	e7e6      	b.n	80044da <_printf_i+0x182>
 800450c:	4616      	mov	r6, r2
 800450e:	e7bb      	b.n	8004488 <_printf_i+0x130>
 8004510:	680b      	ldr	r3, [r1, #0]
 8004512:	6826      	ldr	r6, [r4, #0]
 8004514:	6960      	ldr	r0, [r4, #20]
 8004516:	1d1d      	adds	r5, r3, #4
 8004518:	600d      	str	r5, [r1, #0]
 800451a:	0635      	lsls	r5, r6, #24
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	d501      	bpl.n	8004524 <_printf_i+0x1cc>
 8004520:	6018      	str	r0, [r3, #0]
 8004522:	e002      	b.n	800452a <_printf_i+0x1d2>
 8004524:	0671      	lsls	r1, r6, #25
 8004526:	d5fb      	bpl.n	8004520 <_printf_i+0x1c8>
 8004528:	8018      	strh	r0, [r3, #0]
 800452a:	2300      	movs	r3, #0
 800452c:	6123      	str	r3, [r4, #16]
 800452e:	4616      	mov	r6, r2
 8004530:	e7ba      	b.n	80044a8 <_printf_i+0x150>
 8004532:	680b      	ldr	r3, [r1, #0]
 8004534:	1d1a      	adds	r2, r3, #4
 8004536:	600a      	str	r2, [r1, #0]
 8004538:	681e      	ldr	r6, [r3, #0]
 800453a:	6862      	ldr	r2, [r4, #4]
 800453c:	2100      	movs	r1, #0
 800453e:	4630      	mov	r0, r6
 8004540:	f7fb fe66 	bl	8000210 <memchr>
 8004544:	b108      	cbz	r0, 800454a <_printf_i+0x1f2>
 8004546:	1b80      	subs	r0, r0, r6
 8004548:	6060      	str	r0, [r4, #4]
 800454a:	6863      	ldr	r3, [r4, #4]
 800454c:	6123      	str	r3, [r4, #16]
 800454e:	2300      	movs	r3, #0
 8004550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004554:	e7a8      	b.n	80044a8 <_printf_i+0x150>
 8004556:	6923      	ldr	r3, [r4, #16]
 8004558:	4632      	mov	r2, r6
 800455a:	4649      	mov	r1, r9
 800455c:	4640      	mov	r0, r8
 800455e:	47d0      	blx	sl
 8004560:	3001      	adds	r0, #1
 8004562:	d0ab      	beq.n	80044bc <_printf_i+0x164>
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	079b      	lsls	r3, r3, #30
 8004568:	d413      	bmi.n	8004592 <_printf_i+0x23a>
 800456a:	68e0      	ldr	r0, [r4, #12]
 800456c:	9b03      	ldr	r3, [sp, #12]
 800456e:	4298      	cmp	r0, r3
 8004570:	bfb8      	it	lt
 8004572:	4618      	movlt	r0, r3
 8004574:	e7a4      	b.n	80044c0 <_printf_i+0x168>
 8004576:	2301      	movs	r3, #1
 8004578:	4632      	mov	r2, r6
 800457a:	4649      	mov	r1, r9
 800457c:	4640      	mov	r0, r8
 800457e:	47d0      	blx	sl
 8004580:	3001      	adds	r0, #1
 8004582:	d09b      	beq.n	80044bc <_printf_i+0x164>
 8004584:	3501      	adds	r5, #1
 8004586:	68e3      	ldr	r3, [r4, #12]
 8004588:	9903      	ldr	r1, [sp, #12]
 800458a:	1a5b      	subs	r3, r3, r1
 800458c:	42ab      	cmp	r3, r5
 800458e:	dcf2      	bgt.n	8004576 <_printf_i+0x21e>
 8004590:	e7eb      	b.n	800456a <_printf_i+0x212>
 8004592:	2500      	movs	r5, #0
 8004594:	f104 0619 	add.w	r6, r4, #25
 8004598:	e7f5      	b.n	8004586 <_printf_i+0x22e>
 800459a:	bf00      	nop
 800459c:	08004c71 	.word	0x08004c71
 80045a0:	08004c82 	.word	0x08004c82

080045a4 <memcpy>:
 80045a4:	440a      	add	r2, r1
 80045a6:	4291      	cmp	r1, r2
 80045a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80045ac:	d100      	bne.n	80045b0 <memcpy+0xc>
 80045ae:	4770      	bx	lr
 80045b0:	b510      	push	{r4, lr}
 80045b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045ba:	4291      	cmp	r1, r2
 80045bc:	d1f9      	bne.n	80045b2 <memcpy+0xe>
 80045be:	bd10      	pop	{r4, pc}

080045c0 <memmove>:
 80045c0:	4288      	cmp	r0, r1
 80045c2:	b510      	push	{r4, lr}
 80045c4:	eb01 0402 	add.w	r4, r1, r2
 80045c8:	d902      	bls.n	80045d0 <memmove+0x10>
 80045ca:	4284      	cmp	r4, r0
 80045cc:	4623      	mov	r3, r4
 80045ce:	d807      	bhi.n	80045e0 <memmove+0x20>
 80045d0:	1e43      	subs	r3, r0, #1
 80045d2:	42a1      	cmp	r1, r4
 80045d4:	d008      	beq.n	80045e8 <memmove+0x28>
 80045d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045de:	e7f8      	b.n	80045d2 <memmove+0x12>
 80045e0:	4402      	add	r2, r0
 80045e2:	4601      	mov	r1, r0
 80045e4:	428a      	cmp	r2, r1
 80045e6:	d100      	bne.n	80045ea <memmove+0x2a>
 80045e8:	bd10      	pop	{r4, pc}
 80045ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045f2:	e7f7      	b.n	80045e4 <memmove+0x24>

080045f4 <_free_r>:
 80045f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045f6:	2900      	cmp	r1, #0
 80045f8:	d048      	beq.n	800468c <_free_r+0x98>
 80045fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045fe:	9001      	str	r0, [sp, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	f1a1 0404 	sub.w	r4, r1, #4
 8004606:	bfb8      	it	lt
 8004608:	18e4      	addlt	r4, r4, r3
 800460a:	f000 f8d3 	bl	80047b4 <__malloc_lock>
 800460e:	4a20      	ldr	r2, [pc, #128]	; (8004690 <_free_r+0x9c>)
 8004610:	9801      	ldr	r0, [sp, #4]
 8004612:	6813      	ldr	r3, [r2, #0]
 8004614:	4615      	mov	r5, r2
 8004616:	b933      	cbnz	r3, 8004626 <_free_r+0x32>
 8004618:	6063      	str	r3, [r4, #4]
 800461a:	6014      	str	r4, [r2, #0]
 800461c:	b003      	add	sp, #12
 800461e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004622:	f000 b8cd 	b.w	80047c0 <__malloc_unlock>
 8004626:	42a3      	cmp	r3, r4
 8004628:	d90b      	bls.n	8004642 <_free_r+0x4e>
 800462a:	6821      	ldr	r1, [r4, #0]
 800462c:	1862      	adds	r2, r4, r1
 800462e:	4293      	cmp	r3, r2
 8004630:	bf04      	itt	eq
 8004632:	681a      	ldreq	r2, [r3, #0]
 8004634:	685b      	ldreq	r3, [r3, #4]
 8004636:	6063      	str	r3, [r4, #4]
 8004638:	bf04      	itt	eq
 800463a:	1852      	addeq	r2, r2, r1
 800463c:	6022      	streq	r2, [r4, #0]
 800463e:	602c      	str	r4, [r5, #0]
 8004640:	e7ec      	b.n	800461c <_free_r+0x28>
 8004642:	461a      	mov	r2, r3
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	b10b      	cbz	r3, 800464c <_free_r+0x58>
 8004648:	42a3      	cmp	r3, r4
 800464a:	d9fa      	bls.n	8004642 <_free_r+0x4e>
 800464c:	6811      	ldr	r1, [r2, #0]
 800464e:	1855      	adds	r5, r2, r1
 8004650:	42a5      	cmp	r5, r4
 8004652:	d10b      	bne.n	800466c <_free_r+0x78>
 8004654:	6824      	ldr	r4, [r4, #0]
 8004656:	4421      	add	r1, r4
 8004658:	1854      	adds	r4, r2, r1
 800465a:	42a3      	cmp	r3, r4
 800465c:	6011      	str	r1, [r2, #0]
 800465e:	d1dd      	bne.n	800461c <_free_r+0x28>
 8004660:	681c      	ldr	r4, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	6053      	str	r3, [r2, #4]
 8004666:	4421      	add	r1, r4
 8004668:	6011      	str	r1, [r2, #0]
 800466a:	e7d7      	b.n	800461c <_free_r+0x28>
 800466c:	d902      	bls.n	8004674 <_free_r+0x80>
 800466e:	230c      	movs	r3, #12
 8004670:	6003      	str	r3, [r0, #0]
 8004672:	e7d3      	b.n	800461c <_free_r+0x28>
 8004674:	6825      	ldr	r5, [r4, #0]
 8004676:	1961      	adds	r1, r4, r5
 8004678:	428b      	cmp	r3, r1
 800467a:	bf04      	itt	eq
 800467c:	6819      	ldreq	r1, [r3, #0]
 800467e:	685b      	ldreq	r3, [r3, #4]
 8004680:	6063      	str	r3, [r4, #4]
 8004682:	bf04      	itt	eq
 8004684:	1949      	addeq	r1, r1, r5
 8004686:	6021      	streq	r1, [r4, #0]
 8004688:	6054      	str	r4, [r2, #4]
 800468a:	e7c7      	b.n	800461c <_free_r+0x28>
 800468c:	b003      	add	sp, #12
 800468e:	bd30      	pop	{r4, r5, pc}
 8004690:	200004cc 	.word	0x200004cc

08004694 <_malloc_r>:
 8004694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004696:	1ccd      	adds	r5, r1, #3
 8004698:	f025 0503 	bic.w	r5, r5, #3
 800469c:	3508      	adds	r5, #8
 800469e:	2d0c      	cmp	r5, #12
 80046a0:	bf38      	it	cc
 80046a2:	250c      	movcc	r5, #12
 80046a4:	2d00      	cmp	r5, #0
 80046a6:	4606      	mov	r6, r0
 80046a8:	db01      	blt.n	80046ae <_malloc_r+0x1a>
 80046aa:	42a9      	cmp	r1, r5
 80046ac:	d903      	bls.n	80046b6 <_malloc_r+0x22>
 80046ae:	230c      	movs	r3, #12
 80046b0:	6033      	str	r3, [r6, #0]
 80046b2:	2000      	movs	r0, #0
 80046b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046b6:	f000 f87d 	bl	80047b4 <__malloc_lock>
 80046ba:	4921      	ldr	r1, [pc, #132]	; (8004740 <_malloc_r+0xac>)
 80046bc:	680a      	ldr	r2, [r1, #0]
 80046be:	4614      	mov	r4, r2
 80046c0:	b99c      	cbnz	r4, 80046ea <_malloc_r+0x56>
 80046c2:	4f20      	ldr	r7, [pc, #128]	; (8004744 <_malloc_r+0xb0>)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	b923      	cbnz	r3, 80046d2 <_malloc_r+0x3e>
 80046c8:	4621      	mov	r1, r4
 80046ca:	4630      	mov	r0, r6
 80046cc:	f000 f862 	bl	8004794 <_sbrk_r>
 80046d0:	6038      	str	r0, [r7, #0]
 80046d2:	4629      	mov	r1, r5
 80046d4:	4630      	mov	r0, r6
 80046d6:	f000 f85d 	bl	8004794 <_sbrk_r>
 80046da:	1c43      	adds	r3, r0, #1
 80046dc:	d123      	bne.n	8004726 <_malloc_r+0x92>
 80046de:	230c      	movs	r3, #12
 80046e0:	6033      	str	r3, [r6, #0]
 80046e2:	4630      	mov	r0, r6
 80046e4:	f000 f86c 	bl	80047c0 <__malloc_unlock>
 80046e8:	e7e3      	b.n	80046b2 <_malloc_r+0x1e>
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	1b5b      	subs	r3, r3, r5
 80046ee:	d417      	bmi.n	8004720 <_malloc_r+0x8c>
 80046f0:	2b0b      	cmp	r3, #11
 80046f2:	d903      	bls.n	80046fc <_malloc_r+0x68>
 80046f4:	6023      	str	r3, [r4, #0]
 80046f6:	441c      	add	r4, r3
 80046f8:	6025      	str	r5, [r4, #0]
 80046fa:	e004      	b.n	8004706 <_malloc_r+0x72>
 80046fc:	6863      	ldr	r3, [r4, #4]
 80046fe:	42a2      	cmp	r2, r4
 8004700:	bf0c      	ite	eq
 8004702:	600b      	streq	r3, [r1, #0]
 8004704:	6053      	strne	r3, [r2, #4]
 8004706:	4630      	mov	r0, r6
 8004708:	f000 f85a 	bl	80047c0 <__malloc_unlock>
 800470c:	f104 000b 	add.w	r0, r4, #11
 8004710:	1d23      	adds	r3, r4, #4
 8004712:	f020 0007 	bic.w	r0, r0, #7
 8004716:	1ac2      	subs	r2, r0, r3
 8004718:	d0cc      	beq.n	80046b4 <_malloc_r+0x20>
 800471a:	1a1b      	subs	r3, r3, r0
 800471c:	50a3      	str	r3, [r4, r2]
 800471e:	e7c9      	b.n	80046b4 <_malloc_r+0x20>
 8004720:	4622      	mov	r2, r4
 8004722:	6864      	ldr	r4, [r4, #4]
 8004724:	e7cc      	b.n	80046c0 <_malloc_r+0x2c>
 8004726:	1cc4      	adds	r4, r0, #3
 8004728:	f024 0403 	bic.w	r4, r4, #3
 800472c:	42a0      	cmp	r0, r4
 800472e:	d0e3      	beq.n	80046f8 <_malloc_r+0x64>
 8004730:	1a21      	subs	r1, r4, r0
 8004732:	4630      	mov	r0, r6
 8004734:	f000 f82e 	bl	8004794 <_sbrk_r>
 8004738:	3001      	adds	r0, #1
 800473a:	d1dd      	bne.n	80046f8 <_malloc_r+0x64>
 800473c:	e7cf      	b.n	80046de <_malloc_r+0x4a>
 800473e:	bf00      	nop
 8004740:	200004cc 	.word	0x200004cc
 8004744:	200004d0 	.word	0x200004d0

08004748 <_realloc_r>:
 8004748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474a:	4607      	mov	r7, r0
 800474c:	4614      	mov	r4, r2
 800474e:	460e      	mov	r6, r1
 8004750:	b921      	cbnz	r1, 800475c <_realloc_r+0x14>
 8004752:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004756:	4611      	mov	r1, r2
 8004758:	f7ff bf9c 	b.w	8004694 <_malloc_r>
 800475c:	b922      	cbnz	r2, 8004768 <_realloc_r+0x20>
 800475e:	f7ff ff49 	bl	80045f4 <_free_r>
 8004762:	4625      	mov	r5, r4
 8004764:	4628      	mov	r0, r5
 8004766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004768:	f000 f830 	bl	80047cc <_malloc_usable_size_r>
 800476c:	42a0      	cmp	r0, r4
 800476e:	d20f      	bcs.n	8004790 <_realloc_r+0x48>
 8004770:	4621      	mov	r1, r4
 8004772:	4638      	mov	r0, r7
 8004774:	f7ff ff8e 	bl	8004694 <_malloc_r>
 8004778:	4605      	mov	r5, r0
 800477a:	2800      	cmp	r0, #0
 800477c:	d0f2      	beq.n	8004764 <_realloc_r+0x1c>
 800477e:	4631      	mov	r1, r6
 8004780:	4622      	mov	r2, r4
 8004782:	f7ff ff0f 	bl	80045a4 <memcpy>
 8004786:	4631      	mov	r1, r6
 8004788:	4638      	mov	r0, r7
 800478a:	f7ff ff33 	bl	80045f4 <_free_r>
 800478e:	e7e9      	b.n	8004764 <_realloc_r+0x1c>
 8004790:	4635      	mov	r5, r6
 8004792:	e7e7      	b.n	8004764 <_realloc_r+0x1c>

08004794 <_sbrk_r>:
 8004794:	b538      	push	{r3, r4, r5, lr}
 8004796:	4d06      	ldr	r5, [pc, #24]	; (80047b0 <_sbrk_r+0x1c>)
 8004798:	2300      	movs	r3, #0
 800479a:	4604      	mov	r4, r0
 800479c:	4608      	mov	r0, r1
 800479e:	602b      	str	r3, [r5, #0]
 80047a0:	f7fc fa80 	bl	8000ca4 <_sbrk>
 80047a4:	1c43      	adds	r3, r0, #1
 80047a6:	d102      	bne.n	80047ae <_sbrk_r+0x1a>
 80047a8:	682b      	ldr	r3, [r5, #0]
 80047aa:	b103      	cbz	r3, 80047ae <_sbrk_r+0x1a>
 80047ac:	6023      	str	r3, [r4, #0]
 80047ae:	bd38      	pop	{r3, r4, r5, pc}
 80047b0:	2000104c 	.word	0x2000104c

080047b4 <__malloc_lock>:
 80047b4:	4801      	ldr	r0, [pc, #4]	; (80047bc <__malloc_lock+0x8>)
 80047b6:	f000 b811 	b.w	80047dc <__retarget_lock_acquire_recursive>
 80047ba:	bf00      	nop
 80047bc:	20001054 	.word	0x20001054

080047c0 <__malloc_unlock>:
 80047c0:	4801      	ldr	r0, [pc, #4]	; (80047c8 <__malloc_unlock+0x8>)
 80047c2:	f000 b80c 	b.w	80047de <__retarget_lock_release_recursive>
 80047c6:	bf00      	nop
 80047c8:	20001054 	.word	0x20001054

080047cc <_malloc_usable_size_r>:
 80047cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047d0:	1f18      	subs	r0, r3, #4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	bfbc      	itt	lt
 80047d6:	580b      	ldrlt	r3, [r1, r0]
 80047d8:	18c0      	addlt	r0, r0, r3
 80047da:	4770      	bx	lr

080047dc <__retarget_lock_acquire_recursive>:
 80047dc:	4770      	bx	lr

080047de <__retarget_lock_release_recursive>:
 80047de:	4770      	bx	lr

080047e0 <_init>:
 80047e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e2:	bf00      	nop
 80047e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047e6:	bc08      	pop	{r3}
 80047e8:	469e      	mov	lr, r3
 80047ea:	4770      	bx	lr

080047ec <_fini>:
 80047ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ee:	bf00      	nop
 80047f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047f2:	bc08      	pop	{r3}
 80047f4:	469e      	mov	lr, r3
 80047f6:	4770      	bx	lr
