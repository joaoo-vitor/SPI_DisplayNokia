
DISPLAY NOKIA SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a70  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002c34  08002c34  00012c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c68  08002c68  00020234  2**0
                  CONTENTS
  4 .ARM          00000008  08002c68  08002c68  00012c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c70  08002c70  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c70  08002c70  00012c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c74  08002c74  00012c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08002c78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b8  20000234  08002eac  00020234  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aec  08002eac  00020aec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e640  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002184  00000000  00000000  0002e8a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  00030a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  000314b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021b70  00000000  00000000  00031e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de7c  00000000  00000000  000539d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca777  00000000  00000000  0006184c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012bfc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a2c  00000000  00000000  0012c018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000234 	.word	0x20000234
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002c1c 	.word	0x08002c1c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000238 	.word	0x20000238
 8000200:	08002c1c 	.word	0x08002c1c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <LCD5110_init>:
void LCD5110_RST(unsigned char temp);
void LCD5110_DC(unsigned char temp);


void LCD5110_init(LCD_HandleTypeDef *hlcd5110)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	lcd=hlcd5110;
 8000504:	4a1e      	ldr	r2, [pc, #120]	; (8000580 <LCD5110_init+0x84>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(lcd->DC_Port, lcd->DC_Pin,1);
 800050a:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <LCD5110_init+0x84>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	68d8      	ldr	r0, [r3, #12]
 8000510:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <LCD5110_init+0x84>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	8a1b      	ldrh	r3, [r3, #16]
 8000516:	2201      	movs	r2, #1
 8000518:	4619      	mov	r1, r3
 800051a:	f001 f80b 	bl	8001534 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->CS_Port, lcd->CS_Pin, 1);
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <LCD5110_init+0x84>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	6858      	ldr	r0, [r3, #4]
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <LCD5110_init+0x84>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	891b      	ldrh	r3, [r3, #8]
 800052a:	2201      	movs	r2, #1
 800052c:	4619      	mov	r1, r3
 800052e:	f001 f801 	bl	8001534 <HAL_GPIO_WritePin>

	LCD5110_RST(0);//LCD_RST = 0;
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f9a4 	bl	8000880 <LCD5110_RST>
	LCD5110_LCD_delay_ms(10);
 8000538:	200a      	movs	r0, #10
 800053a:	f000 f98a 	bl	8000852 <LCD5110_LCD_delay_ms>
	LCD5110_RST(1);//LCD_RST = 1;
 800053e:	2001      	movs	r0, #1
 8000540:	f000 f99e 	bl	8000880 <LCD5110_RST>

	LCD5110_LCD_write_byte(0x21,0);
 8000544:	2100      	movs	r1, #0
 8000546:	2021      	movs	r0, #33	; 0x21
 8000548:	f000 f81c 	bl	8000584 <LCD5110_LCD_write_byte>
	LCD5110_LCD_write_byte(0xC0,0); //B6, c0
 800054c:	2100      	movs	r1, #0
 800054e:	20c0      	movs	r0, #192	; 0xc0
 8000550:	f000 f818 	bl	8000584 <LCD5110_LCD_write_byte>
	LCD5110_LCD_write_byte(0x06,0);//coeficiente temperatura
 8000554:	2100      	movs	r1, #0
 8000556:	2006      	movs	r0, #6
 8000558:	f000 f814 	bl	8000584 <LCD5110_LCD_write_byte>
	LCD5110_LCD_write_byte(0x13,0);
 800055c:	2100      	movs	r1, #0
 800055e:	2013      	movs	r0, #19
 8000560:	f000 f810 	bl	8000584 <LCD5110_LCD_write_byte>
	LCD5110_LCD_write_byte(0x20,0);
 8000564:	2100      	movs	r1, #0
 8000566:	2020      	movs	r0, #32
 8000568:	f000 f80c 	bl	8000584 <LCD5110_LCD_write_byte>
	LCD5110_clear();
 800056c:	f000 f931 	bl	80007d2 <LCD5110_clear>
	LCD5110_LCD_write_byte(0x0c,0);
 8000570:	2100      	movs	r1, #0
 8000572:	200c      	movs	r0, #12
 8000574:	f000 f806 	bl	8000584 <LCD5110_LCD_write_byte>
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000250 	.word	0x20000250

08000584 <LCD5110_LCD_write_byte>:

void LCD5110_LCD_write_byte(unsigned char dat,unsigned char mode)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	460a      	mov	r2, r1
 800058e:	71fb      	strb	r3, [r7, #7]
 8000590:	4613      	mov	r3, r2
 8000592:	71bb      	strb	r3, [r7, #6]
	//Ativa (desliga) CS
	HAL_GPIO_WritePin(lcd->CS_Port,lcd->CS_Pin, 0);
 8000594:	4b15      	ldr	r3, [pc, #84]	; (80005ec <LCD5110_LCD_write_byte+0x68>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	6858      	ldr	r0, [r3, #4]
 800059a:	4b14      	ldr	r3, [pc, #80]	; (80005ec <LCD5110_LCD_write_byte+0x68>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	891b      	ldrh	r3, [r3, #8]
 80005a0:	2200      	movs	r2, #0
 80005a2:	4619      	mov	r1, r3
 80005a4:	f000 ffc6 	bl	8001534 <HAL_GPIO_WritePin>

	//Seleção dados/comando
	HAL_GPIO_WritePin(lcd->DC_Port, lcd->DC_Pin, mode);
 80005a8:	4b10      	ldr	r3, [pc, #64]	; (80005ec <LCD5110_LCD_write_byte+0x68>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	68d8      	ldr	r0, [r3, #12]
 80005ae:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <LCD5110_LCD_write_byte+0x68>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	8a1b      	ldrh	r3, [r3, #16]
 80005b4:	79ba      	ldrb	r2, [r7, #6]
 80005b6:	4619      	mov	r1, r3
 80005b8:	f000 ffbc 	bl	8001534 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(lcd->hspi, &dat, 1,30000);
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <LCD5110_LCD_write_byte+0x68>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	6818      	ldr	r0, [r3, #0]
 80005c2:	1df9      	adds	r1, r7, #7
 80005c4:	f247 5330 	movw	r3, #30000	; 0x7530
 80005c8:	2201      	movs	r2, #1
 80005ca:	f001 fdc0 	bl	800214e <HAL_SPI_Transmit>

	//Fim da transf.
	HAL_GPIO_WritePin(lcd->CS_Port, lcd->CS_Pin, 1);
 80005ce:	4b07      	ldr	r3, [pc, #28]	; (80005ec <LCD5110_LCD_write_byte+0x68>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	6858      	ldr	r0, [r3, #4]
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <LCD5110_LCD_write_byte+0x68>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	891b      	ldrh	r3, [r3, #8]
 80005da:	2201      	movs	r2, #1
 80005dc:	4619      	mov	r1, r3
 80005de:	f000 ffa9 	bl	8001534 <HAL_GPIO_WritePin>

}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000250 	.word	0x20000250

080005f0 <LCD5110_LCD_write>:

void LCD5110_LCD_write(uint8_t *data, uint16_t tam, uint8_t mode) //manda UM BLOCO (de qqr tamanho) PARA O DISPLAY
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	807b      	strh	r3, [r7, #2]
 80005fc:	4613      	mov	r3, r2
 80005fe:	707b      	strb	r3, [r7, #1]
	//Ativa (desliga) CS
	HAL_GPIO_WritePin(lcd->CS_Port,lcd->CS_Pin, 0);
 8000600:	4b15      	ldr	r3, [pc, #84]	; (8000658 <LCD5110_LCD_write+0x68>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	6858      	ldr	r0, [r3, #4]
 8000606:	4b14      	ldr	r3, [pc, #80]	; (8000658 <LCD5110_LCD_write+0x68>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	891b      	ldrh	r3, [r3, #8]
 800060c:	2200      	movs	r2, #0
 800060e:	4619      	mov	r1, r3
 8000610:	f000 ff90 	bl	8001534 <HAL_GPIO_WritePin>

	//Seleção dados/comando
	HAL_GPIO_WritePin(lcd->DC_Port, lcd->DC_Pin, mode);
 8000614:	4b10      	ldr	r3, [pc, #64]	; (8000658 <LCD5110_LCD_write+0x68>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	68d8      	ldr	r0, [r3, #12]
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <LCD5110_LCD_write+0x68>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	8a1b      	ldrh	r3, [r3, #16]
 8000620:	787a      	ldrb	r2, [r7, #1]
 8000622:	4619      	mov	r1, r3
 8000624:	f000 ff86 	bl	8001534 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(lcd->hspi, data, tam,30000);
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <LCD5110_LCD_write+0x68>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	6818      	ldr	r0, [r3, #0]
 800062e:	887a      	ldrh	r2, [r7, #2]
 8000630:	f247 5330 	movw	r3, #30000	; 0x7530
 8000634:	6879      	ldr	r1, [r7, #4]
 8000636:	f001 fd8a 	bl	800214e <HAL_SPI_Transmit>

	//Fim da transf.
	HAL_GPIO_WritePin(lcd->CS_Port, lcd->CS_Pin, 1);
 800063a:	4b07      	ldr	r3, [pc, #28]	; (8000658 <LCD5110_LCD_write+0x68>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	6858      	ldr	r0, [r3, #4]
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <LCD5110_LCD_write+0x68>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	891b      	ldrh	r3, [r3, #8]
 8000646:	2201      	movs	r2, #1
 8000648:	4619      	mov	r1, r3
 800064a:	f000 ff73 	bl	8001534 <HAL_GPIO_WritePin>

}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000250 	.word	0x20000250

0800065c <LCD5110_drawchar>:
void LCD5110_drawchar(char c, uint8_t *dat) //desenha o char e hospeda em dat
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	6039      	str	r1, [r7, #0]
 8000666:	71fb      	strb	r3, [r7, #7]
	uint8_t i; //indice do desenho

	c = c - ' ';
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	3b20      	subs	r3, #32
 800066c:	71fb      	strb	r3, [r7, #7]

	for(i=0;i<6;i++)
 800066e:	2300      	movs	r3, #0
 8000670:	73fb      	strb	r3, [r7, #15]
 8000672:	e011      	b.n	8000698 <LCD5110_drawchar+0x3c>
	{
		*dat = font6_8[c][i];
 8000674:	79fa      	ldrb	r2, [r7, #7]
 8000676:	7bf9      	ldrb	r1, [r7, #15]
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <LCD5110_drawchar+0x50>)
 800067a:	4613      	mov	r3, r2
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	4413      	add	r3, r2
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	4403      	add	r3, r0
 8000684:	440b      	add	r3, r1
 8000686:	781a      	ldrb	r2, [r3, #0]
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	701a      	strb	r2, [r3, #0]
		dat++;
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	3301      	adds	r3, #1
 8000690:	603b      	str	r3, [r7, #0]
	for(i=0;i<6;i++)
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	3301      	adds	r3, #1
 8000696:	73fb      	strb	r3, [r7, #15]
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	2b05      	cmp	r3, #5
 800069c:	d9ea      	bls.n	8000674 <LCD5110_drawchar+0x18>
		
	}
}
 800069e:	bf00      	nop
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	20000000 	.word	0x20000000

080006b0 <LCD5110_drawchar_reg>:
void LCD5110_drawchar_reg(char c, uint8_t *dat) //desenha o char e hospeda em dat
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	6039      	str	r1, [r7, #0]
 80006ba:	71fb      	strb	r3, [r7, #7]
	uint8_t i; //indice do desenho

	c = c - ' ';
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	3b20      	subs	r3, #32
 80006c0:	71fb      	strb	r3, [r7, #7]

	for(i=0;i<6;i++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	73fb      	strb	r3, [r7, #15]
 80006c6:	e013      	b.n	80006f0 <LCD5110_drawchar_reg+0x40>
	{
		*dat = ~font6_8[c][i];
 80006c8:	79fa      	ldrb	r2, [r7, #7]
 80006ca:	7bf9      	ldrb	r1, [r7, #15]
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <LCD5110_drawchar_reg+0x54>)
 80006ce:	4613      	mov	r3, r2
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	4413      	add	r3, r2
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	4403      	add	r3, r0
 80006d8:	440b      	add	r3, r1
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	43db      	mvns	r3, r3
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	701a      	strb	r2, [r3, #0]
		dat++;
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	3301      	adds	r3, #1
 80006e8:	603b      	str	r3, [r7, #0]
	for(i=0;i<6;i++)
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
 80006ec:	3301      	adds	r3, #1
 80006ee:	73fb      	strb	r3, [r7, #15]
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	2b05      	cmp	r3, #5
 80006f4:	d9e8      	bls.n	80006c8 <LCD5110_drawchar_reg+0x18>

	}
}
 80006f6:	bf00      	nop
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	20000000 	.word	0x20000000

08000708 <LCD5110_write_char>:
void LCD5110_write_char(unsigned char c)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	uint8_t caract[6]; //onde sera hospedado o desenho do caract.
	LCD5110_drawchar(c, caract);
 8000712:	f107 0208 	add.w	r2, r7, #8
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	4611      	mov	r1, r2
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff9e 	bl	800065c <LCD5110_drawchar>
	LCD5110_LCD_write(caract, 6, 1);
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	2201      	movs	r2, #1
 8000726:	2106      	movs	r1, #6
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ff61 	bl	80005f0 <LCD5110_LCD_write>
}
 800072e:	bf00      	nop
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <LCD5110_write_char_reg>:
void LCD5110_write_char_reg(unsigned char c)//TESTARRRR
{
 8000736:	b580      	push	{r7, lr}
 8000738:	b084      	sub	sp, #16
 800073a:	af00      	add	r7, sp, #0
 800073c:	4603      	mov	r3, r0
 800073e:	71fb      	strb	r3, [r7, #7]
	uint8_t caract[6]; //onde sera hospedado o desenho do caract.
	LCD5110_drawchar_reg(c, caract);
 8000740:	f107 0208 	add.w	r2, r7, #8
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	4611      	mov	r1, r2
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ffb1 	bl	80006b0 <LCD5110_drawchar_reg>
	LCD5110_LCD_write(caract, 6,1);
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	2201      	movs	r2, #1
 8000754:	2106      	movs	r1, #6
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ff4a 	bl	80005f0 <LCD5110_LCD_write>
}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <LCD5110_write_string>:

void LCD5110_write_string(char *s)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800076a:	af00      	add	r7, sp, #0
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	6018      	str	r0, [r3, #0]
	uint8_t strf[6*TAM_MAX_STRING];
	uint16_t tam=0;
 8000770:	2300      	movs	r3, #0
 8000772:	f8a7 3266 	strh.w	r3, [r7, #614]	; 0x266
	uint8_t *c;
	/*Ponteiro para onde ficará hospedada a data (desenho do
	  display (strf).
	*/

	c = strf;
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
	while(*s!='\0')
 800077e:	e016      	b.n	80007ae <LCD5110_write_string+0x4a>
	{
		LCD5110_drawchar(*s,c);
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ff66 	bl	800065c <LCD5110_drawchar>
		/*Desloca buffer nos dois lugares
		 */
		s++;  //proxima letra da string
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	1d3a      	adds	r2, r7, #4
 8000794:	6812      	ldr	r2, [r2, #0]
 8000796:	3201      	adds	r2, #1
 8000798:	601a      	str	r2, [r3, #0]
		c+=6; //proximo desenho de char no strf
 800079a:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800079e:	3306      	adds	r3, #6
 80007a0:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
		tam+=6;//cada letra soma 6 bytes
 80007a4:	f8b7 3266 	ldrh.w	r3, [r7, #614]	; 0x266
 80007a8:	3306      	adds	r3, #6
 80007aa:	f8a7 3266 	strh.w	r3, [r7, #614]	; 0x266
	while(*s!='\0')
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1e3      	bne.n	8000780 <LCD5110_write_string+0x1c>
	}
	LCD5110_LCD_write(strf, tam,1);
 80007b8:	f8b7 1266 	ldrh.w	r1, [r7, #614]	; 0x266
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	2201      	movs	r2, #1
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ff14 	bl	80005f0 <LCD5110_LCD_write>
}
 80007c8:	bf00      	nop
 80007ca:	f507 771a 	add.w	r7, r7, #616	; 0x268
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <LCD5110_clear>:


void LCD5110_clear()
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
	unsigned char i,j;
	for(i=0;i<6;i++)
 80007d8:	2300      	movs	r3, #0
 80007da:	71fb      	strb	r3, [r7, #7]
 80007dc:	e00f      	b.n	80007fe <LCD5110_clear+0x2c>
		for(j=0;j<84;j++)
 80007de:	2300      	movs	r3, #0
 80007e0:	71bb      	strb	r3, [r7, #6]
 80007e2:	e006      	b.n	80007f2 <LCD5110_clear+0x20>
			LCD5110_LCD_write_byte(0,1);	
 80007e4:	2101      	movs	r1, #1
 80007e6:	2000      	movs	r0, #0
 80007e8:	f7ff fecc 	bl	8000584 <LCD5110_LCD_write_byte>
		for(j=0;j<84;j++)
 80007ec:	79bb      	ldrb	r3, [r7, #6]
 80007ee:	3301      	adds	r3, #1
 80007f0:	71bb      	strb	r3, [r7, #6]
 80007f2:	79bb      	ldrb	r3, [r7, #6]
 80007f4:	2b53      	cmp	r3, #83	; 0x53
 80007f6:	d9f5      	bls.n	80007e4 <LCD5110_clear+0x12>
	for(i=0;i<6;i++)
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	3301      	adds	r3, #1
 80007fc:	71fb      	strb	r3, [r7, #7]
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	2b05      	cmp	r3, #5
 8000802:	d9ec      	bls.n	80007de <LCD5110_clear+0xc>
}
 8000804:	bf00      	nop
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <LCD5110_set_XY>:

void LCD5110_set_XY(unsigned char X,unsigned char Y)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b084      	sub	sp, #16
 8000812:	af00      	add	r7, sp, #0
 8000814:	4603      	mov	r3, r0
 8000816:	460a      	mov	r2, r1
 8000818:	71fb      	strb	r3, [r7, #7]
 800081a:	4613      	mov	r3, r2
 800081c:	71bb      	strb	r3, [r7, #6]
	unsigned char x;
	x = 6*X;
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	461a      	mov	r2, r3
 8000822:	0052      	lsls	r2, r2, #1
 8000824:	4413      	add	r3, r2
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	73fb      	strb	r3, [r7, #15]

	LCD5110_LCD_write_byte(0x40|Y,0);
 800082a:	79bb      	ldrb	r3, [r7, #6]
 800082c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000830:	b2db      	uxtb	r3, r3
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fea5 	bl	8000584 <LCD5110_LCD_write_byte>
	LCD5110_LCD_write_byte(0x80|x,0);
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000840:	b2db      	uxtb	r3, r3
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fe9d 	bl	8000584 <LCD5110_LCD_write_byte>
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <LCD5110_LCD_delay_ms>:

	//a++;
}

void LCD5110_LCD_delay_ms(unsigned int nCount)
{
 8000852:	b480      	push	{r7}
 8000854:	b085      	sub	sp, #20
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
  unsigned long t;
	t = nCount * 40000;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000860:	fb02 f303 	mul.w	r3, r2, r3
 8000864:	60fb      	str	r3, [r7, #12]
	while(t--);
 8000866:	bf00      	nop
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	1e5a      	subs	r2, r3, #1
 800086c:	60fa      	str	r2, [r7, #12]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d1fa      	bne.n	8000868 <LCD5110_LCD_delay_ms+0x16>
}
 8000872:	bf00      	nop
 8000874:	bf00      	nop
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <LCD5110_RST>:


}

void LCD5110_RST(unsigned char temp)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
	if (temp) PORT->ODR|=1<<LCD_RST;
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d006      	beq.n	800089e <LCD5110_RST+0x1e>
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <LCD5110_RST+0x38>)
 8000892:	695b      	ldr	r3, [r3, #20]
 8000894:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <LCD5110_RST+0x38>)
 8000896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800089a:	6153      	str	r3, [r2, #20]
	else PORT->ODR&=~(1<<LCD_RST);

}
 800089c:	e005      	b.n	80008aa <LCD5110_RST+0x2a>
	else PORT->ODR&=~(1<<LCD_RST);
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <LCD5110_RST+0x38>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	4a05      	ldr	r2, [pc, #20]	; (80008b8 <LCD5110_RST+0x38>)
 80008a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80008a8:	6153      	str	r3, [r2, #20]
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40020400 	.word	0x40020400

080008bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	4b38      	ldr	r3, [pc, #224]	; (80009b8 <MX_GPIO_Init+0xfc>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a37      	ldr	r2, [pc, #220]	; (80009b8 <MX_GPIO_Init+0xfc>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b35      	ldr	r3, [pc, #212]	; (80009b8 <MX_GPIO_Init+0xfc>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	4b31      	ldr	r3, [pc, #196]	; (80009b8 <MX_GPIO_Init+0xfc>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a30      	ldr	r2, [pc, #192]	; (80009b8 <MX_GPIO_Init+0xfc>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b2e      	ldr	r3, [pc, #184]	; (80009b8 <MX_GPIO_Init+0xfc>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <MX_GPIO_Init+0xfc>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a29      	ldr	r2, [pc, #164]	; (80009b8 <MX_GPIO_Init+0xfc>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b27      	ldr	r3, [pc, #156]	; (80009b8 <MX_GPIO_Init+0xfc>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <MX_GPIO_Init+0xfc>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a22      	ldr	r2, [pc, #136]	; (80009b8 <MX_GPIO_Init+0xfc>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <MX_GPIO_Init+0xfc>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2120      	movs	r1, #32
 8000946:	481d      	ldr	r0, [pc, #116]	; (80009bc <MX_GPIO_Init+0x100>)
 8000948:	f000 fdf4 	bl	8001534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NK_RST_Pin|NK_CS_Pin|NK_DO_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 8000952:	481b      	ldr	r0, [pc, #108]	; (80009c0 <MX_GPIO_Init+0x104>)
 8000954:	f000 fdee 	bl	8001534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800095c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800095e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4619      	mov	r1, r3
 800096e:	4815      	ldr	r0, [pc, #84]	; (80009c4 <MX_GPIO_Init+0x108>)
 8000970:	f000 fc4c 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000974:	2320      	movs	r3, #32
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	480c      	ldr	r0, [pc, #48]	; (80009bc <MX_GPIO_Init+0x100>)
 800098c:	f000 fc3e 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = NK_RST_Pin|NK_CS_Pin|NK_DO_Pin;
 8000990:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_GPIO_Init+0x104>)
 80009aa:	f000 fc2f 	bl	800120c <HAL_GPIO_Init>

}
 80009ae:	bf00      	nop
 80009b0:	3728      	adds	r7, #40	; 0x28
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020000 	.word	0x40020000
 80009c0:	40020400 	.word	0x40020400
 80009c4:	40020800 	.word	0x40020800

080009c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009cc:	f000 fa54 	bl	8000e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d0:	f000 f83e 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d4:	f7ff ff72 	bl	80008bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009d8:	f000 f9b2 	bl	8000d40 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80009dc:	f000 f8ac 	bl	8000b38 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  //Inicialização da Instancia HLCD
  hlcd.hspi=&hspi3;
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <main+0x78>)
 80009e2:	4a18      	ldr	r2, [pc, #96]	; (8000a44 <main+0x7c>)
 80009e4:	601a      	str	r2, [r3, #0]
  hlcd.CS_Port=NK_CS_GPIO_Port;
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <main+0x78>)
 80009e8:	4a17      	ldr	r2, [pc, #92]	; (8000a48 <main+0x80>)
 80009ea:	605a      	str	r2, [r3, #4]
  hlcd.CS_Pin=NK_CS_Pin;
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <main+0x78>)
 80009ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009f2:	811a      	strh	r2, [r3, #8]
  hlcd.DC_Port=NK_DO_GPIO_Port;
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <main+0x78>)
 80009f6:	4a14      	ldr	r2, [pc, #80]	; (8000a48 <main+0x80>)
 80009f8:	60da      	str	r2, [r3, #12]
  hlcd.DC_Pin=NK_DO_Pin;
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <main+0x78>)
 80009fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a00:	821a      	strh	r2, [r3, #16]

  LCD5110_init(&hlcd);
 8000a02:	480f      	ldr	r0, [pc, #60]	; (8000a40 <main+0x78>)
 8000a04:	f7ff fd7a 	bl	80004fc <LCD5110_init>
  	LCD5110_clear();
 8000a08:	f7ff fee3 	bl	80007d2 <LCD5110_clear>
  	LCD5110_set_XY(0, 0);
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f7ff fefd 	bl	800080e <LCD5110_set_XY>
  	LCD5110_write_string("Micros é show - Testando ");
 8000a14:	480d      	ldr	r0, [pc, #52]	; (8000a4c <main+0x84>)
 8000a16:	f7ff fea5 	bl	8000764 <LCD5110_write_string>
  	LCD5110_set_XY(0, 4);
 8000a1a:	2104      	movs	r1, #4
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f7ff fef6 	bl	800080e <LCD5110_set_XY>
  	LCD5110_write_char_reg('a');
 8000a22:	2061      	movs	r0, #97	; 0x61
 8000a24:	f7ff fe87 	bl	8000736 <LCD5110_write_char_reg>
  	LCD5110_write_char('b');
 8000a28:	2062      	movs	r0, #98	; 0x62
 8000a2a:	f7ff fe6d 	bl	8000708 <LCD5110_write_char>
	LCD5110_write_char_reg('c');
 8000a2e:	2063      	movs	r0, #99	; 0x63
 8000a30:	f7ff fe81 	bl	8000736 <LCD5110_write_char_reg>
  	HAL_Delay(DISP_DELAY);
 8000a34:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a38:	f000 fa90 	bl	8000f5c <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <main+0x74>
 8000a3e:	bf00      	nop
 8000a40:	20000a34 	.word	0x20000a34
 8000a44:	20000a4c 	.word	0x20000a4c
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	08002c34 	.word	0x08002c34

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b094      	sub	sp, #80	; 0x50
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	2234      	movs	r2, #52	; 0x34
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f002 f8d4 	bl	8002c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	f107 0308 	add.w	r3, r7, #8
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <SystemClock_Config+0xd4>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	4a29      	ldr	r2, [pc, #164]	; (8000b24 <SystemClock_Config+0xd4>)
 8000a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a82:	6413      	str	r3, [r2, #64]	; 0x40
 8000a84:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <SystemClock_Config+0xd4>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a90:	2300      	movs	r3, #0
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <SystemClock_Config+0xd8>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a9c:	4a22      	ldr	r2, [pc, #136]	; (8000b28 <SystemClock_Config+0xd8>)
 8000a9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa2:	6013      	str	r3, [r2, #0]
 8000aa4:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <SystemClock_Config+0xd8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab8:	2310      	movs	r3, #16
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000abc:	2302      	movs	r3, #2
 8000abe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ac4:	2310      	movs	r3, #16
 8000ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ac8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000acc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ace:	2304      	movs	r3, #4
 8000ad0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 f80e 	bl	8001b00 <HAL_RCC_OscConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000aea:	f000 f81f 	bl	8000b2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aee:	230f      	movs	r3, #15
 8000af0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af2:	2302      	movs	r3, #2
 8000af4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	2102      	movs	r1, #2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 fd2c 	bl	8001568 <HAL_RCC_ClockConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b16:	f000 f809 	bl	8000b2c <Error_Handler>
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	3750      	adds	r7, #80	; 0x50
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40007000 	.word	0x40007000

08000b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i
}
 8000b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <Error_Handler+0x8>
	...

08000b38 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b3e:	4a18      	ldr	r2, [pc, #96]	; (8000ba0 <MX_SPI3_Init+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b42:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b48:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b68:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b6c:	2238      	movs	r2, #56	; 0x38
 8000b6e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b84:	220a      	movs	r2, #10
 8000b86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b8a:	f001 fa57 	bl	800203c <HAL_SPI_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000b94:	f7ff ffca 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000a4c 	.word	0x20000a4c
 8000ba0:	40003c00 	.word	0x40003c00

08000ba4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a25      	ldr	r2, [pc, #148]	; (8000c58 <HAL_SPI_MspInit+0xb4>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d144      	bne.n	8000c50 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <HAL_SPI_MspInit+0xb8>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	4a23      	ldr	r2, [pc, #140]	; (8000c5c <HAL_SPI_MspInit+0xb8>)
 8000bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <HAL_SPI_MspInit+0xb8>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <HAL_SPI_MspInit+0xb8>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a1c      	ldr	r2, [pc, #112]	; (8000c5c <HAL_SPI_MspInit+0xb8>)
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <HAL_SPI_MspInit+0xb8>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0304 	and.w	r3, r3, #4
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC1     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = NK_DI_Pin;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8000c0e:	2305      	movs	r3, #5
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(NK_DI_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4811      	ldr	r0, [pc, #68]	; (8000c60 <HAL_SPI_MspInit+0xbc>)
 8000c1a:	f000 faf7 	bl	800120c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NK_SCK_Pin;
 8000c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c30:	2306      	movs	r3, #6
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(NK_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4809      	ldr	r0, [pc, #36]	; (8000c60 <HAL_SPI_MspInit+0xbc>)
 8000c3c:	f000 fae6 	bl	800120c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2100      	movs	r1, #0
 8000c44:	2033      	movs	r0, #51	; 0x33
 8000c46:	f000 fa88 	bl	800115a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000c4a:	2033      	movs	r0, #51	; 0x33
 8000c4c:	f000 faa1 	bl	8001192 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000c50:	bf00      	nop
 8000c52:	3728      	adds	r7, #40	; 0x28
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40003c00 	.word	0x40003c00
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020800 	.word	0x40020800

08000c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	4a0f      	ldr	r2, [pc, #60]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c78:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ca2:	2007      	movs	r0, #7
 8000ca4:	f000 fa4e 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <NMI_Handler+0x4>

08000cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d00:	f000 f90c 	bl	8000f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <SPI3_IRQHandler+0x10>)
 8000d0e:	f001 fb5b 	bl	80023c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000a4c 	.word	0x20000a4c

08000d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <SystemInit+0x20>)
 8000d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d26:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <SystemInit+0x20>)
 8000d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <MX_USART2_UART_Init+0x50>)
 8000d48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d66:	220c      	movs	r2, #12
 8000d68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d78:	f001 fd0e 	bl	8002798 <HAL_UART_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d82:	f7ff fed3 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000aa4 	.word	0x20000aa4
 8000d90:	40004400 	.word	0x40004400

08000d94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <HAL_UART_MspInit+0x84>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d12b      	bne.n	8000e0e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <HAL_UART_MspInit+0x88>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a17      	ldr	r2, [pc, #92]	; (8000e1c <HAL_UART_MspInit+0x88>)
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_UART_MspInit+0x88>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <HAL_UART_MspInit+0x88>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a10      	ldr	r2, [pc, #64]	; (8000e1c <HAL_UART_MspInit+0x88>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_UART_MspInit+0x88>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dee:	230c      	movs	r3, #12
 8000df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dfe:	2307      	movs	r3, #7
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <HAL_UART_MspInit+0x8c>)
 8000e0a:	f000 f9ff 	bl	800120c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e0e:	bf00      	nop
 8000e10:	3728      	adds	r7, #40	; 0x28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40004400 	.word	0x40004400
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020000 	.word	0x40020000

08000e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e2a:	490e      	ldr	r1, [pc, #56]	; (8000e64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e2c:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e40:	4c0b      	ldr	r4, [pc, #44]	; (8000e70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e4e:	f7ff ff65 	bl	8000d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e52:	f001 feb7 	bl	8002bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e56:	f7ff fdb7 	bl	80009c8 <main>
  bx  lr    
 8000e5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e64:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8000e68:	08002c78 	.word	0x08002c78
  ldr r2, =_sbss
 8000e6c:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8000e70:	20000aec 	.word	0x20000aec

08000e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC_IRQHandler>
	...

08000e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <HAL_Init+0x40>)
 8000e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <HAL_Init+0x40>)
 8000e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <HAL_Init+0x40>)
 8000e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 f94f 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f000 f808 	bl	8000ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eac:	f7ff feda 	bl	8000c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023c00 	.word	0x40023c00

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x54>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0x58>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f967 	bl	80011ae <HAL_SYSTICK_Config>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00e      	b.n	8000f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b0f      	cmp	r3, #15
 8000eee:	d80a      	bhi.n	8000f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f000 f92f 	bl	800115a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000efc:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <HAL_InitTick+0x5c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e000      	b.n	8000f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000228 	.word	0x20000228
 8000f14:	20000230 	.word	0x20000230
 8000f18:	2000022c 	.word	0x2000022c

08000f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000230 	.word	0x20000230
 8000f40:	20000ae8 	.word	0x20000ae8

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000ae8 	.word	0x20000ae8

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff ffee 	bl	8000f44 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_Delay+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f82:	bf00      	nop
 8000f84:	f7ff ffde 	bl	8000f44 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000230 	.word	0x20000230

08000fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	2b00      	cmp	r3, #0
 8001018:	db0b      	blt.n	8001032 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	f003 021f 	and.w	r2, r3, #31
 8001020:	4907      	ldr	r1, [pc, #28]	; (8001040 <__NVIC_EnableIRQ+0x38>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	095b      	lsrs	r3, r3, #5
 8001028:	2001      	movs	r0, #1
 800102a:	fa00 f202 	lsl.w	r2, r0, r2
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100

08001044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	db0a      	blt.n	800106e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	b2da      	uxtb	r2, r3
 800105c:	490c      	ldr	r1, [pc, #48]	; (8001090 <__NVIC_SetPriority+0x4c>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	0112      	lsls	r2, r2, #4
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	440b      	add	r3, r1
 8001068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800106c:	e00a      	b.n	8001084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4908      	ldr	r1, [pc, #32]	; (8001094 <__NVIC_SetPriority+0x50>)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	3b04      	subs	r3, #4
 800107c:	0112      	lsls	r2, r2, #4
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	440b      	add	r3, r1
 8001082:	761a      	strb	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000e100 	.word	0xe000e100
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	bf28      	it	cs
 80010b6:	2304      	movcs	r3, #4
 80010b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3304      	adds	r3, #4
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d902      	bls.n	80010c8 <NVIC_EncodePriority+0x30>
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3b03      	subs	r3, #3
 80010c6:	e000      	b.n	80010ca <NVIC_EncodePriority+0x32>
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43da      	mvns	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	401a      	ands	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e0:	f04f 31ff 	mov.w	r1, #4294967295
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	43d9      	mvns	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	4313      	orrs	r3, r2
         );
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3724      	adds	r7, #36	; 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001110:	d301      	bcc.n	8001116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001112:	2301      	movs	r3, #1
 8001114:	e00f      	b.n	8001136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <SysTick_Config+0x40>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111e:	210f      	movs	r1, #15
 8001120:	f04f 30ff 	mov.w	r0, #4294967295
 8001124:	f7ff ff8e 	bl	8001044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <SysTick_Config+0x40>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112e:	4b04      	ldr	r3, [pc, #16]	; (8001140 <SysTick_Config+0x40>)
 8001130:	2207      	movs	r2, #7
 8001132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	e000e010 	.word	0xe000e010

08001144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ff29 	bl	8000fa4 <__NVIC_SetPriorityGrouping>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800116c:	f7ff ff3e 	bl	8000fec <__NVIC_GetPriorityGrouping>
 8001170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	68b9      	ldr	r1, [r7, #8]
 8001176:	6978      	ldr	r0, [r7, #20]
 8001178:	f7ff ff8e 	bl	8001098 <NVIC_EncodePriority>
 800117c:	4602      	mov	r2, r0
 800117e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff5d 	bl	8001044 <__NVIC_SetPriority>
}
 800118a:	bf00      	nop
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff31 	bl	8001008 <__NVIC_EnableIRQ>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ffa2 	bl	8001100 <SysTick_Config>
 80011bc:	4603      	mov	r3, r0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d004      	beq.n	80011e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e00c      	b.n	80011fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2205      	movs	r2, #5
 80011e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 0201 	bic.w	r2, r2, #1
 80011fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	e165      	b.n	80014f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001228:	2201      	movs	r2, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	429a      	cmp	r2, r3
 8001242:	f040 8154 	bne.w	80014ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	2b01      	cmp	r3, #1
 8001250:	d005      	beq.n	800125e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800125a:	2b02      	cmp	r3, #2
 800125c:	d130      	bne.n	80012c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	2203      	movs	r2, #3
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001294:	2201      	movs	r2, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	091b      	lsrs	r3, r3, #4
 80012aa:	f003 0201 	and.w	r2, r3, #1
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b03      	cmp	r3, #3
 80012ca:	d017      	beq.n	80012fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d123      	bne.n	8001350 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	08da      	lsrs	r2, r3, #3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3208      	adds	r2, #8
 8001310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	220f      	movs	r2, #15
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	691a      	ldr	r2, [r3, #16]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	08da      	lsrs	r2, r3, #3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3208      	adds	r2, #8
 800134a:	69b9      	ldr	r1, [r7, #24]
 800134c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	2203      	movs	r2, #3
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0203 	and.w	r2, r3, #3
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 80ae 	beq.w	80014ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b5d      	ldr	r3, [pc, #372]	; (800150c <HAL_GPIO_Init+0x300>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a5c      	ldr	r2, [pc, #368]	; (800150c <HAL_GPIO_Init+0x300>)
 800139c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b5a      	ldr	r3, [pc, #360]	; (800150c <HAL_GPIO_Init+0x300>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ae:	4a58      	ldr	r2, [pc, #352]	; (8001510 <HAL_GPIO_Init+0x304>)
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	089b      	lsrs	r3, r3, #2
 80013b4:	3302      	adds	r3, #2
 80013b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	220f      	movs	r2, #15
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4f      	ldr	r2, [pc, #316]	; (8001514 <HAL_GPIO_Init+0x308>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d025      	beq.n	8001426 <HAL_GPIO_Init+0x21a>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4e      	ldr	r2, [pc, #312]	; (8001518 <HAL_GPIO_Init+0x30c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d01f      	beq.n	8001422 <HAL_GPIO_Init+0x216>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4d      	ldr	r2, [pc, #308]	; (800151c <HAL_GPIO_Init+0x310>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d019      	beq.n	800141e <HAL_GPIO_Init+0x212>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4c      	ldr	r2, [pc, #304]	; (8001520 <HAL_GPIO_Init+0x314>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d013      	beq.n	800141a <HAL_GPIO_Init+0x20e>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4b      	ldr	r2, [pc, #300]	; (8001524 <HAL_GPIO_Init+0x318>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d00d      	beq.n	8001416 <HAL_GPIO_Init+0x20a>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4a      	ldr	r2, [pc, #296]	; (8001528 <HAL_GPIO_Init+0x31c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d007      	beq.n	8001412 <HAL_GPIO_Init+0x206>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a49      	ldr	r2, [pc, #292]	; (800152c <HAL_GPIO_Init+0x320>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d101      	bne.n	800140e <HAL_GPIO_Init+0x202>
 800140a:	2306      	movs	r3, #6
 800140c:	e00c      	b.n	8001428 <HAL_GPIO_Init+0x21c>
 800140e:	2307      	movs	r3, #7
 8001410:	e00a      	b.n	8001428 <HAL_GPIO_Init+0x21c>
 8001412:	2305      	movs	r3, #5
 8001414:	e008      	b.n	8001428 <HAL_GPIO_Init+0x21c>
 8001416:	2304      	movs	r3, #4
 8001418:	e006      	b.n	8001428 <HAL_GPIO_Init+0x21c>
 800141a:	2303      	movs	r3, #3
 800141c:	e004      	b.n	8001428 <HAL_GPIO_Init+0x21c>
 800141e:	2302      	movs	r3, #2
 8001420:	e002      	b.n	8001428 <HAL_GPIO_Init+0x21c>
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <HAL_GPIO_Init+0x21c>
 8001426:	2300      	movs	r3, #0
 8001428:	69fa      	ldr	r2, [r7, #28]
 800142a:	f002 0203 	and.w	r2, r2, #3
 800142e:	0092      	lsls	r2, r2, #2
 8001430:	4093      	lsls	r3, r2
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001438:	4935      	ldr	r1, [pc, #212]	; (8001510 <HAL_GPIO_Init+0x304>)
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	089b      	lsrs	r3, r3, #2
 800143e:	3302      	adds	r3, #2
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001446:	4b3a      	ldr	r3, [pc, #232]	; (8001530 <HAL_GPIO_Init+0x324>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800146a:	4a31      	ldr	r2, [pc, #196]	; (8001530 <HAL_GPIO_Init+0x324>)
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001470:	4b2f      	ldr	r3, [pc, #188]	; (8001530 <HAL_GPIO_Init+0x324>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001494:	4a26      	ldr	r2, [pc, #152]	; (8001530 <HAL_GPIO_Init+0x324>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800149a:	4b25      	ldr	r3, [pc, #148]	; (8001530 <HAL_GPIO_Init+0x324>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014be:	4a1c      	ldr	r2, [pc, #112]	; (8001530 <HAL_GPIO_Init+0x324>)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014c4:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <HAL_GPIO_Init+0x324>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014e8:	4a11      	ldr	r2, [pc, #68]	; (8001530 <HAL_GPIO_Init+0x324>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3301      	adds	r3, #1
 80014f2:	61fb      	str	r3, [r7, #28]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	2b0f      	cmp	r3, #15
 80014f8:	f67f ae96 	bls.w	8001228 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800
 8001510:	40013800 	.word	0x40013800
 8001514:	40020000 	.word	0x40020000
 8001518:	40020400 	.word	0x40020400
 800151c:	40020800 	.word	0x40020800
 8001520:	40020c00 	.word	0x40020c00
 8001524:	40021000 	.word	0x40021000
 8001528:	40021400 	.word	0x40021400
 800152c:	40021800 	.word	0x40021800
 8001530:	40013c00 	.word	0x40013c00

08001534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	807b      	strh	r3, [r7, #2]
 8001540:	4613      	mov	r3, r2
 8001542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001544:	787b      	ldrb	r3, [r7, #1]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800154a:	887a      	ldrh	r2, [r7, #2]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001550:	e003      	b.n	800155a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001552:	887b      	ldrh	r3, [r7, #2]
 8001554:	041a      	lsls	r2, r3, #16
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	619a      	str	r2, [r3, #24]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e0cc      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800157c:	4b68      	ldr	r3, [pc, #416]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 030f 	and.w	r3, r3, #15
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	429a      	cmp	r2, r3
 8001588:	d90c      	bls.n	80015a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158a:	4b65      	ldr	r3, [pc, #404]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001592:	4b63      	ldr	r3, [pc, #396]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e0b8      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d020      	beq.n	80015f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015bc:	4b59      	ldr	r3, [pc, #356]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4a58      	ldr	r2, [pc, #352]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015d4:	4b53      	ldr	r3, [pc, #332]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	4a52      	ldr	r2, [pc, #328]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e0:	4b50      	ldr	r3, [pc, #320]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	494d      	ldr	r1, [pc, #308]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d044      	beq.n	8001688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d107      	bne.n	8001616 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001606:	4b47      	ldr	r3, [pc, #284]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d119      	bne.n	8001646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e07f      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d003      	beq.n	8001626 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001622:	2b03      	cmp	r3, #3
 8001624:	d107      	bne.n	8001636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001626:	4b3f      	ldr	r3, [pc, #252]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d109      	bne.n	8001646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e06f      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001636:	4b3b      	ldr	r3, [pc, #236]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e067      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001646:	4b37      	ldr	r3, [pc, #220]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f023 0203 	bic.w	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	4934      	ldr	r1, [pc, #208]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	4313      	orrs	r3, r2
 8001656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001658:	f7ff fc74 	bl	8000f44 <HAL_GetTick>
 800165c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165e:	e00a      	b.n	8001676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001660:	f7ff fc70 	bl	8000f44 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	f241 3288 	movw	r2, #5000	; 0x1388
 800166e:	4293      	cmp	r3, r2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e04f      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001676:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 020c 	and.w	r2, r3, #12
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	429a      	cmp	r2, r3
 8001686:	d1eb      	bne.n	8001660 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001688:	4b25      	ldr	r3, [pc, #148]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 030f 	and.w	r3, r3, #15
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d20c      	bcs.n	80016b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001696:	4b22      	ldr	r3, [pc, #136]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800169e:	4b20      	ldr	r3, [pc, #128]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e032      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d008      	beq.n	80016ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016bc:	4b19      	ldr	r3, [pc, #100]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	4916      	ldr	r1, [pc, #88]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d009      	beq.n	80016ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016da:	4b12      	ldr	r3, [pc, #72]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	490e      	ldr	r1, [pc, #56]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016ee:	f000 f855 	bl	800179c <HAL_RCC_GetSysClockFreq>
 80016f2:	4602      	mov	r2, r0
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	091b      	lsrs	r3, r3, #4
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	490a      	ldr	r1, [pc, #40]	; (8001728 <HAL_RCC_ClockConfig+0x1c0>)
 8001700:	5ccb      	ldrb	r3, [r1, r3]
 8001702:	fa22 f303 	lsr.w	r3, r2, r3
 8001706:	4a09      	ldr	r2, [pc, #36]	; (800172c <HAL_RCC_ClockConfig+0x1c4>)
 8001708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_RCC_ClockConfig+0x1c8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fbd4 	bl	8000ebc <HAL_InitTick>

  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023c00 	.word	0x40023c00
 8001724:	40023800 	.word	0x40023800
 8001728:	08002c50 	.word	0x08002c50
 800172c:	20000228 	.word	0x20000228
 8001730:	2000022c 	.word	0x2000022c

08001734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <HAL_RCC_GetHCLKFreq+0x14>)
 800173a:	681b      	ldr	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000228 	.word	0x20000228

0800174c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001750:	f7ff fff0 	bl	8001734 <HAL_RCC_GetHCLKFreq>
 8001754:	4602      	mov	r2, r0
 8001756:	4b05      	ldr	r3, [pc, #20]	; (800176c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	0a9b      	lsrs	r3, r3, #10
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	4903      	ldr	r1, [pc, #12]	; (8001770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001762:	5ccb      	ldrb	r3, [r1, r3]
 8001764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001768:	4618      	mov	r0, r3
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40023800 	.word	0x40023800
 8001770:	08002c60 	.word	0x08002c60

08001774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001778:	f7ff ffdc 	bl	8001734 <HAL_RCC_GetHCLKFreq>
 800177c:	4602      	mov	r2, r0
 800177e:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	0b5b      	lsrs	r3, r3, #13
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	4903      	ldr	r1, [pc, #12]	; (8001798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800178a:	5ccb      	ldrb	r3, [r1, r3]
 800178c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001790:	4618      	mov	r0, r3
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40023800 	.word	0x40023800
 8001798:	08002c60 	.word	0x08002c60

0800179c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800179c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017a0:	b088      	sub	sp, #32
 80017a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017b8:	4bce      	ldr	r3, [pc, #824]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x358>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 030c 	and.w	r3, r3, #12
 80017c0:	2b0c      	cmp	r3, #12
 80017c2:	f200 818d 	bhi.w	8001ae0 <HAL_RCC_GetSysClockFreq+0x344>
 80017c6:	a201      	add	r2, pc, #4	; (adr r2, 80017cc <HAL_RCC_GetSysClockFreq+0x30>)
 80017c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017cc:	08001801 	.word	0x08001801
 80017d0:	08001ae1 	.word	0x08001ae1
 80017d4:	08001ae1 	.word	0x08001ae1
 80017d8:	08001ae1 	.word	0x08001ae1
 80017dc:	08001807 	.word	0x08001807
 80017e0:	08001ae1 	.word	0x08001ae1
 80017e4:	08001ae1 	.word	0x08001ae1
 80017e8:	08001ae1 	.word	0x08001ae1
 80017ec:	0800180d 	.word	0x0800180d
 80017f0:	08001ae1 	.word	0x08001ae1
 80017f4:	08001ae1 	.word	0x08001ae1
 80017f8:	08001ae1 	.word	0x08001ae1
 80017fc:	08001981 	.word	0x08001981
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001800:	4bbd      	ldr	r3, [pc, #756]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001802:	61bb      	str	r3, [r7, #24]
       break;
 8001804:	e16f      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001806:	4bbd      	ldr	r3, [pc, #756]	; (8001afc <HAL_RCC_GetSysClockFreq+0x360>)
 8001808:	61bb      	str	r3, [r7, #24]
      break;
 800180a:	e16c      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800180c:	4bb9      	ldr	r3, [pc, #740]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x358>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001814:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001816:	4bb7      	ldr	r3, [pc, #732]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d053      	beq.n	80018ca <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001822:	4bb4      	ldr	r3, [pc, #720]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	099b      	lsrs	r3, r3, #6
 8001828:	461a      	mov	r2, r3
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001832:	f04f 0100 	mov.w	r1, #0
 8001836:	ea02 0400 	and.w	r4, r2, r0
 800183a:	603c      	str	r4, [r7, #0]
 800183c:	400b      	ands	r3, r1
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001844:	4620      	mov	r0, r4
 8001846:	4629      	mov	r1, r5
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	f04f 0300 	mov.w	r3, #0
 8001850:	014b      	lsls	r3, r1, #5
 8001852:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001856:	0142      	lsls	r2, r0, #5
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	4623      	mov	r3, r4
 800185e:	1ac0      	subs	r0, r0, r3
 8001860:	462b      	mov	r3, r5
 8001862:	eb61 0103 	sbc.w	r1, r1, r3
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	018b      	lsls	r3, r1, #6
 8001870:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001874:	0182      	lsls	r2, r0, #6
 8001876:	1a12      	subs	r2, r2, r0
 8001878:	eb63 0301 	sbc.w	r3, r3, r1
 800187c:	f04f 0000 	mov.w	r0, #0
 8001880:	f04f 0100 	mov.w	r1, #0
 8001884:	00d9      	lsls	r1, r3, #3
 8001886:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800188a:	00d0      	lsls	r0, r2, #3
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4621      	mov	r1, r4
 8001892:	1852      	adds	r2, r2, r1
 8001894:	4629      	mov	r1, r5
 8001896:	eb43 0101 	adc.w	r1, r3, r1
 800189a:	460b      	mov	r3, r1
 800189c:	f04f 0000 	mov.w	r0, #0
 80018a0:	f04f 0100 	mov.w	r1, #0
 80018a4:	0259      	lsls	r1, r3, #9
 80018a6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80018aa:	0250      	lsls	r0, r2, #9
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	461a      	mov	r2, r3
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	f7fe fca2 	bl	8000204 <__aeabi_uldivmod>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4613      	mov	r3, r2
 80018c6:	61fb      	str	r3, [r7, #28]
 80018c8:	e04c      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ca:	4b8a      	ldr	r3, [pc, #552]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x358>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	099b      	lsrs	r3, r3, #6
 80018d0:	461a      	mov	r2, r3
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018da:	f04f 0100 	mov.w	r1, #0
 80018de:	ea02 0a00 	and.w	sl, r2, r0
 80018e2:	ea03 0b01 	and.w	fp, r3, r1
 80018e6:	4650      	mov	r0, sl
 80018e8:	4659      	mov	r1, fp
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	014b      	lsls	r3, r1, #5
 80018f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018f8:	0142      	lsls	r2, r0, #5
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	ebb0 000a 	subs.w	r0, r0, sl
 8001902:	eb61 010b 	sbc.w	r1, r1, fp
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	f04f 0300 	mov.w	r3, #0
 800190e:	018b      	lsls	r3, r1, #6
 8001910:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001914:	0182      	lsls	r2, r0, #6
 8001916:	1a12      	subs	r2, r2, r0
 8001918:	eb63 0301 	sbc.w	r3, r3, r1
 800191c:	f04f 0000 	mov.w	r0, #0
 8001920:	f04f 0100 	mov.w	r1, #0
 8001924:	00d9      	lsls	r1, r3, #3
 8001926:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800192a:	00d0      	lsls	r0, r2, #3
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	eb12 020a 	adds.w	r2, r2, sl
 8001934:	eb43 030b 	adc.w	r3, r3, fp
 8001938:	f04f 0000 	mov.w	r0, #0
 800193c:	f04f 0100 	mov.w	r1, #0
 8001940:	0299      	lsls	r1, r3, #10
 8001942:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001946:	0290      	lsls	r0, r2, #10
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	461a      	mov	r2, r3
 8001954:	f04f 0300 	mov.w	r3, #0
 8001958:	f7fe fc54 	bl	8000204 <__aeabi_uldivmod>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4613      	mov	r3, r2
 8001962:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001964:	4b63      	ldr	r3, [pc, #396]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	0c1b      	lsrs	r3, r3, #16
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	3301      	adds	r3, #1
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001974:	69fa      	ldr	r2, [r7, #28]
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	fbb2 f3f3 	udiv	r3, r2, r3
 800197c:	61bb      	str	r3, [r7, #24]
      break;
 800197e:	e0b2      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001980:	4b5c      	ldr	r3, [pc, #368]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001988:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800198a:	4b5a      	ldr	r3, [pc, #360]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x358>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d04d      	beq.n	8001a32 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001996:	4b57      	ldr	r3, [pc, #348]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	099b      	lsrs	r3, r3, #6
 800199c:	461a      	mov	r2, r3
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019a6:	f04f 0100 	mov.w	r1, #0
 80019aa:	ea02 0800 	and.w	r8, r2, r0
 80019ae:	ea03 0901 	and.w	r9, r3, r1
 80019b2:	4640      	mov	r0, r8
 80019b4:	4649      	mov	r1, r9
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	014b      	lsls	r3, r1, #5
 80019c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019c4:	0142      	lsls	r2, r0, #5
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	ebb0 0008 	subs.w	r0, r0, r8
 80019ce:	eb61 0109 	sbc.w	r1, r1, r9
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	018b      	lsls	r3, r1, #6
 80019dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019e0:	0182      	lsls	r2, r0, #6
 80019e2:	1a12      	subs	r2, r2, r0
 80019e4:	eb63 0301 	sbc.w	r3, r3, r1
 80019e8:	f04f 0000 	mov.w	r0, #0
 80019ec:	f04f 0100 	mov.w	r1, #0
 80019f0:	00d9      	lsls	r1, r3, #3
 80019f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019f6:	00d0      	lsls	r0, r2, #3
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	eb12 0208 	adds.w	r2, r2, r8
 8001a00:	eb43 0309 	adc.w	r3, r3, r9
 8001a04:	f04f 0000 	mov.w	r0, #0
 8001a08:	f04f 0100 	mov.w	r1, #0
 8001a0c:	0259      	lsls	r1, r3, #9
 8001a0e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a12:	0250      	lsls	r0, r2, #9
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	f7fe fbee 	bl	8000204 <__aeabi_uldivmod>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	61fb      	str	r3, [r7, #28]
 8001a30:	e04a      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a32:	4b30      	ldr	r3, [pc, #192]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	099b      	lsrs	r3, r3, #6
 8001a38:	461a      	mov	r2, r3
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a42:	f04f 0100 	mov.w	r1, #0
 8001a46:	ea02 0400 	and.w	r4, r2, r0
 8001a4a:	ea03 0501 	and.w	r5, r3, r1
 8001a4e:	4620      	mov	r0, r4
 8001a50:	4629      	mov	r1, r5
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	f04f 0300 	mov.w	r3, #0
 8001a5a:	014b      	lsls	r3, r1, #5
 8001a5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a60:	0142      	lsls	r2, r0, #5
 8001a62:	4610      	mov	r0, r2
 8001a64:	4619      	mov	r1, r3
 8001a66:	1b00      	subs	r0, r0, r4
 8001a68:	eb61 0105 	sbc.w	r1, r1, r5
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	018b      	lsls	r3, r1, #6
 8001a76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a7a:	0182      	lsls	r2, r0, #6
 8001a7c:	1a12      	subs	r2, r2, r0
 8001a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a82:	f04f 0000 	mov.w	r0, #0
 8001a86:	f04f 0100 	mov.w	r1, #0
 8001a8a:	00d9      	lsls	r1, r3, #3
 8001a8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a90:	00d0      	lsls	r0, r2, #3
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	1912      	adds	r2, r2, r4
 8001a98:	eb45 0303 	adc.w	r3, r5, r3
 8001a9c:	f04f 0000 	mov.w	r0, #0
 8001aa0:	f04f 0100 	mov.w	r1, #0
 8001aa4:	0299      	lsls	r1, r3, #10
 8001aa6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001aaa:	0290      	lsls	r0, r2, #10
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	f7fe fba2 	bl	8000204 <__aeabi_uldivmod>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	0f1b      	lsrs	r3, r3, #28
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001ad4:	69fa      	ldr	r2, [r7, #28]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001adc:	61bb      	str	r3, [r7, #24]
      break;
 8001ade:	e002      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001ae2:	61bb      	str	r3, [r7, #24]
      break;
 8001ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ae6:	69bb      	ldr	r3, [r7, #24]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3720      	adds	r7, #32
 8001aec:	46bd      	mov	sp, r7
 8001aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	00f42400 	.word	0x00f42400
 8001afc:	007a1200 	.word	0x007a1200

08001b00 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e28d      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 8083 	beq.w	8001c26 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b20:	4b94      	ldr	r3, [pc, #592]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 030c 	and.w	r3, r3, #12
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d019      	beq.n	8001b60 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b2c:	4b91      	ldr	r3, [pc, #580]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d106      	bne.n	8001b46 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b38:	4b8e      	ldr	r3, [pc, #568]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b44:	d00c      	beq.n	8001b60 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b46:	4b8b      	ldr	r3, [pc, #556]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b4e:	2b0c      	cmp	r3, #12
 8001b50:	d112      	bne.n	8001b78 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b52:	4b88      	ldr	r3, [pc, #544]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b5e:	d10b      	bne.n	8001b78 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b60:	4b84      	ldr	r3, [pc, #528]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d05b      	beq.n	8001c24 <HAL_RCC_OscConfig+0x124>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d157      	bne.n	8001c24 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e25a      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b80:	d106      	bne.n	8001b90 <HAL_RCC_OscConfig+0x90>
 8001b82:	4b7c      	ldr	r3, [pc, #496]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a7b      	ldr	r2, [pc, #492]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e01d      	b.n	8001bcc <HAL_RCC_OscConfig+0xcc>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b98:	d10c      	bne.n	8001bb4 <HAL_RCC_OscConfig+0xb4>
 8001b9a:	4b76      	ldr	r3, [pc, #472]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a75      	ldr	r2, [pc, #468]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	4b73      	ldr	r3, [pc, #460]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a72      	ldr	r2, [pc, #456]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	e00b      	b.n	8001bcc <HAL_RCC_OscConfig+0xcc>
 8001bb4:	4b6f      	ldr	r3, [pc, #444]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a6e      	ldr	r2, [pc, #440]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	4b6c      	ldr	r3, [pc, #432]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a6b      	ldr	r2, [pc, #428]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d013      	beq.n	8001bfc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd4:	f7ff f9b6 	bl	8000f44 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bdc:	f7ff f9b2 	bl	8000f44 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b64      	cmp	r3, #100	; 0x64
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e21f      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bee:	4b61      	ldr	r3, [pc, #388]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0xdc>
 8001bfa:	e014      	b.n	8001c26 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfc:	f7ff f9a2 	bl	8000f44 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff f99e 	bl	8000f44 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	; 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e20b      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c16:	4b57      	ldr	r3, [pc, #348]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x104>
 8001c22:	e000      	b.n	8001c26 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d06f      	beq.n	8001d12 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c32:	4b50      	ldr	r3, [pc, #320]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d017      	beq.n	8001c6e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c3e:	4b4d      	ldr	r3, [pc, #308]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d105      	bne.n	8001c56 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c4a:	4b4a      	ldr	r3, [pc, #296]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00b      	beq.n	8001c6e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c56:	4b47      	ldr	r3, [pc, #284]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c5e:	2b0c      	cmp	r3, #12
 8001c60:	d11c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c62:	4b44      	ldr	r3, [pc, #272]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d116      	bne.n	8001c9c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6e:	4b41      	ldr	r3, [pc, #260]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <HAL_RCC_OscConfig+0x186>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d001      	beq.n	8001c86 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e1d3      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c86:	4b3b      	ldr	r3, [pc, #236]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4937      	ldr	r1, [pc, #220]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9a:	e03a      	b.n	8001d12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d020      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ca4:	4b34      	ldr	r3, [pc, #208]	; (8001d78 <HAL_RCC_OscConfig+0x278>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001caa:	f7ff f94b 	bl	8000f44 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb2:	f7ff f947 	bl	8000f44 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e1b4      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc4:	4b2b      	ldr	r3, [pc, #172]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd0:	4b28      	ldr	r3, [pc, #160]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4925      	ldr	r1, [pc, #148]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	600b      	str	r3, [r1, #0]
 8001ce4:	e015      	b.n	8001d12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce6:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <HAL_RCC_OscConfig+0x278>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cec:	f7ff f92a 	bl	8000f44 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf4:	f7ff f926 	bl	8000f44 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e193      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d06:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d036      	beq.n	8001d8c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d016      	beq.n	8001d54 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d26:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2c:	f7ff f90a 	bl	8000f44 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d34:	f7ff f906 	bl	8000f44 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e173      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0x234>
 8001d52:	e01b      	b.n	8001d8c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5a:	f7ff f8f3 	bl	8000f44 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d60:	e00e      	b.n	8001d80 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d62:	f7ff f8ef 	bl	8000f44 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d907      	bls.n	8001d80 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e15c      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
 8001d74:	40023800 	.word	0x40023800
 8001d78:	42470000 	.word	0x42470000
 8001d7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d80:	4b8a      	ldr	r3, [pc, #552]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1ea      	bne.n	8001d62 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 8097 	beq.w	8001ec8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9e:	4b83      	ldr	r3, [pc, #524]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10f      	bne.n	8001dca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	4b7f      	ldr	r3, [pc, #508]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	4a7e      	ldr	r2, [pc, #504]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dba:	4b7c      	ldr	r3, [pc, #496]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dca:	4b79      	ldr	r3, [pc, #484]	; (8001fb0 <HAL_RCC_OscConfig+0x4b0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d118      	bne.n	8001e08 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dd6:	4b76      	ldr	r3, [pc, #472]	; (8001fb0 <HAL_RCC_OscConfig+0x4b0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a75      	ldr	r2, [pc, #468]	; (8001fb0 <HAL_RCC_OscConfig+0x4b0>)
 8001ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de2:	f7ff f8af 	bl	8000f44 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dea:	f7ff f8ab 	bl	8000f44 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e118      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfc:	4b6c      	ldr	r3, [pc, #432]	; (8001fb0 <HAL_RCC_OscConfig+0x4b0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d106      	bne.n	8001e1e <HAL_RCC_OscConfig+0x31e>
 8001e10:	4b66      	ldr	r3, [pc, #408]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e14:	4a65      	ldr	r2, [pc, #404]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e1c:	e01c      	b.n	8001e58 <HAL_RCC_OscConfig+0x358>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	d10c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x340>
 8001e26:	4b61      	ldr	r3, [pc, #388]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2a:	4a60      	ldr	r2, [pc, #384]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001e2c:	f043 0304 	orr.w	r3, r3, #4
 8001e30:	6713      	str	r3, [r2, #112]	; 0x70
 8001e32:	4b5e      	ldr	r3, [pc, #376]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e36:	4a5d      	ldr	r2, [pc, #372]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e3e:	e00b      	b.n	8001e58 <HAL_RCC_OscConfig+0x358>
 8001e40:	4b5a      	ldr	r3, [pc, #360]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e44:	4a59      	ldr	r2, [pc, #356]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001e46:	f023 0301 	bic.w	r3, r3, #1
 8001e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4c:	4b57      	ldr	r3, [pc, #348]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e50:	4a56      	ldr	r2, [pc, #344]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001e52:	f023 0304 	bic.w	r3, r3, #4
 8001e56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d015      	beq.n	8001e8c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e60:	f7ff f870 	bl	8000f44 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e66:	e00a      	b.n	8001e7e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e68:	f7ff f86c 	bl	8000f44 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e0d7      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7e:	4b4b      	ldr	r3, [pc, #300]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0ee      	beq.n	8001e68 <HAL_RCC_OscConfig+0x368>
 8001e8a:	e014      	b.n	8001eb6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8c:	f7ff f85a 	bl	8000f44 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e92:	e00a      	b.n	8001eaa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e94:	f7ff f856 	bl	8000f44 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e0c1      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eaa:	4b40      	ldr	r3, [pc, #256]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1ee      	bne.n	8001e94 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eb6:	7dfb      	ldrb	r3, [r7, #23]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d105      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ebc:	4b3b      	ldr	r3, [pc, #236]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	4a3a      	ldr	r2, [pc, #232]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001ec2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80ad 	beq.w	800202c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ed2:	4b36      	ldr	r3, [pc, #216]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d060      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d145      	bne.n	8001f72 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee6:	4b33      	ldr	r3, [pc, #204]	; (8001fb4 <HAL_RCC_OscConfig+0x4b4>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eec:	f7ff f82a 	bl	8000f44 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef4:	f7ff f826 	bl	8000f44 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e093      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f06:	4b29      	ldr	r3, [pc, #164]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69da      	ldr	r2, [r3, #28]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	019b      	lsls	r3, r3, #6
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f28:	085b      	lsrs	r3, r3, #1
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	041b      	lsls	r3, r3, #16
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	061b      	lsls	r3, r3, #24
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	071b      	lsls	r3, r3, #28
 8001f3e:	491b      	ldr	r1, [pc, #108]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f44:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <HAL_RCC_OscConfig+0x4b4>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4a:	f7fe fffb 	bl	8000f44 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f52:	f7fe fff7 	bl	8000f44 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e064      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x452>
 8001f70:	e05c      	b.n	800202c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f72:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <HAL_RCC_OscConfig+0x4b4>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7fe ffe4 	bl	8000f44 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f80:	f7fe ffe0 	bl	8000f44 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e04d      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x480>
 8001f9e:	e045      	b.n	800202c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d107      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e040      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40007000 	.word	0x40007000
 8001fb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fb8:	4b1f      	ldr	r3, [pc, #124]	; (8002038 <HAL_RCC_OscConfig+0x538>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d030      	beq.n	8002028 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d129      	bne.n	8002028 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d122      	bne.n	8002028 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fe8:	4013      	ands	r3, r2
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d119      	bne.n	8002028 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffe:	085b      	lsrs	r3, r3, #1
 8002000:	3b01      	subs	r3, #1
 8002002:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002004:	429a      	cmp	r2, r3
 8002006:	d10f      	bne.n	8002028 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002012:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002014:	429a      	cmp	r2, r3
 8002016:	d107      	bne.n	8002028 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800

0800203c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e07b      	b.n	8002146 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	2b00      	cmp	r3, #0
 8002054:	d108      	bne.n	8002068 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800205e:	d009      	beq.n	8002074 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	61da      	str	r2, [r3, #28]
 8002066:	e005      	b.n	8002074 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d106      	bne.n	8002094 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7fe fd88 	bl	8000ba4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2202      	movs	r2, #2
 8002098:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f8:	ea42 0103 	orr.w	r1, r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002100:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	0c1b      	lsrs	r3, r3, #16
 8002112:	f003 0104 	and.w	r1, r3, #4
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	f003 0210 	and.w	r2, r3, #16
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	69da      	ldr	r2, [r3, #28]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002134:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b088      	sub	sp, #32
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	603b      	str	r3, [r7, #0]
 800215a:	4613      	mov	r3, r2
 800215c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_SPI_Transmit+0x22>
 800216c:	2302      	movs	r3, #2
 800216e:	e126      	b.n	80023be <HAL_SPI_Transmit+0x270>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002178:	f7fe fee4 	bl	8000f44 <HAL_GetTick>
 800217c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b01      	cmp	r3, #1
 800218c:	d002      	beq.n	8002194 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800218e:	2302      	movs	r3, #2
 8002190:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002192:	e10b      	b.n	80023ac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <HAL_SPI_Transmit+0x52>
 800219a:	88fb      	ldrh	r3, [r7, #6]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d102      	bne.n	80021a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021a4:	e102      	b.n	80023ac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2203      	movs	r2, #3
 80021aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	88fa      	ldrh	r2, [r7, #6]
 80021be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	88fa      	ldrh	r2, [r7, #6]
 80021c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021ec:	d10f      	bne.n	800220e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800220c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002218:	2b40      	cmp	r3, #64	; 0x40
 800221a:	d007      	beq.n	800222c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800222a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002234:	d14b      	bne.n	80022ce <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <HAL_SPI_Transmit+0xf6>
 800223e:	8afb      	ldrh	r3, [r7, #22]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d13e      	bne.n	80022c2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	881a      	ldrh	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	1c9a      	adds	r2, r3, #2
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800225e:	b29b      	uxth	r3, r3
 8002260:	3b01      	subs	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002268:	e02b      	b.n	80022c2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b02      	cmp	r3, #2
 8002276:	d112      	bne.n	800229e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	881a      	ldrh	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002288:	1c9a      	adds	r2, r3, #2
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002292:	b29b      	uxth	r3, r3
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	86da      	strh	r2, [r3, #54]	; 0x36
 800229c:	e011      	b.n	80022c2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800229e:	f7fe fe51 	bl	8000f44 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d803      	bhi.n	80022b6 <HAL_SPI_Transmit+0x168>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b4:	d102      	bne.n	80022bc <HAL_SPI_Transmit+0x16e>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d102      	bne.n	80022c2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022c0:	e074      	b.n	80023ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1ce      	bne.n	800226a <HAL_SPI_Transmit+0x11c>
 80022cc:	e04c      	b.n	8002368 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d002      	beq.n	80022dc <HAL_SPI_Transmit+0x18e>
 80022d6:	8afb      	ldrh	r3, [r7, #22]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d140      	bne.n	800235e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	330c      	adds	r3, #12
 80022e6:	7812      	ldrb	r2, [r2, #0]
 80022e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002302:	e02c      	b.n	800235e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b02      	cmp	r3, #2
 8002310:	d113      	bne.n	800233a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	330c      	adds	r3, #12
 800231c:	7812      	ldrb	r2, [r2, #0]
 800231e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	1c5a      	adds	r2, r3, #1
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800232e:	b29b      	uxth	r3, r3
 8002330:	3b01      	subs	r3, #1
 8002332:	b29a      	uxth	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	86da      	strh	r2, [r3, #54]	; 0x36
 8002338:	e011      	b.n	800235e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800233a:	f7fe fe03 	bl	8000f44 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d803      	bhi.n	8002352 <HAL_SPI_Transmit+0x204>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002350:	d102      	bne.n	8002358 <HAL_SPI_Transmit+0x20a>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d102      	bne.n	800235e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800235c:	e026      	b.n	80023ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002362:	b29b      	uxth	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1cd      	bne.n	8002304 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	6839      	ldr	r1, [r7, #0]
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 f9d1 	bl	8002714 <SPI_EndRxTxTransaction>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2220      	movs	r2, #32
 800237c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10a      	bne.n	800239c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	77fb      	strb	r3, [r7, #31]
 80023a8:	e000      	b.n	80023ac <HAL_SPI_Transmit+0x25e>
  }

error:
 80023aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3720      	adds	r7, #32
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	099b      	lsrs	r3, r3, #6
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10f      	bne.n	800240c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00a      	beq.n	800240c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	099b      	lsrs	r3, r3, #6
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d004      	beq.n	800240c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	4798      	blx	r3
    return;
 800240a:	e0d7      	b.n	80025bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	085b      	lsrs	r3, r3, #1
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00a      	beq.n	800242e <HAL_SPI_IRQHandler+0x66>
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	09db      	lsrs	r3, r3, #7
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d004      	beq.n	800242e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	4798      	blx	r3
    return;
 800242c:	e0c6      	b.n	80025bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	095b      	lsrs	r3, r3, #5
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10c      	bne.n	8002454 <HAL_SPI_IRQHandler+0x8c>
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	099b      	lsrs	r3, r3, #6
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d106      	bne.n	8002454 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 80b4 	beq.w	80025bc <HAL_SPI_IRQHandler+0x1f4>
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 80ad 	beq.w	80025bc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	099b      	lsrs	r3, r3, #6
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d023      	beq.n	80024b6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b03      	cmp	r3, #3
 8002478:	d011      	beq.n	800249e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247e:	f043 0204 	orr.w	r2, r3, #4
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	e00b      	b.n	80024b6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	693b      	ldr	r3, [r7, #16]
        return;
 80024b4:	e082      	b.n	80025bc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	095b      	lsrs	r3, r3, #5
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d014      	beq.n	80024ec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c6:	f043 0201 	orr.w	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	0a1b      	lsrs	r3, r3, #8
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00c      	beq.n	8002512 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fc:	f043 0208 	orr.w	r2, r3, #8
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002504:	2300      	movs	r3, #0
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002516:	2b00      	cmp	r3, #0
 8002518:	d04f      	beq.n	80025ba <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002528:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d104      	bne.n	8002546 <HAL_SPI_IRQHandler+0x17e>
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d034      	beq.n	80025b0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0203 	bic.w	r2, r2, #3
 8002554:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255a:	2b00      	cmp	r3, #0
 800255c:	d011      	beq.n	8002582 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002562:	4a18      	ldr	r2, [pc, #96]	; (80025c4 <HAL_SPI_IRQHandler+0x1fc>)
 8002564:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe fe2b 	bl	80011c6 <HAL_DMA_Abort_IT>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d005      	beq.n	8002582 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002586:	2b00      	cmp	r3, #0
 8002588:	d016      	beq.n	80025b8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800258e:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <HAL_SPI_IRQHandler+0x1fc>)
 8002590:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fe15 	bl	80011c6 <HAL_DMA_Abort_IT>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80025ae:	e003      	b.n	80025b8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f809 	bl	80025c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80025b6:	e000      	b.n	80025ba <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80025b8:	bf00      	nop
    return;
 80025ba:	bf00      	nop
  }
}
 80025bc:	3720      	adds	r7, #32
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	080025dd 	.word	0x080025dd

080025c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f7ff ffe6 	bl	80025c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80025fc:	bf00      	nop
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	4613      	mov	r3, r2
 8002612:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002614:	f7fe fc96 	bl	8000f44 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261c:	1a9b      	subs	r3, r3, r2
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	4413      	add	r3, r2
 8002622:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002624:	f7fe fc8e 	bl	8000f44 <HAL_GetTick>
 8002628:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800262a:	4b39      	ldr	r3, [pc, #228]	; (8002710 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	015b      	lsls	r3, r3, #5
 8002630:	0d1b      	lsrs	r3, r3, #20
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	fb02 f303 	mul.w	r3, r2, r3
 8002638:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800263a:	e054      	b.n	80026e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002642:	d050      	beq.n	80026e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002644:	f7fe fc7e 	bl	8000f44 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	69fa      	ldr	r2, [r7, #28]
 8002650:	429a      	cmp	r2, r3
 8002652:	d902      	bls.n	800265a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d13d      	bne.n	80026d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002668:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002672:	d111      	bne.n	8002698 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800267c:	d004      	beq.n	8002688 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002686:	d107      	bne.n	8002698 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002696:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a0:	d10f      	bne.n	80026c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e017      	b.n	8002706 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	4013      	ands	r3, r2
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	bf0c      	ite	eq
 80026f6:	2301      	moveq	r3, #1
 80026f8:	2300      	movne	r3, #0
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	429a      	cmp	r2, r3
 8002702:	d19b      	bne.n	800263c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3720      	adds	r7, #32
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000228 	.word	0x20000228

08002714 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af02      	add	r7, sp, #8
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002720:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <SPI_EndRxTxTransaction+0x7c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a1b      	ldr	r2, [pc, #108]	; (8002794 <SPI_EndRxTxTransaction+0x80>)
 8002726:	fba2 2303 	umull	r2, r3, r2, r3
 800272a:	0d5b      	lsrs	r3, r3, #21
 800272c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002730:	fb02 f303 	mul.w	r3, r2, r3
 8002734:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800273e:	d112      	bne.n	8002766 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2200      	movs	r2, #0
 8002748:	2180      	movs	r1, #128	; 0x80
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f7ff ff5a 	bl	8002604 <SPI_WaitFlagStateUntilTimeout>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d016      	beq.n	8002784 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275a:	f043 0220 	orr.w	r2, r3, #32
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e00f      	b.n	8002786 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00a      	beq.n	8002782 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	3b01      	subs	r3, #1
 8002770:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277c:	2b80      	cmp	r3, #128	; 0x80
 800277e:	d0f2      	beq.n	8002766 <SPI_EndRxTxTransaction+0x52>
 8002780:	e000      	b.n	8002784 <SPI_EndRxTxTransaction+0x70>
        break;
 8002782:	bf00      	nop
  }

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000228 	.word	0x20000228
 8002794:	165e9f81 	.word	0x165e9f81

08002798 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e03f      	b.n	800282a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d106      	bne.n	80027c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7fe fae8 	bl	8000d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2224      	movs	r2, #36	; 0x24
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f829 	bl	8002834 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695a      	ldr	r2, [r3, #20]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002800:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002810:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002838:	b09f      	sub	sp, #124	; 0x7c
 800283a:	af00      	add	r7, sp, #0
 800283c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800283e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800284a:	68d9      	ldr	r1, [r3, #12]
 800284c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	ea40 0301 	orr.w	r3, r0, r1
 8002854:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	431a      	orrs	r2, r3
 8002860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	431a      	orrs	r2, r3
 8002866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	4313      	orrs	r3, r2
 800286c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800286e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002878:	f021 010c 	bic.w	r1, r1, #12
 800287c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002882:	430b      	orrs	r3, r1
 8002884:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002892:	6999      	ldr	r1, [r3, #24]
 8002894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	ea40 0301 	orr.w	r3, r0, r1
 800289c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800289e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	4bc5      	ldr	r3, [pc, #788]	; (8002bb8 <UART_SetConfig+0x384>)
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d004      	beq.n	80028b2 <UART_SetConfig+0x7e>
 80028a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4bc3      	ldr	r3, [pc, #780]	; (8002bbc <UART_SetConfig+0x388>)
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d103      	bne.n	80028ba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028b2:	f7fe ff5f 	bl	8001774 <HAL_RCC_GetPCLK2Freq>
 80028b6:	6778      	str	r0, [r7, #116]	; 0x74
 80028b8:	e002      	b.n	80028c0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028ba:	f7fe ff47 	bl	800174c <HAL_RCC_GetPCLK1Freq>
 80028be:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028c8:	f040 80b6 	bne.w	8002a38 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028ce:	461c      	mov	r4, r3
 80028d0:	f04f 0500 	mov.w	r5, #0
 80028d4:	4622      	mov	r2, r4
 80028d6:	462b      	mov	r3, r5
 80028d8:	1891      	adds	r1, r2, r2
 80028da:	6439      	str	r1, [r7, #64]	; 0x40
 80028dc:	415b      	adcs	r3, r3
 80028de:	647b      	str	r3, [r7, #68]	; 0x44
 80028e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028e4:	1912      	adds	r2, r2, r4
 80028e6:	eb45 0303 	adc.w	r3, r5, r3
 80028ea:	f04f 0000 	mov.w	r0, #0
 80028ee:	f04f 0100 	mov.w	r1, #0
 80028f2:	00d9      	lsls	r1, r3, #3
 80028f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028f8:	00d0      	lsls	r0, r2, #3
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	1911      	adds	r1, r2, r4
 8002900:	6639      	str	r1, [r7, #96]	; 0x60
 8002902:	416b      	adcs	r3, r5
 8002904:	667b      	str	r3, [r7, #100]	; 0x64
 8002906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	461a      	mov	r2, r3
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	1891      	adds	r1, r2, r2
 8002912:	63b9      	str	r1, [r7, #56]	; 0x38
 8002914:	415b      	adcs	r3, r3
 8002916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002918:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800291c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002920:	f7fd fc70 	bl	8000204 <__aeabi_uldivmod>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4ba5      	ldr	r3, [pc, #660]	; (8002bc0 <UART_SetConfig+0x38c>)
 800292a:	fba3 2302 	umull	r2, r3, r3, r2
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	011e      	lsls	r6, r3, #4
 8002932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002934:	461c      	mov	r4, r3
 8002936:	f04f 0500 	mov.w	r5, #0
 800293a:	4622      	mov	r2, r4
 800293c:	462b      	mov	r3, r5
 800293e:	1891      	adds	r1, r2, r2
 8002940:	6339      	str	r1, [r7, #48]	; 0x30
 8002942:	415b      	adcs	r3, r3
 8002944:	637b      	str	r3, [r7, #52]	; 0x34
 8002946:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800294a:	1912      	adds	r2, r2, r4
 800294c:	eb45 0303 	adc.w	r3, r5, r3
 8002950:	f04f 0000 	mov.w	r0, #0
 8002954:	f04f 0100 	mov.w	r1, #0
 8002958:	00d9      	lsls	r1, r3, #3
 800295a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800295e:	00d0      	lsls	r0, r2, #3
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	1911      	adds	r1, r2, r4
 8002966:	65b9      	str	r1, [r7, #88]	; 0x58
 8002968:	416b      	adcs	r3, r5
 800296a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800296c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	461a      	mov	r2, r3
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	1891      	adds	r1, r2, r2
 8002978:	62b9      	str	r1, [r7, #40]	; 0x28
 800297a:	415b      	adcs	r3, r3
 800297c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800297e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002982:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002986:	f7fd fc3d 	bl	8000204 <__aeabi_uldivmod>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4b8c      	ldr	r3, [pc, #560]	; (8002bc0 <UART_SetConfig+0x38c>)
 8002990:	fba3 1302 	umull	r1, r3, r3, r2
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	2164      	movs	r1, #100	; 0x64
 8002998:	fb01 f303 	mul.w	r3, r1, r3
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	3332      	adds	r3, #50	; 0x32
 80029a2:	4a87      	ldr	r2, [pc, #540]	; (8002bc0 <UART_SetConfig+0x38c>)
 80029a4:	fba2 2303 	umull	r2, r3, r2, r3
 80029a8:	095b      	lsrs	r3, r3, #5
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029b0:	441e      	add	r6, r3
 80029b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029b4:	4618      	mov	r0, r3
 80029b6:	f04f 0100 	mov.w	r1, #0
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	1894      	adds	r4, r2, r2
 80029c0:	623c      	str	r4, [r7, #32]
 80029c2:	415b      	adcs	r3, r3
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
 80029c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029ca:	1812      	adds	r2, r2, r0
 80029cc:	eb41 0303 	adc.w	r3, r1, r3
 80029d0:	f04f 0400 	mov.w	r4, #0
 80029d4:	f04f 0500 	mov.w	r5, #0
 80029d8:	00dd      	lsls	r5, r3, #3
 80029da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80029de:	00d4      	lsls	r4, r2, #3
 80029e0:	4622      	mov	r2, r4
 80029e2:	462b      	mov	r3, r5
 80029e4:	1814      	adds	r4, r2, r0
 80029e6:	653c      	str	r4, [r7, #80]	; 0x50
 80029e8:	414b      	adcs	r3, r1
 80029ea:	657b      	str	r3, [r7, #84]	; 0x54
 80029ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	461a      	mov	r2, r3
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	1891      	adds	r1, r2, r2
 80029f8:	61b9      	str	r1, [r7, #24]
 80029fa:	415b      	adcs	r3, r3
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a02:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002a06:	f7fd fbfd 	bl	8000204 <__aeabi_uldivmod>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	4b6c      	ldr	r3, [pc, #432]	; (8002bc0 <UART_SetConfig+0x38c>)
 8002a10:	fba3 1302 	umull	r1, r3, r3, r2
 8002a14:	095b      	lsrs	r3, r3, #5
 8002a16:	2164      	movs	r1, #100	; 0x64
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	3332      	adds	r3, #50	; 0x32
 8002a22:	4a67      	ldr	r2, [pc, #412]	; (8002bc0 <UART_SetConfig+0x38c>)
 8002a24:	fba2 2303 	umull	r2, r3, r2, r3
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	f003 0207 	and.w	r2, r3, #7
 8002a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4432      	add	r2, r6
 8002a34:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a36:	e0b9      	b.n	8002bac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a3a:	461c      	mov	r4, r3
 8002a3c:	f04f 0500 	mov.w	r5, #0
 8002a40:	4622      	mov	r2, r4
 8002a42:	462b      	mov	r3, r5
 8002a44:	1891      	adds	r1, r2, r2
 8002a46:	6139      	str	r1, [r7, #16]
 8002a48:	415b      	adcs	r3, r3
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a50:	1912      	adds	r2, r2, r4
 8002a52:	eb45 0303 	adc.w	r3, r5, r3
 8002a56:	f04f 0000 	mov.w	r0, #0
 8002a5a:	f04f 0100 	mov.w	r1, #0
 8002a5e:	00d9      	lsls	r1, r3, #3
 8002a60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a64:	00d0      	lsls	r0, r2, #3
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	eb12 0804 	adds.w	r8, r2, r4
 8002a6e:	eb43 0905 	adc.w	r9, r3, r5
 8002a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f04f 0100 	mov.w	r1, #0
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	008b      	lsls	r3, r1, #2
 8002a86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a8a:	0082      	lsls	r2, r0, #2
 8002a8c:	4640      	mov	r0, r8
 8002a8e:	4649      	mov	r1, r9
 8002a90:	f7fd fbb8 	bl	8000204 <__aeabi_uldivmod>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4b49      	ldr	r3, [pc, #292]	; (8002bc0 <UART_SetConfig+0x38c>)
 8002a9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	011e      	lsls	r6, r3, #4
 8002aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f04f 0100 	mov.w	r1, #0
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	1894      	adds	r4, r2, r2
 8002ab0:	60bc      	str	r4, [r7, #8]
 8002ab2:	415b      	adcs	r3, r3
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002aba:	1812      	adds	r2, r2, r0
 8002abc:	eb41 0303 	adc.w	r3, r1, r3
 8002ac0:	f04f 0400 	mov.w	r4, #0
 8002ac4:	f04f 0500 	mov.w	r5, #0
 8002ac8:	00dd      	lsls	r5, r3, #3
 8002aca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ace:	00d4      	lsls	r4, r2, #3
 8002ad0:	4622      	mov	r2, r4
 8002ad2:	462b      	mov	r3, r5
 8002ad4:	1814      	adds	r4, r2, r0
 8002ad6:	64bc      	str	r4, [r7, #72]	; 0x48
 8002ad8:	414b      	adcs	r3, r1
 8002ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f04f 0100 	mov.w	r1, #0
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	008b      	lsls	r3, r1, #2
 8002af0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002af4:	0082      	lsls	r2, r0, #2
 8002af6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002afa:	f7fd fb83 	bl	8000204 <__aeabi_uldivmod>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4b2f      	ldr	r3, [pc, #188]	; (8002bc0 <UART_SetConfig+0x38c>)
 8002b04:	fba3 1302 	umull	r1, r3, r3, r2
 8002b08:	095b      	lsrs	r3, r3, #5
 8002b0a:	2164      	movs	r1, #100	; 0x64
 8002b0c:	fb01 f303 	mul.w	r3, r1, r3
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	3332      	adds	r3, #50	; 0x32
 8002b16:	4a2a      	ldr	r2, [pc, #168]	; (8002bc0 <UART_SetConfig+0x38c>)
 8002b18:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1c:	095b      	lsrs	r3, r3, #5
 8002b1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b22:	441e      	add	r6, r3
 8002b24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b26:	4618      	mov	r0, r3
 8002b28:	f04f 0100 	mov.w	r1, #0
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	1894      	adds	r4, r2, r2
 8002b32:	603c      	str	r4, [r7, #0]
 8002b34:	415b      	adcs	r3, r3
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b3c:	1812      	adds	r2, r2, r0
 8002b3e:	eb41 0303 	adc.w	r3, r1, r3
 8002b42:	f04f 0400 	mov.w	r4, #0
 8002b46:	f04f 0500 	mov.w	r5, #0
 8002b4a:	00dd      	lsls	r5, r3, #3
 8002b4c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b50:	00d4      	lsls	r4, r2, #3
 8002b52:	4622      	mov	r2, r4
 8002b54:	462b      	mov	r3, r5
 8002b56:	eb12 0a00 	adds.w	sl, r2, r0
 8002b5a:	eb43 0b01 	adc.w	fp, r3, r1
 8002b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f04f 0100 	mov.w	r1, #0
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	008b      	lsls	r3, r1, #2
 8002b72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b76:	0082      	lsls	r2, r0, #2
 8002b78:	4650      	mov	r0, sl
 8002b7a:	4659      	mov	r1, fp
 8002b7c:	f7fd fb42 	bl	8000204 <__aeabi_uldivmod>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <UART_SetConfig+0x38c>)
 8002b86:	fba3 1302 	umull	r1, r3, r3, r2
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	2164      	movs	r1, #100	; 0x64
 8002b8e:	fb01 f303 	mul.w	r3, r1, r3
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	3332      	adds	r3, #50	; 0x32
 8002b98:	4a09      	ldr	r2, [pc, #36]	; (8002bc0 <UART_SetConfig+0x38c>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	f003 020f 	and.w	r2, r3, #15
 8002ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4432      	add	r2, r6
 8002baa:	609a      	str	r2, [r3, #8]
}
 8002bac:	bf00      	nop
 8002bae:	377c      	adds	r7, #124	; 0x7c
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40011000 	.word	0x40011000
 8002bbc:	40011400 	.word	0x40011400
 8002bc0:	51eb851f 	.word	0x51eb851f

08002bc4 <__libc_init_array>:
 8002bc4:	b570      	push	{r4, r5, r6, lr}
 8002bc6:	4d0d      	ldr	r5, [pc, #52]	; (8002bfc <__libc_init_array+0x38>)
 8002bc8:	4c0d      	ldr	r4, [pc, #52]	; (8002c00 <__libc_init_array+0x3c>)
 8002bca:	1b64      	subs	r4, r4, r5
 8002bcc:	10a4      	asrs	r4, r4, #2
 8002bce:	2600      	movs	r6, #0
 8002bd0:	42a6      	cmp	r6, r4
 8002bd2:	d109      	bne.n	8002be8 <__libc_init_array+0x24>
 8002bd4:	4d0b      	ldr	r5, [pc, #44]	; (8002c04 <__libc_init_array+0x40>)
 8002bd6:	4c0c      	ldr	r4, [pc, #48]	; (8002c08 <__libc_init_array+0x44>)
 8002bd8:	f000 f820 	bl	8002c1c <_init>
 8002bdc:	1b64      	subs	r4, r4, r5
 8002bde:	10a4      	asrs	r4, r4, #2
 8002be0:	2600      	movs	r6, #0
 8002be2:	42a6      	cmp	r6, r4
 8002be4:	d105      	bne.n	8002bf2 <__libc_init_array+0x2e>
 8002be6:	bd70      	pop	{r4, r5, r6, pc}
 8002be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bec:	4798      	blx	r3
 8002bee:	3601      	adds	r6, #1
 8002bf0:	e7ee      	b.n	8002bd0 <__libc_init_array+0xc>
 8002bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf6:	4798      	blx	r3
 8002bf8:	3601      	adds	r6, #1
 8002bfa:	e7f2      	b.n	8002be2 <__libc_init_array+0x1e>
 8002bfc:	08002c70 	.word	0x08002c70
 8002c00:	08002c70 	.word	0x08002c70
 8002c04:	08002c70 	.word	0x08002c70
 8002c08:	08002c74 	.word	0x08002c74

08002c0c <memset>:
 8002c0c:	4402      	add	r2, r0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d100      	bne.n	8002c16 <memset+0xa>
 8002c14:	4770      	bx	lr
 8002c16:	f803 1b01 	strb.w	r1, [r3], #1
 8002c1a:	e7f9      	b.n	8002c10 <memset+0x4>

08002c1c <_init>:
 8002c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1e:	bf00      	nop
 8002c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c22:	bc08      	pop	{r3}
 8002c24:	469e      	mov	lr, r3
 8002c26:	4770      	bx	lr

08002c28 <_fini>:
 8002c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2a:	bf00      	nop
 8002c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c2e:	bc08      	pop	{r3}
 8002c30:	469e      	mov	lr, r3
 8002c32:	4770      	bx	lr
