
DISPLAY NOKIA SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000396c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08003b3c  08003b3c  00013b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003db0  08003db0  00020298  2**0
                  CONTENTS
  4 .ARM          00000008  08003db0  08003db0  00013db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003db8  08003db8  00020298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003db8  08003db8  00013db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dbc  08003dbc  00013dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  08003dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d14  20000298  08004058  00020298  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fac  08004058  00020fac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6b2  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f8  00000000  00000000  0002e97a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  00030c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  00031680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021f5a  00000000  00000000  00031fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db35  00000000  00000000  00053efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cad9d  00000000  00000000  00061a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012c7cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b64  00000000  00000000  0012c820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000298 	.word	0x20000298
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003b24 	.word	0x08003b24

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000029c 	.word	0x2000029c
 800020c:	08003b24 	.word	0x08003b24

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <LCD_write_bloque>:

//Define the hardware operation function
void LCD5110_RST(unsigned char temp);

HAL_StatusTypeDef LCD_write_bloque(BufferCompartilhado_t *b, uint8_t mode) //manda UM BLOCO (de qqr tamanho) PARA O DISPLAY
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	460b      	mov	r3, r1
 80005b2:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status;

	//Ativa (desliga) CS
	HAL_GPIO_WritePin(lcd->CS_Port, lcd->CS_Pin, 0);
 80005b4:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <LCD_write_bloque+0x78>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	6898      	ldr	r0, [r3, #8]
 80005ba:	4b19      	ldr	r3, [pc, #100]	; (8000620 <LCD_write_bloque+0x78>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	899b      	ldrh	r3, [r3, #12]
 80005c0:	2200      	movs	r2, #0
 80005c2:	4619      	mov	r1, r3
 80005c4:	f001 f9d4 	bl	8001970 <HAL_GPIO_WritePin>

	//Seleção dados/comando
	HAL_GPIO_WritePin(lcd->DC_Port, lcd->DC_Pin, mode);
 80005c8:	4b15      	ldr	r3, [pc, #84]	; (8000620 <LCD_write_bloque+0x78>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	6918      	ldr	r0, [r3, #16]
 80005ce:	4b14      	ldr	r3, [pc, #80]	; (8000620 <LCD_write_bloque+0x78>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	8a9b      	ldrh	r3, [r3, #20]
 80005d4:	78fa      	ldrb	r2, [r7, #3]
 80005d6:	4619      	mov	r1, r3
 80005d8:	f001 f9ca 	bl	8001970 <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit(lcd->hspi, b->dado, b->ocupacao, SPI_TIMEOUT);
 80005dc:	4b10      	ldr	r3, [pc, #64]	; (8000620 <LCD_write_bloque+0x78>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	6818      	ldr	r0, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6819      	ldr	r1, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	88da      	ldrh	r2, [r3, #6]
 80005ea:	f247 5330 	movw	r3, #30000	; 0x7530
 80005ee:	f001 ffcc 	bl	800258a <HAL_SPI_Transmit>
 80005f2:	4603      	mov	r3, r0
 80005f4:	73fb      	strb	r3, [r7, #15]

	//Fim da transf.
	HAL_GPIO_WritePin(lcd->CS_Port, lcd->CS_Pin, 1);
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <LCD_write_bloque+0x78>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	6898      	ldr	r0, [r3, #8]
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <LCD_write_bloque+0x78>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	899b      	ldrh	r3, [r3, #12]
 8000602:	2201      	movs	r2, #1
 8000604:	4619      	mov	r1, r3
 8000606:	f001 f9b3 	bl	8001970 <HAL_GPIO_WritePin>

	b->estado=B_FREE;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2200      	movs	r2, #0
 800060e:	711a      	strb	r2, [r3, #4]
	b->dado = buffer;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4a04      	ldr	r2, [pc, #16]	; (8000624 <LCD_write_bloque+0x7c>)
 8000614:	601a      	str	r2, [r3, #0]
	return status;
 8000616:	7bfb      	ldrb	r3, [r7, #15]

}
 8000618:	4618      	mov	r0, r3
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200002b4 	.word	0x200002b4
 8000624:	200002b8 	.word	0x200002b8

08000628 <LCD_write_IT>:
HAL_StatusTypeDef LCD_write_IT(BufferCompartilhado_t *b, uint8_t mode) //manda UM BLOCO (de qqr tamanho) PARA O DISPLAY
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status;

	if (lcd->hspi->State != HAL_SPI_STATE_READY)
 8000634:	4b18      	ldr	r3, [pc, #96]	; (8000698 <LCD_write_IT+0x70>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800063e:	b2db      	uxtb	r3, r3
 8000640:	2b01      	cmp	r3, #1
 8000642:	d001      	beq.n	8000648 <LCD_write_IT+0x20>
		return HAL_BUSY;
 8000644:	2302      	movs	r3, #2
 8000646:	e023      	b.n	8000690 <LCD_write_IT+0x68>
	buff_atual = b;
 8000648:	4a14      	ldr	r2, [pc, #80]	; (800069c <LCD_write_IT+0x74>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6013      	str	r3, [r2, #0]

	//Ativa (desliga) CS (chipselect)
	HAL_GPIO_WritePin(lcd->CS_Port, lcd->CS_Pin, 0);
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <LCD_write_IT+0x70>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	6898      	ldr	r0, [r3, #8]
 8000654:	4b10      	ldr	r3, [pc, #64]	; (8000698 <LCD_write_IT+0x70>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	899b      	ldrh	r3, [r3, #12]
 800065a:	2200      	movs	r2, #0
 800065c:	4619      	mov	r1, r3
 800065e:	f001 f987 	bl	8001970 <HAL_GPIO_WritePin>
	//Seleção dados/comando
	HAL_GPIO_WritePin(lcd->DC_Port, lcd->DC_Pin, mode);
 8000662:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <LCD_write_IT+0x70>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	6918      	ldr	r0, [r3, #16]
 8000668:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <LCD_write_IT+0x70>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	8a9b      	ldrh	r3, [r3, #20]
 800066e:	78fa      	ldrb	r2, [r7, #3]
 8000670:	4619      	mov	r1, r3
 8000672:	f001 f97d 	bl	8001970 <HAL_GPIO_WritePin>

	//envia dado
	status = HAL_SPI_Transmit_IT(lcd->hspi, b->dado, b->ocupacao);
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <LCD_write_IT+0x70>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	6818      	ldr	r0, [r3, #0]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	6819      	ldr	r1, [r3, #0]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	88db      	ldrh	r3, [r3, #6]
 8000684:	461a      	mov	r2, r3
 8000686:	f002 f8bd 	bl	8002804 <HAL_SPI_Transmit_IT>
 800068a:	4603      	mov	r3, r0
 800068c:	73fb      	strb	r3, [r7, #15]

	return status;
 800068e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000690:	4618      	mov	r0, r3
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200002b4 	.word	0x200002b4
 800069c:	200004b8 	.word	0x200004b8

080006a0 <LCD_write_DMA>:


HAL_StatusTypeDef LCD_write_DMA(BufferCompartilhado_t *b, uint8_t mode) //manda UM BLOCO (de qqr tamanho) PARA O DISPLAY
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status;

	if (lcd->hspi->State != HAL_SPI_STATE_READY)
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <LCD_write_DMA+0x70>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d001      	beq.n	80006c0 <LCD_write_DMA+0x20>
		return HAL_BUSY;
 80006bc:	2302      	movs	r3, #2
 80006be:	e023      	b.n	8000708 <LCD_write_DMA+0x68>
	buff_atual = b;
 80006c0:	4a14      	ldr	r2, [pc, #80]	; (8000714 <LCD_write_DMA+0x74>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6013      	str	r3, [r2, #0]

	//Ativa (desliga) CS (chipselect)
	HAL_GPIO_WritePin(lcd->CS_Port, lcd->CS_Pin, 0);
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <LCD_write_DMA+0x70>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	6898      	ldr	r0, [r3, #8]
 80006cc:	4b10      	ldr	r3, [pc, #64]	; (8000710 <LCD_write_DMA+0x70>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	899b      	ldrh	r3, [r3, #12]
 80006d2:	2200      	movs	r2, #0
 80006d4:	4619      	mov	r1, r3
 80006d6:	f001 f94b 	bl	8001970 <HAL_GPIO_WritePin>
	//Seleção dados/comando
	HAL_GPIO_WritePin(lcd->DC_Port, lcd->DC_Pin, mode);
 80006da:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <LCD_write_DMA+0x70>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	6918      	ldr	r0, [r3, #16]
 80006e0:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <LCD_write_DMA+0x70>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	8a9b      	ldrh	r3, [r3, #20]
 80006e6:	78fa      	ldrb	r2, [r7, #3]
 80006e8:	4619      	mov	r1, r3
 80006ea:	f001 f941 	bl	8001970 <HAL_GPIO_WritePin>

	//envia dado
	status = HAL_SPI_Transmit_IT(lcd->hspi, b->dado, b->ocupacao);
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <LCD_write_DMA+0x70>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	6818      	ldr	r0, [r3, #0]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6819      	ldr	r1, [r3, #0]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	88db      	ldrh	r3, [r3, #6]
 80006fc:	461a      	mov	r2, r3
 80006fe:	f002 f881 	bl	8002804 <HAL_SPI_Transmit_IT>
 8000702:	4603      	mov	r3, r0
 8000704:	73fb      	strb	r3, [r7, #15]

	return status;
 8000706:	7bfb      	ldrb	r3, [r7, #15]

}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200002b4 	.word	0x200002b4
 8000714:	200004b8 	.word	0x200004b8

08000718 <LCD5110_init>:

void LCD5110_init(LCD_HandleTypeDef *hlcd5110) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	lcd = hlcd5110;
 8000720:	4a44      	ldr	r2, [pc, #272]	; (8000834 <LCD5110_init+0x11c>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6013      	str	r3, [r2, #0]
	//preenche com zeros array para clearScream
	for (int i = 0; i < TAM_TELA; i++) {
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	e007      	b.n	800073c <LCD5110_init+0x24>
		telaLimpa[i] = 0;
 800072c:	4a42      	ldr	r2, [pc, #264]	; (8000838 <LCD5110_init+0x120>)
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	4413      	add	r3, r2
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < TAM_TELA; i++) {
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3301      	adds	r3, #1
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000742:	dbf3      	blt.n	800072c <LCD5110_init+0x14>
	}

	buf.dado = buffer;
 8000744:	4b3d      	ldr	r3, [pc, #244]	; (800083c <LCD5110_init+0x124>)
 8000746:	4a3e      	ldr	r2, [pc, #248]	; (8000840 <LCD5110_init+0x128>)
 8000748:	601a      	str	r2, [r3, #0]
	buf.ocupacao = 0;
 800074a:	4b3c      	ldr	r3, [pc, #240]	; (800083c <LCD5110_init+0x124>)
 800074c:	2200      	movs	r2, #0
 800074e:	80da      	strh	r2, [r3, #6]
	buf.estado = B_FREE;
 8000750:	4b3a      	ldr	r3, [pc, #232]	; (800083c <LCD5110_init+0x124>)
 8000752:	2200      	movs	r2, #0
 8000754:	711a      	strb	r2, [r3, #4]

	//!Aponta a função write para a operação específica
	switch(lcd->modo){
 8000756:	4b37      	ldr	r3, [pc, #220]	; (8000834 <LCD5110_init+0x11c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	2b02      	cmp	r3, #2
 800075e:	d011      	beq.n	8000784 <LCD5110_init+0x6c>
 8000760:	2b02      	cmp	r3, #2
 8000762:	dc03      	bgt.n	800076c <LCD5110_init+0x54>
 8000764:	2b00      	cmp	r3, #0
 8000766:	d005      	beq.n	8000774 <LCD5110_init+0x5c>
 8000768:	2b01      	cmp	r3, #1
 800076a:	d007      	beq.n	800077c <LCD5110_init+0x64>
	default:
		LCD_write = LCD_write_bloque;
 800076c:	4b35      	ldr	r3, [pc, #212]	; (8000844 <LCD5110_init+0x12c>)
 800076e:	4a36      	ldr	r2, [pc, #216]	; (8000848 <LCD5110_init+0x130>)
 8000770:	601a      	str	r2, [r3, #0]
		break;
 8000772:	e00b      	b.n	800078c <LCD5110_init+0x74>
	case LCD_BLOCK:
		LCD_write = LCD_write_bloque;
 8000774:	4b33      	ldr	r3, [pc, #204]	; (8000844 <LCD5110_init+0x12c>)
 8000776:	4a34      	ldr	r2, [pc, #208]	; (8000848 <LCD5110_init+0x130>)
 8000778:	601a      	str	r2, [r3, #0]
		break;
 800077a:	e007      	b.n	800078c <LCD5110_init+0x74>
	case LCD_IT:
		LCD_write = LCD_write_IT;
 800077c:	4b31      	ldr	r3, [pc, #196]	; (8000844 <LCD5110_init+0x12c>)
 800077e:	4a33      	ldr	r2, [pc, #204]	; (800084c <LCD5110_init+0x134>)
 8000780:	601a      	str	r2, [r3, #0]
		break;
 8000782:	e003      	b.n	800078c <LCD5110_init+0x74>
	case LCD_DMA:
		LCD_write = LCD_write_DMA;
 8000784:	4b2f      	ldr	r3, [pc, #188]	; (8000844 <LCD5110_init+0x12c>)
 8000786:	4a32      	ldr	r2, [pc, #200]	; (8000850 <LCD5110_init+0x138>)
 8000788:	601a      	str	r2, [r3, #0]
		break;
 800078a:	bf00      	nop
	}

	//garante que a função de callback comece nula (segurança)
	lcd->TxCpltCallback=NULL;
 800078c:	4b29      	ldr	r3, [pc, #164]	; (8000834 <LCD5110_init+0x11c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]

	HAL_GPIO_WritePin(lcd->DC_Port, lcd->DC_Pin, 1);
 8000794:	4b27      	ldr	r3, [pc, #156]	; (8000834 <LCD5110_init+0x11c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	6918      	ldr	r0, [r3, #16]
 800079a:	4b26      	ldr	r3, [pc, #152]	; (8000834 <LCD5110_init+0x11c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	8a9b      	ldrh	r3, [r3, #20]
 80007a0:	2201      	movs	r2, #1
 80007a2:	4619      	mov	r1, r3
 80007a4:	f001 f8e4 	bl	8001970 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->CS_Port, lcd->CS_Pin, 1);
 80007a8:	4b22      	ldr	r3, [pc, #136]	; (8000834 <LCD5110_init+0x11c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	6898      	ldr	r0, [r3, #8]
 80007ae:	4b21      	ldr	r3, [pc, #132]	; (8000834 <LCD5110_init+0x11c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	899b      	ldrh	r3, [r3, #12]
 80007b4:	2201      	movs	r2, #1
 80007b6:	4619      	mov	r1, r3
 80007b8:	f001 f8da 	bl	8001970 <HAL_GPIO_WritePin>

	LCD5110_RST(0); //LCD_RST = 0;
 80007bc:	2000      	movs	r0, #0
 80007be:	f000 f9ad 	bl	8000b1c <LCD5110_RST>
	LCD5110_LCD_delay_ms(10);
 80007c2:	200a      	movs	r0, #10
 80007c4:	f000 f9c8 	bl	8000b58 <LCD5110_LCD_delay_ms>
	LCD5110_RST(1); //LCD_RST = 1;
 80007c8:	2001      	movs	r0, #1
 80007ca:	f000 f9a7 	bl	8000b1c <LCD5110_RST>


	while(LCD5110_clear()!=HAL_OK);
 80007ce:	bf00      	nop
 80007d0:	f000 f916 	bl	8000a00 <LCD5110_clear>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d1fa      	bne.n	80007d0 <LCD5110_init+0xb8>
	buffer[0] = LCD5110_FUNCTIONSET | LCD5110_EXTENDEDINSTRUCTION; //x21
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <LCD5110_init+0x128>)
 80007dc:	2221      	movs	r2, #33	; 0x21
 80007de:	701a      	strb	r2, [r3, #0]
	buffer[1] = LCD5110_SETVOP | LCD_CONTRASTE; //C0
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <LCD5110_init+0x128>)
 80007e2:	22c0      	movs	r2, #192	; 0xc0
 80007e4:	705a      	strb	r2, [r3, #1]
	buffer[2] = LCD5110_SETTEMP | LCD_TEMPERATURA; //x06
 80007e6:	4b16      	ldr	r3, [pc, #88]	; (8000840 <LCD5110_init+0x128>)
 80007e8:	2206      	movs	r2, #6
 80007ea:	709a      	strb	r2, [r3, #2]
	buffer[3] = LCD5110_SETBIAS | LCD_VALOR_BIAS; //x13
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <LCD5110_init+0x128>)
 80007ee:	2213      	movs	r2, #19
 80007f0:	70da      	strb	r2, [r3, #3]
	buffer[4] = LCD5110_FUNCTIONSET; //x20
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <LCD5110_init+0x128>)
 80007f4:	2220      	movs	r2, #32
 80007f6:	711a      	strb	r2, [r3, #4]
	buffer[5] = (LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL); //x0C
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <LCD5110_init+0x128>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	715a      	strb	r2, [r3, #5]

	while (buf.estado == B_BUSY);//garanto que o clear ja terminou
 80007fe:	bf00      	nop
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <LCD5110_init+0x124>)
 8000802:	791b      	ldrb	r3, [r3, #4]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d0fb      	beq.n	8000800 <LCD5110_init+0xe8>
	buf.ocupacao=6;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <LCD5110_init+0x124>)
 800080a:	2206      	movs	r2, #6
 800080c:	80da      	strh	r2, [r3, #6]
	buf.estado=B_BUSY;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <LCD5110_init+0x124>)
 8000810:	2201      	movs	r2, #1
 8000812:	711a      	strb	r2, [r3, #4]
	LCD_write(&buf, LCD_COMMAND);
 8000814:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <LCD5110_init+0x12c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2100      	movs	r1, #0
 800081a:	4808      	ldr	r0, [pc, #32]	; (800083c <LCD5110_init+0x124>)
 800081c:	4798      	blx	r3
	while (buf.estado == B_BUSY); //garanto que terminei a config ao final
 800081e:	bf00      	nop
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <LCD5110_init+0x124>)
 8000822:	791b      	ldrb	r3, [r3, #4]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d0fb      	beq.n	8000820 <LCD5110_init+0x108>
}
 8000828:	bf00      	nop
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200002b4 	.word	0x200002b4
 8000838:	200004d0 	.word	0x200004d0
 800083c:	200004b0 	.word	0x200004b0
 8000840:	200002b8 	.word	0x200002b8
 8000844:	200004bc 	.word	0x200004bc
 8000848:	080005a9 	.word	0x080005a9
 800084c:	08000629 	.word	0x08000629
 8000850:	080006a1 	.word	0x080006a1

08000854 <LCD5110_set_callback>:

//!função para dizer a biblioteca qual função completa o callback do spi
void LCD5110_set_callback (void *callback(SPI_HandleTypeDef *hspi))
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	lcd->TxCpltCallback=callback;
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <LCD5110_set_callback+0x1c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	619a      	str	r2, [r3, #24]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	200002b4 	.word	0x200002b4

08000874 <LCD_drawchar>:

void LCD_drawchar(char c, uint8_t *dat) //desenha o char e hospeda em dat
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	71fb      	strb	r3, [r7, #7]
	uint8_t i; //indice do desenho

	c = c - ' ';
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	3b20      	subs	r3, #32
 8000884:	71fb      	strb	r3, [r7, #7]

	for (i = 0; i < 6; i++) {
 8000886:	2300      	movs	r3, #0
 8000888:	73fb      	strb	r3, [r7, #15]
 800088a:	e011      	b.n	80008b0 <LCD_drawchar+0x3c>
		*dat = font6_8[c][i];
 800088c:	79fa      	ldrb	r2, [r7, #7]
 800088e:	7bf9      	ldrb	r1, [r7, #15]
 8000890:	480c      	ldr	r0, [pc, #48]	; (80008c4 <LCD_drawchar+0x50>)
 8000892:	4613      	mov	r3, r2
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	4413      	add	r3, r2
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	4403      	add	r3, r0
 800089c:	440b      	add	r3, r1
 800089e:	781a      	ldrb	r2, [r3, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	701a      	strb	r2, [r3, #0]
		dat++;
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	3301      	adds	r3, #1
 80008a8:	603b      	str	r3, [r7, #0]
	for (i = 0; i < 6; i++) {
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	3301      	adds	r3, #1
 80008ae:	73fb      	strb	r3, [r7, #15]
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	2b05      	cmp	r3, #5
 80008b4:	d9ea      	bls.n	800088c <LCD_drawchar+0x18>

	}
}
 80008b6:	bf00      	nop
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	20000000 	.word	0x20000000

080008c8 <LCD_drawchar_inv>:
void LCD_drawchar_inv(char c, uint8_t *dat) //desenha o char invertido
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	71fb      	strb	r3, [r7, #7]
	uint8_t i; //indice do desenho

	c = c - ' ';
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	3b20      	subs	r3, #32
 80008d8:	71fb      	strb	r3, [r7, #7]

	for (i = 0; i < 6; i++) {
 80008da:	2300      	movs	r3, #0
 80008dc:	73fb      	strb	r3, [r7, #15]
 80008de:	e013      	b.n	8000908 <LCD_drawchar_inv+0x40>
		*dat = ~font6_8[c][i];
 80008e0:	79fa      	ldrb	r2, [r7, #7]
 80008e2:	7bf9      	ldrb	r1, [r7, #15]
 80008e4:	480d      	ldr	r0, [pc, #52]	; (800091c <LCD_drawchar_inv+0x54>)
 80008e6:	4613      	mov	r3, r2
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	4413      	add	r3, r2
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	4403      	add	r3, r0
 80008f0:	440b      	add	r3, r1
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	43db      	mvns	r3, r3
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	701a      	strb	r2, [r3, #0]
		dat++;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	3301      	adds	r3, #1
 8000900:	603b      	str	r3, [r7, #0]
	for (i = 0; i < 6; i++) {
 8000902:	7bfb      	ldrb	r3, [r7, #15]
 8000904:	3301      	adds	r3, #1
 8000906:	73fb      	strb	r3, [r7, #15]
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	2b05      	cmp	r3, #5
 800090c:	d9e8      	bls.n	80008e0 <LCD_drawchar_inv+0x18>

	}
}
 800090e:	bf00      	nop
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	20000000 	.word	0x20000000

08000920 <LCD5110_write_char>:
HAL_StatusTypeDef LCD5110_write_char(unsigned char c, uint8_t invert) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	460a      	mov	r2, r1
 800092a:	71fb      	strb	r3, [r7, #7]
 800092c:	4613      	mov	r3, r2
 800092e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint8_t *caract; //onde sera hospedado o desenho do caract.]=

	if (buf.estado == B_BUSY) //se buffer estiver ocupado, retorna estado
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <LCD5110_write_char+0x64>)
 8000932:	791b      	ldrb	r3, [r3, #4]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d101      	bne.n	800093c <LCD5110_write_char+0x1c>
		return HAL_BUSY;
 8000938:	2302      	movs	r3, #2
 800093a:	e01e      	b.n	800097a <LCD5110_write_char+0x5a>

	buf.estado = B_BUSY; //se não der o return, vira ocupado
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <LCD5110_write_char+0x64>)
 800093e:	2201      	movs	r2, #1
 8000940:	711a      	strb	r2, [r3, #4]
	caract = buf.dado;
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <LCD5110_write_char+0x64>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	60fb      	str	r3, [r7, #12]

	/*
	 * invert diz se vai inverter o caract, c é o caract
	 */
	if (invert)
 8000948:	79bb      	ldrb	r3, [r7, #6]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d005      	beq.n	800095a <LCD5110_write_char+0x3a>
		LCD_drawchar_inv(c, caract);
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	68f9      	ldr	r1, [r7, #12]
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ffb8 	bl	80008c8 <LCD_drawchar_inv>
 8000958:	e004      	b.n	8000964 <LCD5110_write_char+0x44>
	else
		LCD_drawchar(c, caract);
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	68f9      	ldr	r1, [r7, #12]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ff88 	bl	8000874 <LCD_drawchar>

	buf.ocupacao = LARG_CHAR; //atualiza o tamanho do buffer
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <LCD5110_write_char+0x64>)
 8000966:	2206      	movs	r2, #6
 8000968:	80da      	strh	r2, [r3, #6]
	status = LCD_write(&buf, LCD_DATA);
 800096a:	4b07      	ldr	r3, [pc, #28]	; (8000988 <LCD5110_write_char+0x68>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2101      	movs	r1, #1
 8000970:	4804      	ldr	r0, [pc, #16]	; (8000984 <LCD5110_write_char+0x64>)
 8000972:	4798      	blx	r3
 8000974:	4603      	mov	r3, r0
 8000976:	72fb      	strb	r3, [r7, #11]
	return status;
 8000978:	7afb      	ldrb	r3, [r7, #11]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200004b0 	.word	0x200004b0
 8000988:	200004bc 	.word	0x200004bc

0800098c <LCD5110_write_string>:

HAL_StatusTypeDef LCD5110_write_string(char *s) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]

	uint16_t tam = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	82fb      	strh	r3, [r7, #22]
	uint8_t *c;
	/*Ponteiro para onde ficará hospedada a data (desenho do
	 display (buff).
	 */
	HAL_StatusTypeDef status;
	if (buf.estado == B_BUSY) //se buffer estiver ocupado, retorna estado
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <LCD5110_write_string+0x6c>)
 800099a:	791b      	ldrb	r3, [r3, #4]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d101      	bne.n	80009a4 <LCD5110_write_string+0x18>
		return HAL_BUSY;
 80009a0:	2302      	movs	r3, #2
 80009a2:	e024      	b.n	80009ee <LCD5110_write_string+0x62>
	buf.estado = B_BUSY; //se não der o return, virá ocupado
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <LCD5110_write_string+0x6c>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	711a      	strb	r2, [r3, #4]

	c = buf.dado;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <LCD5110_write_string+0x6c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	613b      	str	r3, [r7, #16]
	while (*s != '\0') {
 80009b0:	e00e      	b.n	80009d0 <LCD5110_write_string+0x44>
		LCD_drawchar(*s, c);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	6939      	ldr	r1, [r7, #16]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff5b 	bl	8000874 <LCD_drawchar>
		/*Desloca buffer nos dois lugares
		 */
		s++;  //proxima letra da string
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3301      	adds	r3, #1
 80009c2:	607b      	str	r3, [r7, #4]
		c += LARG_CHAR; //proximo desenho de char no strf
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	3306      	adds	r3, #6
 80009c8:	613b      	str	r3, [r7, #16]
		tam += LARG_CHAR; //cada letra soma 6 bytes
 80009ca:	8afb      	ldrh	r3, [r7, #22]
 80009cc:	3306      	adds	r3, #6
 80009ce:	82fb      	strh	r3, [r7, #22]
	while (*s != '\0') {
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d1ec      	bne.n	80009b2 <LCD5110_write_string+0x26>
	}
	buf.ocupacao = tam;
 80009d8:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <LCD5110_write_string+0x6c>)
 80009da:	8afb      	ldrh	r3, [r7, #22]
 80009dc:	80d3      	strh	r3, [r2, #6]
	status = LCD_write(&buf, LCD_DATA);
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <LCD5110_write_string+0x70>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2101      	movs	r1, #1
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <LCD5110_write_string+0x6c>)
 80009e6:	4798      	blx	r3
 80009e8:	4603      	mov	r3, r0
 80009ea:	73fb      	strb	r3, [r7, #15]
	return status; //se buffer n estiver ocupado, retorna estado
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200004b0 	.word	0x200004b0
 80009fc:	200004bc 	.word	0x200004bc

08000a00 <LCD5110_clear>:


HAL_StatusTypeDef LCD5110_clear()
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;

	if(buf.estado==B_BUSY)
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <LCD5110_clear+0x40>)
 8000a08:	791b      	ldrb	r3, [r3, #4]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d101      	bne.n	8000a12 <LCD5110_clear+0x12>
		return HAL_BUSY;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	e011      	b.n	8000a36 <LCD5110_clear+0x36>

	buf.estado=B_BUSY;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <LCD5110_clear+0x40>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	711a      	strb	r2, [r3, #4]
	buf.dado=telaLimpa;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <LCD5110_clear+0x40>)
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <LCD5110_clear+0x44>)
 8000a1c:	601a      	str	r2, [r3, #0]
	buf.ocupacao=TAM_BUFF;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <LCD5110_clear+0x40>)
 8000a20:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8000a24:	80da      	strh	r2, [r3, #6]

	status = LCD_write(&buf,LCD_DATA);
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <LCD5110_clear+0x48>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <LCD5110_clear+0x40>)
 8000a2e:	4798      	blx	r3
 8000a30:	4603      	mov	r3, r0
 8000a32:	71fb      	strb	r3, [r7, #7]
			return status;
 8000a34:	79fb      	ldrb	r3, [r7, #7]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200004b0 	.word	0x200004b0
 8000a44:	200004d0 	.word	0x200004d0
 8000a48:	200004bc 	.word	0x200004bc

08000a4c <LCD5110_write_block>:
/*
 * Função para escrever imagens (blocos de bytes) direto
 */
HAL_StatusTypeDef LCD5110_write_block(uint8_t *img, uint16_t tam)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	460b      	mov	r3, r1
 8000a56:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;

	if(buf.estado==B_BUSY) //se buffer estiver ocupado, retorna estado
 8000a58:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <LCD5110_write_block+0x44>)
 8000a5a:	791b      	ldrb	r3, [r3, #4]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d101      	bne.n	8000a64 <LCD5110_write_block+0x18>
		return HAL_BUSY;
 8000a60:	2302      	movs	r3, #2
 8000a62:	e010      	b.n	8000a86 <LCD5110_write_block+0x3a>

	buf.estado=B_BUSY; //se não der o return, virá ocupado
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <LCD5110_write_block+0x44>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	711a      	strb	r2, [r3, #4]
	buf.dado=img;
 8000a6a:	4a09      	ldr	r2, [pc, #36]	; (8000a90 <LCD5110_write_block+0x44>)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6013      	str	r3, [r2, #0]
	buf.ocupacao=tam; //atualiza o tamanho do buffer
 8000a70:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <LCD5110_write_block+0x44>)
 8000a72:	887b      	ldrh	r3, [r7, #2]
 8000a74:	80d3      	strh	r3, [r2, #6]

	status=LCD_write(&buf,LCD_DATA);
 8000a76:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <LCD5110_write_block+0x48>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <LCD5110_write_block+0x44>)
 8000a7e:	4798      	blx	r3
 8000a80:	4603      	mov	r3, r0
 8000a82:	73fb      	strb	r3, [r7, #15]
	return status; //se buffer n estiver ocupado, retorna estado
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200004b0 	.word	0x200004b0
 8000a94:	200004bc 	.word	0x200004bc

08000a98 <LCD5110_set_XY>:
HAL_StatusTypeDef LCD5110_set_XY(uint8_t x, uint8_t y) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	460a      	mov	r2, r1
 8000aa2:	71fb      	strb	r3, [r7, #7]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status;

	if (buf.estado == B_BUSY)
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <LCD5110_set_XY+0x7c>)
 8000aaa:	791b      	ldrb	r3, [r3, #4]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d101      	bne.n	8000ab4 <LCD5110_set_XY+0x1c>
		return HAL_BUSY;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	e02a      	b.n	8000b0a <LCD5110_set_XY+0x72>

	buf.estado = B_BUSY;
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <LCD5110_set_XY+0x7c>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	711a      	strb	r2, [r3, #4]
	x *= LARG_CHAR;
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	461a      	mov	r2, r3
 8000abe:	0052      	lsls	r2, r2, #1
 8000ac0:	4413      	add	r3, r2
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	71fb      	strb	r3, [r7, #7]
	x &= X_ADDR_MASK;
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000acc:	71fb      	strb	r3, [r7, #7]
	y &= Y_ADDR_MASK;
 8000ace:	79bb      	ldrb	r3, [r7, #6]
 8000ad0:	f003 0307 	and.w	r3, r3, #7
 8000ad4:	71bb      	strb	r3, [r7, #6]

	buf.dado[0] = PCD8544_SETYADDR | y;
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <LCD5110_set_XY+0x7c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	79ba      	ldrb	r2, [r7, #6]
 8000adc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	701a      	strb	r2, [r3, #0]
	buf.dado[1] = PCD8544_SETXADDR | x;
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <LCD5110_set_XY+0x7c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	79fa      	ldrb	r2, [r7, #7]
 8000aec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	701a      	strb	r2, [r3, #0]
	buf.ocupacao = 2;
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <LCD5110_set_XY+0x7c>)
 8000af6:	2202      	movs	r2, #2
 8000af8:	80da      	strh	r2, [r3, #6]

	status = LCD_write(&buf, LCD_COMMAND);
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <LCD5110_set_XY+0x80>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2100      	movs	r1, #0
 8000b00:	4804      	ldr	r0, [pc, #16]	; (8000b14 <LCD5110_set_XY+0x7c>)
 8000b02:	4798      	blx	r3
 8000b04:	4603      	mov	r3, r0
 8000b06:	73fb      	strb	r3, [r7, #15]
	return status;
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200004b0 	.word	0x200004b0
 8000b18:	200004bc 	.word	0x200004bc

08000b1c <LCD5110_RST>:
	HAL_GPIO_WritePin(lcd->CS_Port, lcd->CS_Pin, 1);

}


void LCD5110_RST(unsigned char temp) {
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
	if (temp)
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d006      	beq.n	8000b3a <LCD5110_RST+0x1e>
		PORT->ODR |= 1 << LCD_RST;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <LCD5110_RST+0x38>)
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <LCD5110_RST+0x38>)
 8000b32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b36:	6153      	str	r3, [r2, #20]
	else
		PORT->ODR &= ~(1 << LCD_RST);

}
 8000b38:	e005      	b.n	8000b46 <LCD5110_RST+0x2a>
		PORT->ODR &= ~(1 << LCD_RST);
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <LCD5110_RST+0x38>)
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <LCD5110_RST+0x38>)
 8000b40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000b44:	6153      	str	r3, [r2, #20]
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40020400 	.word	0x40020400

08000b58 <LCD5110_LCD_delay_ms>:

void LCD5110_LCD_delay_ms(unsigned int nCount) {
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	unsigned long t;
	t = nCount * 40000;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000b66:	fb02 f303 	mul.w	r3, r2, r3
 8000b6a:	60fb      	str	r3, [r7, #12]
	while (t--)
 8000b6c:	bf00      	nop
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	1e5a      	subs	r2, r3, #1
 8000b72:	60fa      	str	r2, [r7, #12]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d1fa      	bne.n	8000b6e <LCD5110_LCD_delay_ms+0x16>
		;
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == lcd->hspi->Instance) //se for o SPI usado no lcd
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <HAL_SPI_TxCpltCallback+0x58>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d110      	bne.n	8000bc2 <HAL_SPI_TxCpltCallback+0x3a>
			{
		//Fim da transf.
		HAL_GPIO_WritePin(lcd->CS_Port, lcd->CS_Pin, 1);
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <HAL_SPI_TxCpltCallback+0x58>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	6898      	ldr	r0, [r3, #8]
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <HAL_SPI_TxCpltCallback+0x58>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	899b      	ldrh	r3, [r3, #12]
 8000bac:	2201      	movs	r2, #1
 8000bae:	4619      	mov	r1, r3
 8000bb0:	f000 fede 	bl	8001970 <HAL_GPIO_WritePin>
		buff_atual->estado = B_FREE;
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_SPI_TxCpltCallback+0x5c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	711a      	strb	r2, [r3, #4]
		buf.dado = buffer;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <HAL_SPI_TxCpltCallback+0x60>)
 8000bbe:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <HAL_SPI_TxCpltCallback+0x64>)
 8000bc0:	601a      	str	r2, [r3, #0]
	/*"Concatena" a função de callback com outra especificada
	 * para poder complementar as ações feitas ao completar
	 * a transmissão, assim o callback não é inutilizado para uso
	 * fora da biblioteca.
	 */
	if (lcd->TxCpltCallback!=NULL)
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <HAL_SPI_TxCpltCallback+0x58>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d004      	beq.n	8000bd6 <HAL_SPI_TxCpltCallback+0x4e>
		(*(lcd->TxCpltCallback))(hspi);
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <HAL_SPI_TxCpltCallback+0x58>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	4798      	blx	r3
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200002b4 	.word	0x200002b4
 8000be4:	200004b8 	.word	0x200004b8
 8000be8:	200004b0 	.word	0x200004b0
 8000bec:	200002b8 	.word	0x200002b8

08000bf0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b38      	ldr	r3, [pc, #224]	; (8000cec <MX_GPIO_Init+0xfc>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a37      	ldr	r2, [pc, #220]	; (8000cec <MX_GPIO_Init+0xfc>)
 8000c10:	f043 0304 	orr.w	r3, r3, #4
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b35      	ldr	r3, [pc, #212]	; (8000cec <MX_GPIO_Init+0xfc>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0304 	and.w	r3, r3, #4
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b31      	ldr	r3, [pc, #196]	; (8000cec <MX_GPIO_Init+0xfc>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a30      	ldr	r2, [pc, #192]	; (8000cec <MX_GPIO_Init+0xfc>)
 8000c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b2e      	ldr	r3, [pc, #184]	; (8000cec <MX_GPIO_Init+0xfc>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <MX_GPIO_Init+0xfc>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a29      	ldr	r2, [pc, #164]	; (8000cec <MX_GPIO_Init+0xfc>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b27      	ldr	r3, [pc, #156]	; (8000cec <MX_GPIO_Init+0xfc>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4b23      	ldr	r3, [pc, #140]	; (8000cec <MX_GPIO_Init+0xfc>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a22      	ldr	r2, [pc, #136]	; (8000cec <MX_GPIO_Init+0xfc>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b20      	ldr	r3, [pc, #128]	; (8000cec <MX_GPIO_Init+0xfc>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2120      	movs	r1, #32
 8000c7a:	481d      	ldr	r0, [pc, #116]	; (8000cf0 <MX_GPIO_Init+0x100>)
 8000c7c:	f000 fe78 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NK_RST_Pin|NK_CS_Pin|NK_DO_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 8000c86:	481b      	ldr	r0, [pc, #108]	; (8000cf4 <MX_GPIO_Init+0x104>)
 8000c88:	f000 fe72 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c92:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4815      	ldr	r0, [pc, #84]	; (8000cf8 <MX_GPIO_Init+0x108>)
 8000ca4:	f000 fcd0 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ca8:	2320      	movs	r3, #32
 8000caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <MX_GPIO_Init+0x100>)
 8000cc0:	f000 fcc2 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = NK_RST_Pin|NK_CS_Pin|NK_DO_Pin;
 8000cc4:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8000cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_GPIO_Init+0x104>)
 8000cde:	f000 fcb3 	bl	8001648 <HAL_GPIO_Init>

}
 8000ce2:	bf00      	nop
 8000ce4:	3728      	adds	r7, #40	; 0x28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020000 	.word	0x40020000
 8000cf4:	40020400 	.word	0x40020400
 8000cf8:	40020800 	.word	0x40020800

08000cfc <official_callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//callback adicional para biblioteca
void official_callback(SPI_HandleTypeDef *hspi){
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	conta++;
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <official_callback+0x20>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <official_callback+0x20>)
 8000d0e:	801a      	strh	r2, [r3, #0]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	200004c0 	.word	0x200004c0

08000d20 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d24:	f000 fac6 	bl	80012b4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d28:	f000 f88a 	bl	8000e40 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d2c:	f7ff ff60 	bl	8000bf0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000d30:	f000 fa24 	bl	800117c <MX_USART2_UART_Init>
	MX_SPI2_Init();
 8000d34:	f000 f8f8 	bl	8000f28 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	//Inicialização da Instancia HLCD
	hlcd.hspi=&hspi2;
 8000d38:	4b38      	ldr	r3, [pc, #224]	; (8000e1c <main+0xfc>)
 8000d3a:	4a39      	ldr	r2, [pc, #228]	; (8000e20 <main+0x100>)
 8000d3c:	601a      	str	r2, [r3, #0]
	hlcd.CS_Port=NK_CS_GPIO_Port;
 8000d3e:	4b37      	ldr	r3, [pc, #220]	; (8000e1c <main+0xfc>)
 8000d40:	4a38      	ldr	r2, [pc, #224]	; (8000e24 <main+0x104>)
 8000d42:	609a      	str	r2, [r3, #8]
	hlcd.CS_Pin=NK_CS_Pin;
 8000d44:	4b35      	ldr	r3, [pc, #212]	; (8000e1c <main+0xfc>)
 8000d46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d4a:	819a      	strh	r2, [r3, #12]
	hlcd.DC_Port=NK_DO_GPIO_Port;
 8000d4c:	4b33      	ldr	r3, [pc, #204]	; (8000e1c <main+0xfc>)
 8000d4e:	4a35      	ldr	r2, [pc, #212]	; (8000e24 <main+0x104>)
 8000d50:	611a      	str	r2, [r3, #16]
	hlcd.DC_Pin=NK_DO_Pin;
 8000d52:	4b32      	ldr	r3, [pc, #200]	; (8000e1c <main+0xfc>)
 8000d54:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d58:	829a      	strh	r2, [r3, #20]
	hlcd.modo = LCD_BLOCK;
 8000d5a:	4b30      	ldr	r3, [pc, #192]	; (8000e1c <main+0xfc>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	711a      	strb	r2, [r3, #4]

	LCD5110_init(&hlcd);
 8000d60:	482e      	ldr	r0, [pc, #184]	; (8000e1c <main+0xfc>)
 8000d62:	f7ff fcd9 	bl	8000718 <LCD5110_init>

	LCD5110_set_callback(official_callback);
 8000d66:	4830      	ldr	r0, [pc, #192]	; (8000e28 <main+0x108>)
 8000d68:	f7ff fd74 	bl	8000854 <LCD5110_set_callback>

	LCD5110_set_XY(0, 0);
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f7ff fe92 	bl	8000a98 <LCD5110_set_XY>
	while( LCD5110_write_string("Micros é show - Testando")!=HAL_OK);
 8000d74:	bf00      	nop
 8000d76:	482d      	ldr	r0, [pc, #180]	; (8000e2c <main+0x10c>)
 8000d78:	f7ff fe08 	bl	800098c <LCD5110_write_string>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d1f9      	bne.n	8000d76 <main+0x56>
	while( LCD5110_set_XY(0, 4)!=HAL_OK);
 8000d82:	bf00      	nop
 8000d84:	2104      	movs	r1, #4
 8000d86:	2000      	movs	r0, #0
 8000d88:	f7ff fe86 	bl	8000a98 <LCD5110_set_XY>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f8      	bne.n	8000d84 <main+0x64>
	HAL_Delay(3000);
 8000d92:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d96:	f000 faff 	bl	8001398 <HAL_Delay>
	while(LCD5110_write_char('x', 0)!=HAL_OK);
 8000d9a:	bf00      	nop
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2078      	movs	r0, #120	; 0x78
 8000da0:	f7ff fdbe 	bl	8000920 <LCD5110_write_char>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1f8      	bne.n	8000d9c <main+0x7c>
	HAL_Delay(3000);
 8000daa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000dae:	f000 faf3 	bl	8001398 <HAL_Delay>
	while( LCD5110_clear()!=HAL_OK);
 8000db2:	bf00      	nop
 8000db4:	f7ff fe24 	bl	8000a00 <LCD5110_clear>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1fa      	bne.n	8000db4 <main+0x94>
	while( LCD5110_set_XY(0, 0)!=HAL_OK);
 8000dbe:	bf00      	nop
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f7ff fe68 	bl	8000a98 <LCD5110_set_XY>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d1f8      	bne.n	8000dc0 <main+0xa0>
	while(LCD5110_write_block(liber_bmp3, TAM_TELA)!=HAL_OK);
 8000dce:	bf00      	nop
 8000dd0:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000dd4:	4816      	ldr	r0, [pc, #88]	; (8000e30 <main+0x110>)
 8000dd6:	f7ff fe39 	bl	8000a4c <LCD5110_write_block>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1f7      	bne.n	8000dd0 <main+0xb0>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		//código para testar callback adicional
		sprintf(msg, "Já foram %d vezes", conta);
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <main+0x114>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4914      	ldr	r1, [pc, #80]	; (8000e38 <main+0x118>)
 8000de8:	4814      	ldr	r0, [pc, #80]	; (8000e3c <main+0x11c>)
 8000dea:	f002 fa6d 	bl	80032c8 <siprintf>
		while( LCD5110_clear()!=HAL_OK);
 8000dee:	bf00      	nop
 8000df0:	f7ff fe06 	bl	8000a00 <LCD5110_clear>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1fa      	bne.n	8000df0 <main+0xd0>
		while( LCD5110_set_XY(0, 0)!=HAL_OK);
 8000dfa:	bf00      	nop
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f7ff fe4a 	bl	8000a98 <LCD5110_set_XY>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1f8      	bne.n	8000dfc <main+0xdc>
		while( LCD5110_write_string(msg)!=HAL_OK);
 8000e0a:	bf00      	nop
 8000e0c:	480b      	ldr	r0, [pc, #44]	; (8000e3c <main+0x11c>)
 8000e0e:	f7ff fdbd 	bl	800098c <LCD5110_write_string>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1f9      	bne.n	8000e0c <main+0xec>
		sprintf(msg, "Já foram %d vezes", conta);
 8000e18:	e7e2      	b.n	8000de0 <main+0xc0>
 8000e1a:	bf00      	nop
 8000e1c:	20000edc 	.word	0x20000edc
 8000e20:	20000efc 	.word	0x20000efc
 8000e24:	40020400 	.word	0x40020400
 8000e28:	08000cfd 	.word	0x08000cfd
 8000e2c:	08003b3c 	.word	0x08003b3c
 8000e30:	08003b6c 	.word	0x08003b6c
 8000e34:	200004c0 	.word	0x200004c0
 8000e38:	08003b58 	.word	0x08003b58
 8000e3c:	20000ea8 	.word	0x20000ea8

08000e40 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b094      	sub	sp, #80	; 0x50
 8000e44:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	2234      	movs	r2, #52	; 0x34
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f002 fa32 	bl	80032b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000e64:	2300      	movs	r3, #0
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <SystemClock_Config+0xd4>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	4a29      	ldr	r2, [pc, #164]	; (8000f14 <SystemClock_Config+0xd4>)
 8000e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e72:	6413      	str	r3, [r2, #64]	; 0x40
 8000e74:	4b27      	ldr	r3, [pc, #156]	; (8000f14 <SystemClock_Config+0xd4>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e80:	2300      	movs	r3, #0
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	4b24      	ldr	r3, [pc, #144]	; (8000f18 <SystemClock_Config+0xd8>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e8c:	4a22      	ldr	r2, [pc, #136]	; (8000f18 <SystemClock_Config+0xd8>)
 8000e8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	4b20      	ldr	r3, [pc, #128]	; (8000f18 <SystemClock_Config+0xd8>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e9c:	603b      	str	r3, [r7, #0]
 8000e9e:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ea8:	2310      	movs	r3, #16
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eac:	2302      	movs	r3, #2
 8000eae:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000eb4:	2310      	movs	r3, #16
 8000eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000eb8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ebc:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 f834 	bl	8001f3c <HAL_RCC_OscConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8000eda:	f000 f81f 	bl	8000f1c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ede:	230f      	movs	r3, #15
 8000ee0:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eee:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	2102      	movs	r1, #2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 fd52 	bl	80019a4 <HAL_RCC_ClockConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SystemClock_Config+0xca>
	{
		Error_Handler();
 8000f06:	f000 f809 	bl	8000f1c <Error_Handler>
	}
}
 8000f0a:	bf00      	nop
 8000f0c:	3750      	adds	r7, #80	; 0x50
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40007000 	.word	0x40007000

08000f1c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f20:	b672      	cpsid	i
}
 8000f22:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f24:	e7fe      	b.n	8000f24 <Error_Handler+0x8>
	...

08000f28 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <MX_SPI2_Init+0x64>)
 8000f2e:	4a18      	ldr	r2, [pc, #96]	; (8000f90 <MX_SPI2_Init+0x68>)
 8000f30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <MX_SPI2_Init+0x64>)
 8000f34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_SPI2_Init+0x64>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <MX_SPI2_Init+0x64>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_SPI2_Init+0x64>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_SPI2_Init+0x64>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_SPI2_Init+0x64>)
 8000f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f58:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_SPI2_Init+0x64>)
 8000f5c:	2218      	movs	r2, #24
 8000f5e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f60:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <MX_SPI2_Init+0x64>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_SPI2_Init+0x64>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <MX_SPI2_Init+0x64>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_SPI2_Init+0x64>)
 8000f74:	220a      	movs	r2, #10
 8000f76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <MX_SPI2_Init+0x64>)
 8000f7a:	f001 fa7d 	bl	8002478 <HAL_SPI_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000f84:	f7ff ffca 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000efc 	.word	0x20000efc
 8000f90:	40003800 	.word	0x40003800

08000f94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a1d      	ldr	r2, [pc, #116]	; (8001028 <HAL_SPI_MspInit+0x94>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d134      	bne.n	8001020 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b1c      	ldr	r3, [pc, #112]	; (800102c <HAL_SPI_MspInit+0x98>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	4a1b      	ldr	r2, [pc, #108]	; (800102c <HAL_SPI_MspInit+0x98>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <HAL_SPI_MspInit+0x98>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_SPI_MspInit+0x98>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a14      	ldr	r2, [pc, #80]	; (800102c <HAL_SPI_MspInit+0x98>)
 8000fdc:	f043 0302 	orr.w	r3, r3, #2
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_SPI_MspInit+0x98>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = NK_SCK_Pin|NK_DI_Pin;
 8000fee:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001000:	2305      	movs	r3, #5
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	4809      	ldr	r0, [pc, #36]	; (8001030 <HAL_SPI_MspInit+0x9c>)
 800100c:	f000 fb1c 	bl	8001648 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 2);
 8001010:	2202      	movs	r2, #2
 8001012:	2100      	movs	r1, #0
 8001014:	2024      	movs	r0, #36	; 0x24
 8001016:	f000 fabe 	bl	8001596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800101a:	2024      	movs	r0, #36	; 0x24
 800101c:	f000 fad7 	bl	80015ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001020:	bf00      	nop
 8001022:	3728      	adds	r7, #40	; 0x28
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40003800 	.word	0x40003800
 800102c:	40023800 	.word	0x40023800
 8001030:	40020400 	.word	0x40020400

08001034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <HAL_MspInit+0x4c>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <HAL_MspInit+0x4c>)
 8001044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001048:	6453      	str	r3, [r2, #68]	; 0x44
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <HAL_MspInit+0x4c>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_MspInit+0x4c>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	4a08      	ldr	r2, [pc, #32]	; (8001080 <HAL_MspInit+0x4c>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001064:	6413      	str	r3, [r2, #64]	; 0x40
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_MspInit+0x4c>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001072:	2007      	movs	r0, #7
 8001074:	f000 fa84 	bl	8001580 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40023800 	.word	0x40023800

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <NMI_Handler+0x4>

0800108a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <HardFault_Handler+0x4>

08001090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <MemManage_Handler+0x4>

08001096 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <BusFault_Handler+0x4>

0800109c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <UsageFault_Handler+0x4>

080010a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d0:	f000 f942 	bl	8001358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <SPI2_IRQHandler+0x10>)
 80010de:	f001 fc1b 	bl	8002918 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000efc 	.word	0x20000efc

080010ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f4:	4a14      	ldr	r2, [pc, #80]	; (8001148 <_sbrk+0x5c>)
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <_sbrk+0x60>)
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001100:	4b13      	ldr	r3, [pc, #76]	; (8001150 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d102      	bne.n	800110e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <_sbrk+0x64>)
 800110a:	4a12      	ldr	r2, [pc, #72]	; (8001154 <_sbrk+0x68>)
 800110c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110e:	4b10      	ldr	r3, [pc, #64]	; (8001150 <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	429a      	cmp	r2, r3
 800111a:	d207      	bcs.n	800112c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800111c:	f002 f8a2 	bl	8003264 <__errno>
 8001120:	4603      	mov	r3, r0
 8001122:	220c      	movs	r2, #12
 8001124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
 800112a:	e009      	b.n	8001140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001132:	4b07      	ldr	r3, [pc, #28]	; (8001150 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	4a05      	ldr	r2, [pc, #20]	; (8001150 <_sbrk+0x64>)
 800113c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113e:	68fb      	ldr	r3, [r7, #12]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20020000 	.word	0x20020000
 800114c:	00000400 	.word	0x00000400
 8001150:	200004c4 	.word	0x200004c4
 8001154:	20000fb0 	.word	0x20000fb0

08001158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <SystemInit+0x20>)
 800115e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001162:	4a05      	ldr	r2, [pc, #20]	; (8001178 <SystemInit+0x20>)
 8001164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 8001182:	4a12      	ldr	r2, [pc, #72]	; (80011cc <MX_USART2_UART_Init+0x50>)
 8001184:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 8001188:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800118c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 80011a2:	220c      	movs	r2, #12
 80011a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 80011b4:	f001 fe40 	bl	8002e38 <HAL_UART_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011be:	f7ff fead 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000f54 	.word	0x20000f54
 80011cc:	40004400 	.word	0x40004400

080011d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a19      	ldr	r2, [pc, #100]	; (8001254 <HAL_UART_MspInit+0x84>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d12b      	bne.n	800124a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_UART_MspInit+0x88>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	4a17      	ldr	r2, [pc, #92]	; (8001258 <HAL_UART_MspInit+0x88>)
 80011fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001200:	6413      	str	r3, [r2, #64]	; 0x40
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_UART_MspInit+0x88>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_UART_MspInit+0x88>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a10      	ldr	r2, [pc, #64]	; (8001258 <HAL_UART_MspInit+0x88>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_UART_MspInit+0x88>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800122a:	230c      	movs	r3, #12
 800122c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	2302      	movs	r3, #2
 8001230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001236:	2303      	movs	r3, #3
 8001238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800123a:	2307      	movs	r3, #7
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <HAL_UART_MspInit+0x8c>)
 8001246:	f000 f9ff 	bl	8001648 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800124a:	bf00      	nop
 800124c:	3728      	adds	r7, #40	; 0x28
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40004400 	.word	0x40004400
 8001258:	40023800 	.word	0x40023800
 800125c:	40020000 	.word	0x40020000

08001260 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001260:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001298 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001264:	480d      	ldr	r0, [pc, #52]	; (800129c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001266:	490e      	ldr	r1, [pc, #56]	; (80012a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001268:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800126c:	e002      	b.n	8001274 <LoopCopyDataInit>

0800126e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001272:	3304      	adds	r3, #4

08001274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001278:	d3f9      	bcc.n	800126e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127a:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800127c:	4c0b      	ldr	r4, [pc, #44]	; (80012ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001280:	e001      	b.n	8001286 <LoopFillZerobss>

08001282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001284:	3204      	adds	r2, #4

08001286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001288:	d3fb      	bcc.n	8001282 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800128a:	f7ff ff65 	bl	8001158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800128e:	f001 ffef 	bl	8003270 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001292:	f7ff fd45 	bl	8000d20 <main>
  bx  lr    
 8001296:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001298:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800129c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a0:	20000298 	.word	0x20000298
  ldr r2, =_sidata
 80012a4:	08003dc0 	.word	0x08003dc0
  ldr r2, =_sbss
 80012a8:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 80012ac:	20000fac 	.word	0x20000fac

080012b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b0:	e7fe      	b.n	80012b0 <ADC_IRQHandler>
	...

080012b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <HAL_Init+0x40>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <HAL_Init+0x40>)
 80012be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <HAL_Init+0x40>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <HAL_Init+0x40>)
 80012ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <HAL_Init+0x40>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <HAL_Init+0x40>)
 80012d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012dc:	2003      	movs	r0, #3
 80012de:	f000 f94f 	bl	8001580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e2:	2000      	movs	r0, #0
 80012e4:	f000 f808 	bl	80012f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e8:	f7ff fea4 	bl	8001034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023c00 	.word	0x40023c00

080012f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_InitTick+0x54>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_InitTick+0x58>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001312:	fbb2 f3f3 	udiv	r3, r2, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f000 f967 	bl	80015ea <HAL_SYSTICK_Config>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e00e      	b.n	8001344 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b0f      	cmp	r3, #15
 800132a:	d80a      	bhi.n	8001342 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800132c:	2200      	movs	r2, #0
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f000 f92f 	bl	8001596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001338:	4a06      	ldr	r2, [pc, #24]	; (8001354 <HAL_InitTick+0x5c>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	e000      	b.n	8001344 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000228 	.word	0x20000228
 8001350:	20000230 	.word	0x20000230
 8001354:	2000022c 	.word	0x2000022c

08001358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_IncTick+0x20>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_IncTick+0x24>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
 8001368:	4a04      	ldr	r2, [pc, #16]	; (800137c <HAL_IncTick+0x24>)
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000230 	.word	0x20000230
 800137c:	20000f98 	.word	0x20000f98

08001380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <HAL_GetTick+0x14>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000f98 	.word	0x20000f98

08001398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a0:	f7ff ffee 	bl	8001380 <HAL_GetTick>
 80013a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b0:	d005      	beq.n	80013be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_Delay+0x44>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013be:	bf00      	nop
 80013c0:	f7ff ffde 	bl	8001380 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d8f7      	bhi.n	80013c0 <HAL_Delay+0x28>
  {
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000230 	.word	0x20000230

080013e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013fc:	4013      	ands	r3, r2
 80013fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800140c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001412:	4a04      	ldr	r2, [pc, #16]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	60d3      	str	r3, [r2, #12]
}
 8001418:	bf00      	nop
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <__NVIC_GetPriorityGrouping+0x18>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	f003 0307 	and.w	r3, r3, #7
}
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	2b00      	cmp	r3, #0
 8001454:	db0b      	blt.n	800146e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	f003 021f 	and.w	r2, r3, #31
 800145c:	4907      	ldr	r1, [pc, #28]	; (800147c <__NVIC_EnableIRQ+0x38>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	095b      	lsrs	r3, r3, #5
 8001464:	2001      	movs	r0, #1
 8001466:	fa00 f202 	lsl.w	r2, r0, r2
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000e100 	.word	0xe000e100

08001480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	2b00      	cmp	r3, #0
 8001492:	db0a      	blt.n	80014aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	490c      	ldr	r1, [pc, #48]	; (80014cc <__NVIC_SetPriority+0x4c>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	0112      	lsls	r2, r2, #4
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	440b      	add	r3, r1
 80014a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a8:	e00a      	b.n	80014c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4908      	ldr	r1, [pc, #32]	; (80014d0 <__NVIC_SetPriority+0x50>)
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	3b04      	subs	r3, #4
 80014b8:	0112      	lsls	r2, r2, #4
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	440b      	add	r3, r1
 80014be:	761a      	strb	r2, [r3, #24]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000e100 	.word	0xe000e100
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f1c3 0307 	rsb	r3, r3, #7
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	bf28      	it	cs
 80014f2:	2304      	movcs	r3, #4
 80014f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3304      	adds	r3, #4
 80014fa:	2b06      	cmp	r3, #6
 80014fc:	d902      	bls.n	8001504 <NVIC_EncodePriority+0x30>
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3b03      	subs	r3, #3
 8001502:	e000      	b.n	8001506 <NVIC_EncodePriority+0x32>
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	f04f 32ff 	mov.w	r2, #4294967295
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	401a      	ands	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800151c:	f04f 31ff 	mov.w	r1, #4294967295
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	43d9      	mvns	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	4313      	orrs	r3, r2
         );
}
 800152e:	4618      	mov	r0, r3
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800154c:	d301      	bcc.n	8001552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154e:	2301      	movs	r3, #1
 8001550:	e00f      	b.n	8001572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <SysTick_Config+0x40>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155a:	210f      	movs	r1, #15
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f7ff ff8e 	bl	8001480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <SysTick_Config+0x40>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <SysTick_Config+0x40>)
 800156c:	2207      	movs	r2, #7
 800156e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	e000e010 	.word	0xe000e010

08001580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff29 	bl	80013e0 <__NVIC_SetPriorityGrouping>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a8:	f7ff ff3e 	bl	8001428 <__NVIC_GetPriorityGrouping>
 80015ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	6978      	ldr	r0, [r7, #20]
 80015b4:	f7ff ff8e 	bl	80014d4 <NVIC_EncodePriority>
 80015b8:	4602      	mov	r2, r0
 80015ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff5d 	bl	8001480 <__NVIC_SetPriority>
}
 80015c6:	bf00      	nop
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff31 	bl	8001444 <__NVIC_EnableIRQ>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ffa2 	bl	800153c <SysTick_Config>
 80015f8:	4603      	mov	r3, r0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d004      	beq.n	8001620 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2280      	movs	r2, #128	; 0x80
 800161a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e00c      	b.n	800163a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2205      	movs	r2, #5
 8001624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0201 	bic.w	r2, r2, #1
 8001636:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	; 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
 8001662:	e165      	b.n	8001930 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001664:	2201      	movs	r2, #1
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	429a      	cmp	r2, r3
 800167e:	f040 8154 	bne.w	800192a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	2b01      	cmp	r3, #1
 800168c:	d005      	beq.n	800169a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001696:	2b02      	cmp	r3, #2
 8001698:	d130      	bne.n	80016fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	2203      	movs	r2, #3
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4013      	ands	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	68da      	ldr	r2, [r3, #12]
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016d0:	2201      	movs	r2, #1
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	f003 0201 	and.w	r2, r3, #1
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	2b03      	cmp	r3, #3
 8001706:	d017      	beq.n	8001738 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d123      	bne.n	800178c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	08da      	lsrs	r2, r3, #3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3208      	adds	r2, #8
 800174c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001750:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	220f      	movs	r2, #15
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	691a      	ldr	r2, [r3, #16]
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	08da      	lsrs	r2, r3, #3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3208      	adds	r2, #8
 8001786:	69b9      	ldr	r1, [r7, #24]
 8001788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	2203      	movs	r2, #3
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0203 	and.w	r2, r3, #3
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 80ae 	beq.w	800192a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b5d      	ldr	r3, [pc, #372]	; (8001948 <HAL_GPIO_Init+0x300>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	4a5c      	ldr	r2, [pc, #368]	; (8001948 <HAL_GPIO_Init+0x300>)
 80017d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017dc:	6453      	str	r3, [r2, #68]	; 0x44
 80017de:	4b5a      	ldr	r3, [pc, #360]	; (8001948 <HAL_GPIO_Init+0x300>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ea:	4a58      	ldr	r2, [pc, #352]	; (800194c <HAL_GPIO_Init+0x304>)
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	089b      	lsrs	r3, r3, #2
 80017f0:	3302      	adds	r3, #2
 80017f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	220f      	movs	r2, #15
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4013      	ands	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a4f      	ldr	r2, [pc, #316]	; (8001950 <HAL_GPIO_Init+0x308>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d025      	beq.n	8001862 <HAL_GPIO_Init+0x21a>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a4e      	ldr	r2, [pc, #312]	; (8001954 <HAL_GPIO_Init+0x30c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d01f      	beq.n	800185e <HAL_GPIO_Init+0x216>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4d      	ldr	r2, [pc, #308]	; (8001958 <HAL_GPIO_Init+0x310>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d019      	beq.n	800185a <HAL_GPIO_Init+0x212>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4c      	ldr	r2, [pc, #304]	; (800195c <HAL_GPIO_Init+0x314>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d013      	beq.n	8001856 <HAL_GPIO_Init+0x20e>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a4b      	ldr	r2, [pc, #300]	; (8001960 <HAL_GPIO_Init+0x318>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d00d      	beq.n	8001852 <HAL_GPIO_Init+0x20a>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4a      	ldr	r2, [pc, #296]	; (8001964 <HAL_GPIO_Init+0x31c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d007      	beq.n	800184e <HAL_GPIO_Init+0x206>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a49      	ldr	r2, [pc, #292]	; (8001968 <HAL_GPIO_Init+0x320>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d101      	bne.n	800184a <HAL_GPIO_Init+0x202>
 8001846:	2306      	movs	r3, #6
 8001848:	e00c      	b.n	8001864 <HAL_GPIO_Init+0x21c>
 800184a:	2307      	movs	r3, #7
 800184c:	e00a      	b.n	8001864 <HAL_GPIO_Init+0x21c>
 800184e:	2305      	movs	r3, #5
 8001850:	e008      	b.n	8001864 <HAL_GPIO_Init+0x21c>
 8001852:	2304      	movs	r3, #4
 8001854:	e006      	b.n	8001864 <HAL_GPIO_Init+0x21c>
 8001856:	2303      	movs	r3, #3
 8001858:	e004      	b.n	8001864 <HAL_GPIO_Init+0x21c>
 800185a:	2302      	movs	r3, #2
 800185c:	e002      	b.n	8001864 <HAL_GPIO_Init+0x21c>
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <HAL_GPIO_Init+0x21c>
 8001862:	2300      	movs	r3, #0
 8001864:	69fa      	ldr	r2, [r7, #28]
 8001866:	f002 0203 	and.w	r2, r2, #3
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	4093      	lsls	r3, r2
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001874:	4935      	ldr	r1, [pc, #212]	; (800194c <HAL_GPIO_Init+0x304>)
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	089b      	lsrs	r3, r3, #2
 800187a:	3302      	adds	r3, #2
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001882:	4b3a      	ldr	r3, [pc, #232]	; (800196c <HAL_GPIO_Init+0x324>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018a6:	4a31      	ldr	r2, [pc, #196]	; (800196c <HAL_GPIO_Init+0x324>)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018ac:	4b2f      	ldr	r3, [pc, #188]	; (800196c <HAL_GPIO_Init+0x324>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018d0:	4a26      	ldr	r2, [pc, #152]	; (800196c <HAL_GPIO_Init+0x324>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018d6:	4b25      	ldr	r3, [pc, #148]	; (800196c <HAL_GPIO_Init+0x324>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018fa:	4a1c      	ldr	r2, [pc, #112]	; (800196c <HAL_GPIO_Init+0x324>)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001900:	4b1a      	ldr	r3, [pc, #104]	; (800196c <HAL_GPIO_Init+0x324>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001924:	4a11      	ldr	r2, [pc, #68]	; (800196c <HAL_GPIO_Init+0x324>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3301      	adds	r3, #1
 800192e:	61fb      	str	r3, [r7, #28]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	2b0f      	cmp	r3, #15
 8001934:	f67f ae96 	bls.w	8001664 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	40013800 	.word	0x40013800
 8001950:	40020000 	.word	0x40020000
 8001954:	40020400 	.word	0x40020400
 8001958:	40020800 	.word	0x40020800
 800195c:	40020c00 	.word	0x40020c00
 8001960:	40021000 	.word	0x40021000
 8001964:	40021400 	.word	0x40021400
 8001968:	40021800 	.word	0x40021800
 800196c:	40013c00 	.word	0x40013c00

08001970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	807b      	strh	r3, [r7, #2]
 800197c:	4613      	mov	r3, r2
 800197e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001980:	787b      	ldrb	r3, [r7, #1]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001986:	887a      	ldrh	r2, [r7, #2]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800198c:	e003      	b.n	8001996 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800198e:	887b      	ldrh	r3, [r7, #2]
 8001990:	041a      	lsls	r2, r3, #16
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	619a      	str	r2, [r3, #24]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0cc      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019b8:	4b68      	ldr	r3, [pc, #416]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 030f 	and.w	r3, r3, #15
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d90c      	bls.n	80019e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b65      	ldr	r3, [pc, #404]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b63      	ldr	r3, [pc, #396]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0b8      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f8:	4b59      	ldr	r3, [pc, #356]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	4a58      	ldr	r2, [pc, #352]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a10:	4b53      	ldr	r3, [pc, #332]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a52      	ldr	r2, [pc, #328]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1c:	4b50      	ldr	r3, [pc, #320]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	494d      	ldr	r1, [pc, #308]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d044      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	4b47      	ldr	r3, [pc, #284]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d119      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e07f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d003      	beq.n	8001a62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d107      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a62:	4b3f      	ldr	r3, [pc, #252]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d109      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e06f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a72:	4b3b      	ldr	r3, [pc, #236]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e067      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a82:	4b37      	ldr	r3, [pc, #220]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f023 0203 	bic.w	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4934      	ldr	r1, [pc, #208]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a94:	f7ff fc74 	bl	8001380 <HAL_GetTick>
 8001a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9c:	f7ff fc70 	bl	8001380 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e04f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab2:	4b2b      	ldr	r3, [pc, #172]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 020c 	and.w	r2, r3, #12
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d1eb      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac4:	4b25      	ldr	r3, [pc, #148]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 030f 	and.w	r3, r3, #15
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d20c      	bcs.n	8001aec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad2:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e032      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	4916      	ldr	r1, [pc, #88]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d009      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	490e      	ldr	r1, [pc, #56]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b2a:	f000 f855 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	490a      	ldr	r1, [pc, #40]	; (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 8001b3c:	5ccb      	ldrb	r3, [r1, r3]
 8001b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b42:	4a09      	ldr	r2, [pc, #36]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fbd4 	bl	80012f8 <HAL_InitTick>

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023c00 	.word	0x40023c00
 8001b60:	40023800 	.word	0x40023800
 8001b64:	08003d64 	.word	0x08003d64
 8001b68:	20000228 	.word	0x20000228
 8001b6c:	2000022c 	.word	0x2000022c

08001b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000228 	.word	0x20000228

08001b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b8c:	f7ff fff0 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001b90:	4602      	mov	r2, r0
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	0a9b      	lsrs	r3, r3, #10
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	4903      	ldr	r1, [pc, #12]	; (8001bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	08003d74 	.word	0x08003d74

08001bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bb4:	f7ff ffdc 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	0b5b      	lsrs	r3, r3, #13
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	4903      	ldr	r1, [pc, #12]	; (8001bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bc6:	5ccb      	ldrb	r3, [r1, r3]
 8001bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	08003d74 	.word	0x08003d74

08001bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bdc:	b088      	sub	sp, #32
 8001bde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bf4:	4bce      	ldr	r3, [pc, #824]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x358>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
 8001bfc:	2b0c      	cmp	r3, #12
 8001bfe:	f200 818d 	bhi.w	8001f1c <HAL_RCC_GetSysClockFreq+0x344>
 8001c02:	a201      	add	r2, pc, #4	; (adr r2, 8001c08 <HAL_RCC_GetSysClockFreq+0x30>)
 8001c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c08:	08001c3d 	.word	0x08001c3d
 8001c0c:	08001f1d 	.word	0x08001f1d
 8001c10:	08001f1d 	.word	0x08001f1d
 8001c14:	08001f1d 	.word	0x08001f1d
 8001c18:	08001c43 	.word	0x08001c43
 8001c1c:	08001f1d 	.word	0x08001f1d
 8001c20:	08001f1d 	.word	0x08001f1d
 8001c24:	08001f1d 	.word	0x08001f1d
 8001c28:	08001c49 	.word	0x08001c49
 8001c2c:	08001f1d 	.word	0x08001f1d
 8001c30:	08001f1d 	.word	0x08001f1d
 8001c34:	08001f1d 	.word	0x08001f1d
 8001c38:	08001dbd 	.word	0x08001dbd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c3c:	4bbd      	ldr	r3, [pc, #756]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001c3e:	61bb      	str	r3, [r7, #24]
       break;
 8001c40:	e16f      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c42:	4bbd      	ldr	r3, [pc, #756]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x360>)
 8001c44:	61bb      	str	r3, [r7, #24]
      break;
 8001c46:	e16c      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c48:	4bb9      	ldr	r3, [pc, #740]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c50:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c52:	4bb7      	ldr	r3, [pc, #732]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d053      	beq.n	8001d06 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c5e:	4bb4      	ldr	r3, [pc, #720]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	099b      	lsrs	r3, r3, #6
 8001c64:	461a      	mov	r2, r3
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c6e:	f04f 0100 	mov.w	r1, #0
 8001c72:	ea02 0400 	and.w	r4, r2, r0
 8001c76:	603c      	str	r4, [r7, #0]
 8001c78:	400b      	ands	r3, r1
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c80:	4620      	mov	r0, r4
 8001c82:	4629      	mov	r1, r5
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	014b      	lsls	r3, r1, #5
 8001c8e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c92:	0142      	lsls	r2, r0, #5
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	4623      	mov	r3, r4
 8001c9a:	1ac0      	subs	r0, r0, r3
 8001c9c:	462b      	mov	r3, r5
 8001c9e:	eb61 0103 	sbc.w	r1, r1, r3
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	018b      	lsls	r3, r1, #6
 8001cac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cb0:	0182      	lsls	r2, r0, #6
 8001cb2:	1a12      	subs	r2, r2, r0
 8001cb4:	eb63 0301 	sbc.w	r3, r3, r1
 8001cb8:	f04f 0000 	mov.w	r0, #0
 8001cbc:	f04f 0100 	mov.w	r1, #0
 8001cc0:	00d9      	lsls	r1, r3, #3
 8001cc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cc6:	00d0      	lsls	r0, r2, #3
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4621      	mov	r1, r4
 8001cce:	1852      	adds	r2, r2, r1
 8001cd0:	4629      	mov	r1, r5
 8001cd2:	eb43 0101 	adc.w	r1, r3, r1
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	f04f 0000 	mov.w	r0, #0
 8001cdc:	f04f 0100 	mov.w	r1, #0
 8001ce0:	0259      	lsls	r1, r3, #9
 8001ce2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001ce6:	0250      	lsls	r0, r2, #9
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4610      	mov	r0, r2
 8001cee:	4619      	mov	r1, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	f7fe fada 	bl	80002b0 <__aeabi_uldivmod>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4613      	mov	r3, r2
 8001d02:	61fb      	str	r3, [r7, #28]
 8001d04:	e04c      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d06:	4b8a      	ldr	r3, [pc, #552]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	099b      	lsrs	r3, r3, #6
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d16:	f04f 0100 	mov.w	r1, #0
 8001d1a:	ea02 0a00 	and.w	sl, r2, r0
 8001d1e:	ea03 0b01 	and.w	fp, r3, r1
 8001d22:	4650      	mov	r0, sl
 8001d24:	4659      	mov	r1, fp
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	014b      	lsls	r3, r1, #5
 8001d30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d34:	0142      	lsls	r2, r0, #5
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	ebb0 000a 	subs.w	r0, r0, sl
 8001d3e:	eb61 010b 	sbc.w	r1, r1, fp
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	018b      	lsls	r3, r1, #6
 8001d4c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d50:	0182      	lsls	r2, r0, #6
 8001d52:	1a12      	subs	r2, r2, r0
 8001d54:	eb63 0301 	sbc.w	r3, r3, r1
 8001d58:	f04f 0000 	mov.w	r0, #0
 8001d5c:	f04f 0100 	mov.w	r1, #0
 8001d60:	00d9      	lsls	r1, r3, #3
 8001d62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d66:	00d0      	lsls	r0, r2, #3
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	eb12 020a 	adds.w	r2, r2, sl
 8001d70:	eb43 030b 	adc.w	r3, r3, fp
 8001d74:	f04f 0000 	mov.w	r0, #0
 8001d78:	f04f 0100 	mov.w	r1, #0
 8001d7c:	0299      	lsls	r1, r3, #10
 8001d7e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d82:	0290      	lsls	r0, r2, #10
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	f04f 0300 	mov.w	r3, #0
 8001d94:	f7fe fa8c 	bl	80002b0 <__aeabi_uldivmod>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001da0:	4b63      	ldr	r3, [pc, #396]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x358>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	0c1b      	lsrs	r3, r3, #16
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	3301      	adds	r3, #1
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001db0:	69fa      	ldr	r2, [r7, #28]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db8:	61bb      	str	r3, [r7, #24]
      break;
 8001dba:	e0b2      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dbc:	4b5c      	ldr	r3, [pc, #368]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x358>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dc4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dc6:	4b5a      	ldr	r3, [pc, #360]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x358>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d04d      	beq.n	8001e6e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd2:	4b57      	ldr	r3, [pc, #348]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x358>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	099b      	lsrs	r3, r3, #6
 8001dd8:	461a      	mov	r2, r3
 8001dda:	f04f 0300 	mov.w	r3, #0
 8001dde:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001de2:	f04f 0100 	mov.w	r1, #0
 8001de6:	ea02 0800 	and.w	r8, r2, r0
 8001dea:	ea03 0901 	and.w	r9, r3, r1
 8001dee:	4640      	mov	r0, r8
 8001df0:	4649      	mov	r1, r9
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	014b      	lsls	r3, r1, #5
 8001dfc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e00:	0142      	lsls	r2, r0, #5
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	ebb0 0008 	subs.w	r0, r0, r8
 8001e0a:	eb61 0109 	sbc.w	r1, r1, r9
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	018b      	lsls	r3, r1, #6
 8001e18:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e1c:	0182      	lsls	r2, r0, #6
 8001e1e:	1a12      	subs	r2, r2, r0
 8001e20:	eb63 0301 	sbc.w	r3, r3, r1
 8001e24:	f04f 0000 	mov.w	r0, #0
 8001e28:	f04f 0100 	mov.w	r1, #0
 8001e2c:	00d9      	lsls	r1, r3, #3
 8001e2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e32:	00d0      	lsls	r0, r2, #3
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	eb12 0208 	adds.w	r2, r2, r8
 8001e3c:	eb43 0309 	adc.w	r3, r3, r9
 8001e40:	f04f 0000 	mov.w	r0, #0
 8001e44:	f04f 0100 	mov.w	r1, #0
 8001e48:	0259      	lsls	r1, r3, #9
 8001e4a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e4e:	0250      	lsls	r0, r2, #9
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4610      	mov	r0, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	f7fe fa26 	bl	80002b0 <__aeabi_uldivmod>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4613      	mov	r3, r2
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	e04a      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e6e:	4b30      	ldr	r3, [pc, #192]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	099b      	lsrs	r3, r3, #6
 8001e74:	461a      	mov	r2, r3
 8001e76:	f04f 0300 	mov.w	r3, #0
 8001e7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e7e:	f04f 0100 	mov.w	r1, #0
 8001e82:	ea02 0400 	and.w	r4, r2, r0
 8001e86:	ea03 0501 	and.w	r5, r3, r1
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	4629      	mov	r1, r5
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	014b      	lsls	r3, r1, #5
 8001e98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e9c:	0142      	lsls	r2, r0, #5
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	1b00      	subs	r0, r0, r4
 8001ea4:	eb61 0105 	sbc.w	r1, r1, r5
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	018b      	lsls	r3, r1, #6
 8001eb2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001eb6:	0182      	lsls	r2, r0, #6
 8001eb8:	1a12      	subs	r2, r2, r0
 8001eba:	eb63 0301 	sbc.w	r3, r3, r1
 8001ebe:	f04f 0000 	mov.w	r0, #0
 8001ec2:	f04f 0100 	mov.w	r1, #0
 8001ec6:	00d9      	lsls	r1, r3, #3
 8001ec8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ecc:	00d0      	lsls	r0, r2, #3
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	1912      	adds	r2, r2, r4
 8001ed4:	eb45 0303 	adc.w	r3, r5, r3
 8001ed8:	f04f 0000 	mov.w	r0, #0
 8001edc:	f04f 0100 	mov.w	r1, #0
 8001ee0:	0299      	lsls	r1, r3, #10
 8001ee2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ee6:	0290      	lsls	r0, r2, #10
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4610      	mov	r0, r2
 8001eee:	4619      	mov	r1, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uldivmod>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4613      	mov	r3, r2
 8001f02:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f04:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	0f1b      	lsrs	r3, r3, #28
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f18:	61bb      	str	r3, [r7, #24]
      break;
 8001f1a:	e002      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001f1e:	61bb      	str	r3, [r7, #24]
      break;
 8001f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f22:	69bb      	ldr	r3, [r7, #24]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3720      	adds	r7, #32
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800
 8001f34:	00f42400 	.word	0x00f42400
 8001f38:	007a1200 	.word	0x007a1200

08001f3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e28d      	b.n	800246a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8083 	beq.w	8002062 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f5c:	4b94      	ldr	r3, [pc, #592]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d019      	beq.n	8001f9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f68:	4b91      	ldr	r3, [pc, #580]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d106      	bne.n	8001f82 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f74:	4b8e      	ldr	r3, [pc, #568]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f80:	d00c      	beq.n	8001f9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f82:	4b8b      	ldr	r3, [pc, #556]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f8a:	2b0c      	cmp	r3, #12
 8001f8c:	d112      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f8e:	4b88      	ldr	r3, [pc, #544]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f9a:	d10b      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9c:	4b84      	ldr	r3, [pc, #528]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d05b      	beq.n	8002060 <HAL_RCC_OscConfig+0x124>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d157      	bne.n	8002060 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e25a      	b.n	800246a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fbc:	d106      	bne.n	8001fcc <HAL_RCC_OscConfig+0x90>
 8001fbe:	4b7c      	ldr	r3, [pc, #496]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a7b      	ldr	r2, [pc, #492]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8001fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	e01d      	b.n	8002008 <HAL_RCC_OscConfig+0xcc>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0xb4>
 8001fd6:	4b76      	ldr	r3, [pc, #472]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a75      	ldr	r2, [pc, #468]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8001fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	4b73      	ldr	r3, [pc, #460]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a72      	ldr	r2, [pc, #456]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8001fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	e00b      	b.n	8002008 <HAL_RCC_OscConfig+0xcc>
 8001ff0:	4b6f      	ldr	r3, [pc, #444]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a6e      	ldr	r2, [pc, #440]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8001ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4b6c      	ldr	r3, [pc, #432]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a6b      	ldr	r2, [pc, #428]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8002002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002006:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d013      	beq.n	8002038 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7ff f9b6 	bl	8001380 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002018:	f7ff f9b2 	bl	8001380 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b64      	cmp	r3, #100	; 0x64
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e21f      	b.n	800246a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202a:	4b61      	ldr	r3, [pc, #388]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0xdc>
 8002036:	e014      	b.n	8002062 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7ff f9a2 	bl	8001380 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002040:	f7ff f99e 	bl	8001380 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b64      	cmp	r3, #100	; 0x64
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e20b      	b.n	800246a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002052:	4b57      	ldr	r3, [pc, #348]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x104>
 800205e:	e000      	b.n	8002062 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d06f      	beq.n	800214e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800206e:	4b50      	ldr	r3, [pc, #320]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	2b00      	cmp	r3, #0
 8002078:	d017      	beq.n	80020aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800207a:	4b4d      	ldr	r3, [pc, #308]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002082:	2b08      	cmp	r3, #8
 8002084:	d105      	bne.n	8002092 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002086:	4b4a      	ldr	r3, [pc, #296]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00b      	beq.n	80020aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002092:	4b47      	ldr	r3, [pc, #284]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800209a:	2b0c      	cmp	r3, #12
 800209c:	d11c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800209e:	4b44      	ldr	r3, [pc, #272]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d116      	bne.n	80020d8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020aa:	4b41      	ldr	r3, [pc, #260]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d005      	beq.n	80020c2 <HAL_RCC_OscConfig+0x186>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d001      	beq.n	80020c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e1d3      	b.n	800246a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c2:	4b3b      	ldr	r3, [pc, #236]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4937      	ldr	r1, [pc, #220]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d6:	e03a      	b.n	800214e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d020      	beq.n	8002122 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e0:	4b34      	ldr	r3, [pc, #208]	; (80021b4 <HAL_RCC_OscConfig+0x278>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e6:	f7ff f94b 	bl	8001380 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ee:	f7ff f947 	bl	8001380 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e1b4      	b.n	800246a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002100:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210c:	4b28      	ldr	r3, [pc, #160]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4925      	ldr	r1, [pc, #148]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 800211c:	4313      	orrs	r3, r2
 800211e:	600b      	str	r3, [r1, #0]
 8002120:	e015      	b.n	800214e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002122:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <HAL_RCC_OscConfig+0x278>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7ff f92a 	bl	8001380 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002130:	f7ff f926 	bl	8001380 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e193      	b.n	800246a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002142:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f0      	bne.n	8002130 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d036      	beq.n	80021c8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d016      	beq.n	8002190 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <HAL_RCC_OscConfig+0x27c>)
 8002164:	2201      	movs	r2, #1
 8002166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002168:	f7ff f90a 	bl	8001380 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002170:	f7ff f906 	bl	8001380 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e173      	b.n	800246a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002182:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8002184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x234>
 800218e:	e01b      	b.n	80021c8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002190:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_RCC_OscConfig+0x27c>)
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002196:	f7ff f8f3 	bl	8001380 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219c:	e00e      	b.n	80021bc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800219e:	f7ff f8ef 	bl	8001380 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d907      	bls.n	80021bc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e15c      	b.n	800246a <HAL_RCC_OscConfig+0x52e>
 80021b0:	40023800 	.word	0x40023800
 80021b4:	42470000 	.word	0x42470000
 80021b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021bc:	4b8a      	ldr	r3, [pc, #552]	; (80023e8 <HAL_RCC_OscConfig+0x4ac>)
 80021be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1ea      	bne.n	800219e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 8097 	beq.w	8002304 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021d6:	2300      	movs	r3, #0
 80021d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021da:	4b83      	ldr	r3, [pc, #524]	; (80023e8 <HAL_RCC_OscConfig+0x4ac>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10f      	bne.n	8002206 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	4b7f      	ldr	r3, [pc, #508]	; (80023e8 <HAL_RCC_OscConfig+0x4ac>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	4a7e      	ldr	r2, [pc, #504]	; (80023e8 <HAL_RCC_OscConfig+0x4ac>)
 80021f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f4:	6413      	str	r3, [r2, #64]	; 0x40
 80021f6:	4b7c      	ldr	r3, [pc, #496]	; (80023e8 <HAL_RCC_OscConfig+0x4ac>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002202:	2301      	movs	r3, #1
 8002204:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002206:	4b79      	ldr	r3, [pc, #484]	; (80023ec <HAL_RCC_OscConfig+0x4b0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220e:	2b00      	cmp	r3, #0
 8002210:	d118      	bne.n	8002244 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002212:	4b76      	ldr	r3, [pc, #472]	; (80023ec <HAL_RCC_OscConfig+0x4b0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a75      	ldr	r2, [pc, #468]	; (80023ec <HAL_RCC_OscConfig+0x4b0>)
 8002218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800221e:	f7ff f8af 	bl	8001380 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002226:	f7ff f8ab 	bl	8001380 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e118      	b.n	800246a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002238:	4b6c      	ldr	r3, [pc, #432]	; (80023ec <HAL_RCC_OscConfig+0x4b0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d106      	bne.n	800225a <HAL_RCC_OscConfig+0x31e>
 800224c:	4b66      	ldr	r3, [pc, #408]	; (80023e8 <HAL_RCC_OscConfig+0x4ac>)
 800224e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002250:	4a65      	ldr	r2, [pc, #404]	; (80023e8 <HAL_RCC_OscConfig+0x4ac>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6713      	str	r3, [r2, #112]	; 0x70
 8002258:	e01c      	b.n	8002294 <HAL_RCC_OscConfig+0x358>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b05      	cmp	r3, #5
 8002260:	d10c      	bne.n	800227c <HAL_RCC_OscConfig+0x340>
 8002262:	4b61      	ldr	r3, [pc, #388]	; (80023e8 <HAL_RCC_OscConfig+0x4ac>)
 8002264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002266:	4a60      	ldr	r2, [pc, #384]	; (80023e8 <HAL_RCC_OscConfig+0x4ac>)
 8002268:	f043 0304 	orr.w	r3, r3, #4
 800226c:	6713      	str	r3, [r2, #112]	; 0x70
 800226e:	4b5e      	ldr	r3, [pc, #376]	; (80023e8 <HAL_RCC_OscConfig+0x4ac>)
 8002270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002272:	4a5d      	ldr	r2, [pc, #372]	; (80023e8 <HAL_RCC_OscConfig+0x4ac>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6713      	str	r3, [r2, #112]	; 0x70
 800227a:	e00b      	b.n	8002294 <HAL_RCC_OscConfig+0x358>
 800227c:	4b5a      	ldr	r3, [pc, #360]	; (80023e8 <HAL_RCC_OscConfig+0x4ac>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	4a59      	ldr	r2, [pc, #356]	; (80023e8 <HAL_RCC_OscConfig+0x4ac>)
 8002282:	f023 0301 	bic.w	r3, r3, #1
 8002286:	6713      	str	r3, [r2, #112]	; 0x70
 8002288:	4b57      	ldr	r3, [pc, #348]	; (80023e8 <HAL_RCC_OscConfig+0x4ac>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228c:	4a56      	ldr	r2, [pc, #344]	; (80023e8 <HAL_RCC_OscConfig+0x4ac>)
 800228e:	f023 0304 	bic.w	r3, r3, #4
 8002292:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d015      	beq.n	80022c8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229c:	f7ff f870 	bl	8001380 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a2:	e00a      	b.n	80022ba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a4:	f7ff f86c 	bl	8001380 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e0d7      	b.n	800246a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ba:	4b4b      	ldr	r3, [pc, #300]	; (80023e8 <HAL_RCC_OscConfig+0x4ac>)
 80022bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0ee      	beq.n	80022a4 <HAL_RCC_OscConfig+0x368>
 80022c6:	e014      	b.n	80022f2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c8:	f7ff f85a 	bl	8001380 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ce:	e00a      	b.n	80022e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d0:	f7ff f856 	bl	8001380 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3288 	movw	r2, #5000	; 0x1388
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e0c1      	b.n	800246a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e6:	4b40      	ldr	r3, [pc, #256]	; (80023e8 <HAL_RCC_OscConfig+0x4ac>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1ee      	bne.n	80022d0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022f2:	7dfb      	ldrb	r3, [r7, #23]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d105      	bne.n	8002304 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f8:	4b3b      	ldr	r3, [pc, #236]	; (80023e8 <HAL_RCC_OscConfig+0x4ac>)
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	4a3a      	ldr	r2, [pc, #232]	; (80023e8 <HAL_RCC_OscConfig+0x4ac>)
 80022fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002302:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80ad 	beq.w	8002468 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800230e:	4b36      	ldr	r3, [pc, #216]	; (80023e8 <HAL_RCC_OscConfig+0x4ac>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 030c 	and.w	r3, r3, #12
 8002316:	2b08      	cmp	r3, #8
 8002318:	d060      	beq.n	80023dc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	2b02      	cmp	r3, #2
 8002320:	d145      	bne.n	80023ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002322:	4b33      	ldr	r3, [pc, #204]	; (80023f0 <HAL_RCC_OscConfig+0x4b4>)
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7ff f82a 	bl	8001380 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002330:	f7ff f826 	bl	8001380 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e093      	b.n	800246a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002342:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <HAL_RCC_OscConfig+0x4ac>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69da      	ldr	r2, [r3, #28]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	019b      	lsls	r3, r3, #6
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	085b      	lsrs	r3, r3, #1
 8002366:	3b01      	subs	r3, #1
 8002368:	041b      	lsls	r3, r3, #16
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	061b      	lsls	r3, r3, #24
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	071b      	lsls	r3, r3, #28
 800237a:	491b      	ldr	r1, [pc, #108]	; (80023e8 <HAL_RCC_OscConfig+0x4ac>)
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002380:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <HAL_RCC_OscConfig+0x4b4>)
 8002382:	2201      	movs	r2, #1
 8002384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002386:	f7fe fffb 	bl	8001380 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800238e:	f7fe fff7 	bl	8001380 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e064      	b.n	800246a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <HAL_RCC_OscConfig+0x4ac>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x452>
 80023ac:	e05c      	b.n	8002468 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <HAL_RCC_OscConfig+0x4b4>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7fe ffe4 	bl	8001380 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023bc:	f7fe ffe0 	bl	8001380 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e04d      	b.n	800246a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_RCC_OscConfig+0x4ac>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x480>
 80023da:	e045      	b.n	8002468 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d107      	bne.n	80023f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e040      	b.n	800246a <HAL_RCC_OscConfig+0x52e>
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40007000 	.word	0x40007000
 80023f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023f4:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <HAL_RCC_OscConfig+0x538>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d030      	beq.n	8002464 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800240c:	429a      	cmp	r2, r3
 800240e:	d129      	bne.n	8002464 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241a:	429a      	cmp	r2, r3
 800241c:	d122      	bne.n	8002464 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002424:	4013      	ands	r3, r2
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800242a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800242c:	4293      	cmp	r3, r2
 800242e:	d119      	bne.n	8002464 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243a:	085b      	lsrs	r3, r3, #1
 800243c:	3b01      	subs	r3, #1
 800243e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002440:	429a      	cmp	r2, r3
 8002442:	d10f      	bne.n	8002464 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002450:	429a      	cmp	r2, r3
 8002452:	d107      	bne.n	8002464 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e000      	b.n	800246a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40023800 	.word	0x40023800

08002478 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e07b      	b.n	8002582 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	2b00      	cmp	r3, #0
 8002490:	d108      	bne.n	80024a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800249a:	d009      	beq.n	80024b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	61da      	str	r2, [r3, #28]
 80024a2:	e005      	b.n	80024b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7fe fd62 	bl	8000f94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2202      	movs	r2, #2
 80024d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002520:	431a      	orrs	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002534:	ea42 0103 	orr.w	r1, r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	0c1b      	lsrs	r3, r3, #16
 800254e:	f003 0104 	and.w	r1, r3, #4
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	f003 0210 	and.w	r2, r3, #16
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	69da      	ldr	r2, [r3, #28]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002570:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b088      	sub	sp, #32
 800258e:	af00      	add	r7, sp, #0
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	603b      	str	r3, [r7, #0]
 8002596:	4613      	mov	r3, r2
 8002598:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_SPI_Transmit+0x22>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e126      	b.n	80027fa <HAL_SPI_Transmit+0x270>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025b4:	f7fe fee4 	bl	8001380 <HAL_GetTick>
 80025b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d002      	beq.n	80025d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80025ca:	2302      	movs	r3, #2
 80025cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025ce:	e10b      	b.n	80027e8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <HAL_SPI_Transmit+0x52>
 80025d6:	88fb      	ldrh	r3, [r7, #6]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025e0:	e102      	b.n	80027e8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2203      	movs	r2, #3
 80025e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	88fa      	ldrh	r2, [r7, #6]
 80025fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	88fa      	ldrh	r2, [r7, #6]
 8002600:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002628:	d10f      	bne.n	800264a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002638:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002648:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002654:	2b40      	cmp	r3, #64	; 0x40
 8002656:	d007      	beq.n	8002668 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002666:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002670:	d14b      	bne.n	800270a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <HAL_SPI_Transmit+0xf6>
 800267a:	8afb      	ldrh	r3, [r7, #22]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d13e      	bne.n	80026fe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	881a      	ldrh	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	1c9a      	adds	r2, r3, #2
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026a4:	e02b      	b.n	80026fe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d112      	bne.n	80026da <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	881a      	ldrh	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	1c9a      	adds	r2, r3, #2
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80026d8:	e011      	b.n	80026fe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026da:	f7fe fe51 	bl	8001380 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d803      	bhi.n	80026f2 <HAL_SPI_Transmit+0x168>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f0:	d102      	bne.n	80026f8 <HAL_SPI_Transmit+0x16e>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d102      	bne.n	80026fe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026fc:	e074      	b.n	80027e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002702:	b29b      	uxth	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1ce      	bne.n	80026a6 <HAL_SPI_Transmit+0x11c>
 8002708:	e04c      	b.n	80027a4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <HAL_SPI_Transmit+0x18e>
 8002712:	8afb      	ldrh	r3, [r7, #22]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d140      	bne.n	800279a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	330c      	adds	r3, #12
 8002722:	7812      	ldrb	r2, [r2, #0]
 8002724:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002734:	b29b      	uxth	r3, r3
 8002736:	3b01      	subs	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800273e:	e02c      	b.n	800279a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b02      	cmp	r3, #2
 800274c:	d113      	bne.n	8002776 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	330c      	adds	r3, #12
 8002758:	7812      	ldrb	r2, [r2, #0]
 800275a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	1c5a      	adds	r2, r3, #1
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800276a:	b29b      	uxth	r3, r3
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	86da      	strh	r2, [r3, #54]	; 0x36
 8002774:	e011      	b.n	800279a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002776:	f7fe fe03 	bl	8001380 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d803      	bhi.n	800278e <HAL_SPI_Transmit+0x204>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278c:	d102      	bne.n	8002794 <HAL_SPI_Transmit+0x20a>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d102      	bne.n	800279a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002798:	e026      	b.n	80027e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1cd      	bne.n	8002740 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	6839      	ldr	r1, [r7, #0]
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 faa1 	bl	8002cf0 <SPI_EndRxTxTransaction>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2220      	movs	r2, #32
 80027b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10a      	bne.n	80027d8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	77fb      	strb	r3, [r7, #31]
 80027e4:	e000      	b.n	80027e8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80027e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3720      	adds	r7, #32
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	4613      	mov	r3, r2
 8002810:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_SPI_Transmit_IT+0x20>
 8002820:	2302      	movs	r3, #2
 8002822:	e06f      	b.n	8002904 <HAL_SPI_Transmit_IT+0x100>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d002      	beq.n	8002838 <HAL_SPI_Transmit_IT+0x34>
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d102      	bne.n	800283e <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800283c:	e05d      	b.n	80028fa <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b01      	cmp	r3, #1
 8002848:	d002      	beq.n	8002850 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800284a:	2302      	movs	r3, #2
 800284c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800284e:	e054      	b.n	80028fa <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2203      	movs	r2, #3
 8002854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	88fa      	ldrh	r2, [r7, #6]
 8002868:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	88fa      	ldrh	r2, [r7, #6]
 800286e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4a1f      	ldr	r2, [pc, #124]	; (8002910 <HAL_SPI_Transmit_IT+0x10c>)
 8002894:	645a      	str	r2, [r3, #68]	; 0x44
 8002896:	e002      	b.n	800289e <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4a1e      	ldr	r2, [pc, #120]	; (8002914 <HAL_SPI_Transmit_IT+0x110>)
 800289c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028a6:	d10f      	bne.n	80028c8 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80028d6:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e2:	2b40      	cmp	r3, #64	; 0x40
 80028e4:	d008      	beq.n	80028f8 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	e000      	b.n	80028fa <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 80028f8:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002902:	7dfb      	ldrb	r3, [r7, #23]
}
 8002904:	4618      	mov	r0, r3
 8002906:	371c      	adds	r7, #28
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	08002b9b 	.word	0x08002b9b
 8002914:	08002b55 	.word	0x08002b55

08002918 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	099b      	lsrs	r3, r3, #6
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10f      	bne.n	800295c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	099b      	lsrs	r3, r3, #6
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d004      	beq.n	800295c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	4798      	blx	r3
    return;
 800295a:	e0d7      	b.n	8002b0c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	085b      	lsrs	r3, r3, #1
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <HAL_SPI_IRQHandler+0x66>
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	09db      	lsrs	r3, r3, #7
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d004      	beq.n	800297e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	4798      	blx	r3
    return;
 800297c:	e0c6      	b.n	8002b0c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	095b      	lsrs	r3, r3, #5
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10c      	bne.n	80029a4 <HAL_SPI_IRQHandler+0x8c>
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	099b      	lsrs	r3, r3, #6
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d106      	bne.n	80029a4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	0a1b      	lsrs	r3, r3, #8
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 80b4 	beq.w	8002b0c <HAL_SPI_IRQHandler+0x1f4>
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	095b      	lsrs	r3, r3, #5
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 80ad 	beq.w	8002b0c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	099b      	lsrs	r3, r3, #6
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d023      	beq.n	8002a06 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d011      	beq.n	80029ee <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ce:	f043 0204 	orr.w	r2, r3, #4
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	e00b      	b.n	8002a06 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	693b      	ldr	r3, [r7, #16]
        return;
 8002a04:	e082      	b.n	8002b0c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d014      	beq.n	8002a3c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a16:	f043 0201 	orr.w	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	0a1b      	lsrs	r3, r3, #8
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00c      	beq.n	8002a62 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4c:	f043 0208 	orr.w	r2, r3, #8
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002a54:	2300      	movs	r3, #0
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	60bb      	str	r3, [r7, #8]
 8002a60:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d04f      	beq.n	8002b0a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a78:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d104      	bne.n	8002a96 <HAL_SPI_IRQHandler+0x17e>
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d034      	beq.n	8002b00 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0203 	bic.w	r2, r2, #3
 8002aa4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d011      	beq.n	8002ad2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab2:	4a18      	ldr	r2, [pc, #96]	; (8002b14 <HAL_SPI_IRQHandler+0x1fc>)
 8002ab4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fda1 	bl	8001602 <HAL_DMA_Abort_IT>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d016      	beq.n	8002b08 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ade:	4a0d      	ldr	r2, [pc, #52]	; (8002b14 <HAL_SPI_IRQHandler+0x1fc>)
 8002ae0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fd8b 	bl	8001602 <HAL_DMA_Abort_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002afe:	e003      	b.n	8002b08 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f809 	bl	8002b18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002b06:	e000      	b.n	8002b0a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002b08:	bf00      	nop
    return;
 8002b0a:	bf00      	nop
  }
}
 8002b0c:	3720      	adds	r7, #32
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	08002b2d 	.word	0x08002b2d

08002b18 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b38:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f7ff ffe6 	bl	8002b18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b4c:	bf00      	nop
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	330c      	adds	r3, #12
 8002b66:	7812      	ldrb	r2, [r2, #0]
 8002b68:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d102      	bne.n	8002b92 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f8f1 	bl	8002d74 <SPI_CloseTx_ISR>
  }
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	881a      	ldrh	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	1c9a      	adds	r2, r3, #2
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d102      	bne.n	8002bd6 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f8cf 	bl	8002d74 <SPI_CloseTx_ISR>
  }
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	4613      	mov	r3, r2
 8002bee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002bf0:	f7fe fbc6 	bl	8001380 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c00:	f7fe fbbe 	bl	8001380 <HAL_GetTick>
 8002c04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c06:	4b39      	ldr	r3, [pc, #228]	; (8002cec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	015b      	lsls	r3, r3, #5
 8002c0c:	0d1b      	lsrs	r3, r3, #20
 8002c0e:	69fa      	ldr	r2, [r7, #28]
 8002c10:	fb02 f303 	mul.w	r3, r2, r3
 8002c14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c16:	e054      	b.n	8002cc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1e:	d050      	beq.n	8002cc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c20:	f7fe fbae 	bl	8001380 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	69fa      	ldr	r2, [r7, #28]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d902      	bls.n	8002c36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d13d      	bne.n	8002cb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c4e:	d111      	bne.n	8002c74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c58:	d004      	beq.n	8002c64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c62:	d107      	bne.n	8002c74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c7c:	d10f      	bne.n	8002c9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e017      	b.n	8002ce2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	bf0c      	ite	eq
 8002cd2:	2301      	moveq	r3, #1
 8002cd4:	2300      	movne	r3, #0
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d19b      	bne.n	8002c18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3720      	adds	r7, #32
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000228 	.word	0x20000228

08002cf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <SPI_EndRxTxTransaction+0x7c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a1b      	ldr	r2, [pc, #108]	; (8002d70 <SPI_EndRxTxTransaction+0x80>)
 8002d02:	fba2 2303 	umull	r2, r3, r2, r3
 8002d06:	0d5b      	lsrs	r3, r3, #21
 8002d08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d0c:	fb02 f303 	mul.w	r3, r2, r3
 8002d10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d1a:	d112      	bne.n	8002d42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2200      	movs	r2, #0
 8002d24:	2180      	movs	r1, #128	; 0x80
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f7ff ff5a 	bl	8002be0 <SPI_WaitFlagStateUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d016      	beq.n	8002d60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d36:	f043 0220 	orr.w	r2, r3, #32
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e00f      	b.n	8002d62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00a      	beq.n	8002d5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d58:	2b80      	cmp	r3, #128	; 0x80
 8002d5a:	d0f2      	beq.n	8002d42 <SPI_EndRxTxTransaction+0x52>
 8002d5c:	e000      	b.n	8002d60 <SPI_EndRxTxTransaction+0x70>
        break;
 8002d5e:	bf00      	nop
  }

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000228 	.word	0x20000228
 8002d70:	165e9f81 	.word	0x165e9f81

08002d74 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002d7c:	4b2c      	ldr	r3, [pc, #176]	; (8002e30 <SPI_CloseTx_ISR+0xbc>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a2c      	ldr	r2, [pc, #176]	; (8002e34 <SPI_CloseTx_ISR+0xc0>)
 8002d82:	fba2 2303 	umull	r2, r3, r2, r3
 8002d86:	0a5b      	lsrs	r3, r3, #9
 8002d88:	2264      	movs	r2, #100	; 0x64
 8002d8a:	fb02 f303 	mul.w	r3, r2, r3
 8002d8e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d90:	f7fe faf6 	bl	8001380 <HAL_GetTick>
 8002d94:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d106      	bne.n	8002daa <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da0:	f043 0220 	orr.w	r2, r3, #32
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002da8:	e009      	b.n	8002dbe <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0eb      	beq.n	8002d96 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002dcc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	2164      	movs	r1, #100	; 0x64
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7ff ff8c 	bl	8002cf0 <SPI_EndRxTxTransaction>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d005      	beq.n	8002dea <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de2:	f043 0220 	orr.w	r2, r3, #32
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10a      	bne.n	8002e08 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002df2:	2300      	movs	r3, #0
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff fe7d 	bl	8002b18 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8002e1e:	e002      	b.n	8002e26 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7fd feb1 	bl	8000b88 <HAL_SPI_TxCpltCallback>
}
 8002e26:	bf00      	nop
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000228 	.word	0x20000228
 8002e34:	057619f1 	.word	0x057619f1

08002e38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e03f      	b.n	8002eca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7fe f9b6 	bl	80011d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2224      	movs	r2, #36	; 0x24
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f829 	bl	8002ed4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695a      	ldr	r2, [r3, #20]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ea0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002eb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ed8:	b09f      	sub	sp, #124	; 0x7c
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eea:	68d9      	ldr	r1, [r3, #12]
 8002eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	ea40 0301 	orr.w	r3, r0, r1
 8002ef4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	431a      	orrs	r2, r3
 8002f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	431a      	orrs	r2, r3
 8002f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f18:	f021 010c 	bic.w	r1, r1, #12
 8002f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f22:	430b      	orrs	r3, r1
 8002f24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f32:	6999      	ldr	r1, [r3, #24]
 8002f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	ea40 0301 	orr.w	r3, r0, r1
 8002f3c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	4bc5      	ldr	r3, [pc, #788]	; (8003258 <UART_SetConfig+0x384>)
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d004      	beq.n	8002f52 <UART_SetConfig+0x7e>
 8002f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4bc3      	ldr	r3, [pc, #780]	; (800325c <UART_SetConfig+0x388>)
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d103      	bne.n	8002f5a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f52:	f7fe fe2d 	bl	8001bb0 <HAL_RCC_GetPCLK2Freq>
 8002f56:	6778      	str	r0, [r7, #116]	; 0x74
 8002f58:	e002      	b.n	8002f60 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f5a:	f7fe fe15 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 8002f5e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f68:	f040 80b6 	bne.w	80030d8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f6e:	461c      	mov	r4, r3
 8002f70:	f04f 0500 	mov.w	r5, #0
 8002f74:	4622      	mov	r2, r4
 8002f76:	462b      	mov	r3, r5
 8002f78:	1891      	adds	r1, r2, r2
 8002f7a:	6439      	str	r1, [r7, #64]	; 0x40
 8002f7c:	415b      	adcs	r3, r3
 8002f7e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f84:	1912      	adds	r2, r2, r4
 8002f86:	eb45 0303 	adc.w	r3, r5, r3
 8002f8a:	f04f 0000 	mov.w	r0, #0
 8002f8e:	f04f 0100 	mov.w	r1, #0
 8002f92:	00d9      	lsls	r1, r3, #3
 8002f94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f98:	00d0      	lsls	r0, r2, #3
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	1911      	adds	r1, r2, r4
 8002fa0:	6639      	str	r1, [r7, #96]	; 0x60
 8002fa2:	416b      	adcs	r3, r5
 8002fa4:	667b      	str	r3, [r7, #100]	; 0x64
 8002fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	1891      	adds	r1, r2, r2
 8002fb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fb4:	415b      	adcs	r3, r3
 8002fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fbc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002fc0:	f7fd f976 	bl	80002b0 <__aeabi_uldivmod>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4ba5      	ldr	r3, [pc, #660]	; (8003260 <UART_SetConfig+0x38c>)
 8002fca:	fba3 2302 	umull	r2, r3, r3, r2
 8002fce:	095b      	lsrs	r3, r3, #5
 8002fd0:	011e      	lsls	r6, r3, #4
 8002fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fd4:	461c      	mov	r4, r3
 8002fd6:	f04f 0500 	mov.w	r5, #0
 8002fda:	4622      	mov	r2, r4
 8002fdc:	462b      	mov	r3, r5
 8002fde:	1891      	adds	r1, r2, r2
 8002fe0:	6339      	str	r1, [r7, #48]	; 0x30
 8002fe2:	415b      	adcs	r3, r3
 8002fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8002fe6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002fea:	1912      	adds	r2, r2, r4
 8002fec:	eb45 0303 	adc.w	r3, r5, r3
 8002ff0:	f04f 0000 	mov.w	r0, #0
 8002ff4:	f04f 0100 	mov.w	r1, #0
 8002ff8:	00d9      	lsls	r1, r3, #3
 8002ffa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ffe:	00d0      	lsls	r0, r2, #3
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	1911      	adds	r1, r2, r4
 8003006:	65b9      	str	r1, [r7, #88]	; 0x58
 8003008:	416b      	adcs	r3, r5
 800300a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800300c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	461a      	mov	r2, r3
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	1891      	adds	r1, r2, r2
 8003018:	62b9      	str	r1, [r7, #40]	; 0x28
 800301a:	415b      	adcs	r3, r3
 800301c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800301e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003022:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003026:	f7fd f943 	bl	80002b0 <__aeabi_uldivmod>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4b8c      	ldr	r3, [pc, #560]	; (8003260 <UART_SetConfig+0x38c>)
 8003030:	fba3 1302 	umull	r1, r3, r3, r2
 8003034:	095b      	lsrs	r3, r3, #5
 8003036:	2164      	movs	r1, #100	; 0x64
 8003038:	fb01 f303 	mul.w	r3, r1, r3
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	3332      	adds	r3, #50	; 0x32
 8003042:	4a87      	ldr	r2, [pc, #540]	; (8003260 <UART_SetConfig+0x38c>)
 8003044:	fba2 2303 	umull	r2, r3, r2, r3
 8003048:	095b      	lsrs	r3, r3, #5
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003050:	441e      	add	r6, r3
 8003052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003054:	4618      	mov	r0, r3
 8003056:	f04f 0100 	mov.w	r1, #0
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	1894      	adds	r4, r2, r2
 8003060:	623c      	str	r4, [r7, #32]
 8003062:	415b      	adcs	r3, r3
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
 8003066:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800306a:	1812      	adds	r2, r2, r0
 800306c:	eb41 0303 	adc.w	r3, r1, r3
 8003070:	f04f 0400 	mov.w	r4, #0
 8003074:	f04f 0500 	mov.w	r5, #0
 8003078:	00dd      	lsls	r5, r3, #3
 800307a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800307e:	00d4      	lsls	r4, r2, #3
 8003080:	4622      	mov	r2, r4
 8003082:	462b      	mov	r3, r5
 8003084:	1814      	adds	r4, r2, r0
 8003086:	653c      	str	r4, [r7, #80]	; 0x50
 8003088:	414b      	adcs	r3, r1
 800308a:	657b      	str	r3, [r7, #84]	; 0x54
 800308c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	461a      	mov	r2, r3
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	1891      	adds	r1, r2, r2
 8003098:	61b9      	str	r1, [r7, #24]
 800309a:	415b      	adcs	r3, r3
 800309c:	61fb      	str	r3, [r7, #28]
 800309e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80030a6:	f7fd f903 	bl	80002b0 <__aeabi_uldivmod>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4b6c      	ldr	r3, [pc, #432]	; (8003260 <UART_SetConfig+0x38c>)
 80030b0:	fba3 1302 	umull	r1, r3, r3, r2
 80030b4:	095b      	lsrs	r3, r3, #5
 80030b6:	2164      	movs	r1, #100	; 0x64
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	3332      	adds	r3, #50	; 0x32
 80030c2:	4a67      	ldr	r2, [pc, #412]	; (8003260 <UART_SetConfig+0x38c>)
 80030c4:	fba2 2303 	umull	r2, r3, r2, r3
 80030c8:	095b      	lsrs	r3, r3, #5
 80030ca:	f003 0207 	and.w	r2, r3, #7
 80030ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4432      	add	r2, r6
 80030d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030d6:	e0b9      	b.n	800324c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030da:	461c      	mov	r4, r3
 80030dc:	f04f 0500 	mov.w	r5, #0
 80030e0:	4622      	mov	r2, r4
 80030e2:	462b      	mov	r3, r5
 80030e4:	1891      	adds	r1, r2, r2
 80030e6:	6139      	str	r1, [r7, #16]
 80030e8:	415b      	adcs	r3, r3
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80030f0:	1912      	adds	r2, r2, r4
 80030f2:	eb45 0303 	adc.w	r3, r5, r3
 80030f6:	f04f 0000 	mov.w	r0, #0
 80030fa:	f04f 0100 	mov.w	r1, #0
 80030fe:	00d9      	lsls	r1, r3, #3
 8003100:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003104:	00d0      	lsls	r0, r2, #3
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	eb12 0804 	adds.w	r8, r2, r4
 800310e:	eb43 0905 	adc.w	r9, r3, r5
 8003112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4618      	mov	r0, r3
 8003118:	f04f 0100 	mov.w	r1, #0
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	008b      	lsls	r3, r1, #2
 8003126:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800312a:	0082      	lsls	r2, r0, #2
 800312c:	4640      	mov	r0, r8
 800312e:	4649      	mov	r1, r9
 8003130:	f7fd f8be 	bl	80002b0 <__aeabi_uldivmod>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4b49      	ldr	r3, [pc, #292]	; (8003260 <UART_SetConfig+0x38c>)
 800313a:	fba3 2302 	umull	r2, r3, r3, r2
 800313e:	095b      	lsrs	r3, r3, #5
 8003140:	011e      	lsls	r6, r3, #4
 8003142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003144:	4618      	mov	r0, r3
 8003146:	f04f 0100 	mov.w	r1, #0
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	1894      	adds	r4, r2, r2
 8003150:	60bc      	str	r4, [r7, #8]
 8003152:	415b      	adcs	r3, r3
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800315a:	1812      	adds	r2, r2, r0
 800315c:	eb41 0303 	adc.w	r3, r1, r3
 8003160:	f04f 0400 	mov.w	r4, #0
 8003164:	f04f 0500 	mov.w	r5, #0
 8003168:	00dd      	lsls	r5, r3, #3
 800316a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800316e:	00d4      	lsls	r4, r2, #3
 8003170:	4622      	mov	r2, r4
 8003172:	462b      	mov	r3, r5
 8003174:	1814      	adds	r4, r2, r0
 8003176:	64bc      	str	r4, [r7, #72]	; 0x48
 8003178:	414b      	adcs	r3, r1
 800317a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800317c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	4618      	mov	r0, r3
 8003182:	f04f 0100 	mov.w	r1, #0
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	008b      	lsls	r3, r1, #2
 8003190:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003194:	0082      	lsls	r2, r0, #2
 8003196:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800319a:	f7fd f889 	bl	80002b0 <__aeabi_uldivmod>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	4b2f      	ldr	r3, [pc, #188]	; (8003260 <UART_SetConfig+0x38c>)
 80031a4:	fba3 1302 	umull	r1, r3, r3, r2
 80031a8:	095b      	lsrs	r3, r3, #5
 80031aa:	2164      	movs	r1, #100	; 0x64
 80031ac:	fb01 f303 	mul.w	r3, r1, r3
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	3332      	adds	r3, #50	; 0x32
 80031b6:	4a2a      	ldr	r2, [pc, #168]	; (8003260 <UART_SetConfig+0x38c>)
 80031b8:	fba2 2303 	umull	r2, r3, r2, r3
 80031bc:	095b      	lsrs	r3, r3, #5
 80031be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c2:	441e      	add	r6, r3
 80031c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031c6:	4618      	mov	r0, r3
 80031c8:	f04f 0100 	mov.w	r1, #0
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	1894      	adds	r4, r2, r2
 80031d2:	603c      	str	r4, [r7, #0]
 80031d4:	415b      	adcs	r3, r3
 80031d6:	607b      	str	r3, [r7, #4]
 80031d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031dc:	1812      	adds	r2, r2, r0
 80031de:	eb41 0303 	adc.w	r3, r1, r3
 80031e2:	f04f 0400 	mov.w	r4, #0
 80031e6:	f04f 0500 	mov.w	r5, #0
 80031ea:	00dd      	lsls	r5, r3, #3
 80031ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80031f0:	00d4      	lsls	r4, r2, #3
 80031f2:	4622      	mov	r2, r4
 80031f4:	462b      	mov	r3, r5
 80031f6:	eb12 0a00 	adds.w	sl, r2, r0
 80031fa:	eb43 0b01 	adc.w	fp, r3, r1
 80031fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4618      	mov	r0, r3
 8003204:	f04f 0100 	mov.w	r1, #0
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	008b      	lsls	r3, r1, #2
 8003212:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003216:	0082      	lsls	r2, r0, #2
 8003218:	4650      	mov	r0, sl
 800321a:	4659      	mov	r1, fp
 800321c:	f7fd f848 	bl	80002b0 <__aeabi_uldivmod>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <UART_SetConfig+0x38c>)
 8003226:	fba3 1302 	umull	r1, r3, r3, r2
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	2164      	movs	r1, #100	; 0x64
 800322e:	fb01 f303 	mul.w	r3, r1, r3
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	3332      	adds	r3, #50	; 0x32
 8003238:	4a09      	ldr	r2, [pc, #36]	; (8003260 <UART_SetConfig+0x38c>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	f003 020f 	and.w	r2, r3, #15
 8003244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4432      	add	r2, r6
 800324a:	609a      	str	r2, [r3, #8]
}
 800324c:	bf00      	nop
 800324e:	377c      	adds	r7, #124	; 0x7c
 8003250:	46bd      	mov	sp, r7
 8003252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003256:	bf00      	nop
 8003258:	40011000 	.word	0x40011000
 800325c:	40011400 	.word	0x40011400
 8003260:	51eb851f 	.word	0x51eb851f

08003264 <__errno>:
 8003264:	4b01      	ldr	r3, [pc, #4]	; (800326c <__errno+0x8>)
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20000234 	.word	0x20000234

08003270 <__libc_init_array>:
 8003270:	b570      	push	{r4, r5, r6, lr}
 8003272:	4d0d      	ldr	r5, [pc, #52]	; (80032a8 <__libc_init_array+0x38>)
 8003274:	4c0d      	ldr	r4, [pc, #52]	; (80032ac <__libc_init_array+0x3c>)
 8003276:	1b64      	subs	r4, r4, r5
 8003278:	10a4      	asrs	r4, r4, #2
 800327a:	2600      	movs	r6, #0
 800327c:	42a6      	cmp	r6, r4
 800327e:	d109      	bne.n	8003294 <__libc_init_array+0x24>
 8003280:	4d0b      	ldr	r5, [pc, #44]	; (80032b0 <__libc_init_array+0x40>)
 8003282:	4c0c      	ldr	r4, [pc, #48]	; (80032b4 <__libc_init_array+0x44>)
 8003284:	f000 fc4e 	bl	8003b24 <_init>
 8003288:	1b64      	subs	r4, r4, r5
 800328a:	10a4      	asrs	r4, r4, #2
 800328c:	2600      	movs	r6, #0
 800328e:	42a6      	cmp	r6, r4
 8003290:	d105      	bne.n	800329e <__libc_init_array+0x2e>
 8003292:	bd70      	pop	{r4, r5, r6, pc}
 8003294:	f855 3b04 	ldr.w	r3, [r5], #4
 8003298:	4798      	blx	r3
 800329a:	3601      	adds	r6, #1
 800329c:	e7ee      	b.n	800327c <__libc_init_array+0xc>
 800329e:	f855 3b04 	ldr.w	r3, [r5], #4
 80032a2:	4798      	blx	r3
 80032a4:	3601      	adds	r6, #1
 80032a6:	e7f2      	b.n	800328e <__libc_init_array+0x1e>
 80032a8:	08003db8 	.word	0x08003db8
 80032ac:	08003db8 	.word	0x08003db8
 80032b0:	08003db8 	.word	0x08003db8
 80032b4:	08003dbc 	.word	0x08003dbc

080032b8 <memset>:
 80032b8:	4402      	add	r2, r0
 80032ba:	4603      	mov	r3, r0
 80032bc:	4293      	cmp	r3, r2
 80032be:	d100      	bne.n	80032c2 <memset+0xa>
 80032c0:	4770      	bx	lr
 80032c2:	f803 1b01 	strb.w	r1, [r3], #1
 80032c6:	e7f9      	b.n	80032bc <memset+0x4>

080032c8 <siprintf>:
 80032c8:	b40e      	push	{r1, r2, r3}
 80032ca:	b500      	push	{lr}
 80032cc:	b09c      	sub	sp, #112	; 0x70
 80032ce:	ab1d      	add	r3, sp, #116	; 0x74
 80032d0:	9002      	str	r0, [sp, #8]
 80032d2:	9006      	str	r0, [sp, #24]
 80032d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80032d8:	4809      	ldr	r0, [pc, #36]	; (8003300 <siprintf+0x38>)
 80032da:	9107      	str	r1, [sp, #28]
 80032dc:	9104      	str	r1, [sp, #16]
 80032de:	4909      	ldr	r1, [pc, #36]	; (8003304 <siprintf+0x3c>)
 80032e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80032e4:	9105      	str	r1, [sp, #20]
 80032e6:	6800      	ldr	r0, [r0, #0]
 80032e8:	9301      	str	r3, [sp, #4]
 80032ea:	a902      	add	r1, sp, #8
 80032ec:	f000 f868 	bl	80033c0 <_svfiprintf_r>
 80032f0:	9b02      	ldr	r3, [sp, #8]
 80032f2:	2200      	movs	r2, #0
 80032f4:	701a      	strb	r2, [r3, #0]
 80032f6:	b01c      	add	sp, #112	; 0x70
 80032f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80032fc:	b003      	add	sp, #12
 80032fe:	4770      	bx	lr
 8003300:	20000234 	.word	0x20000234
 8003304:	ffff0208 	.word	0xffff0208

08003308 <__ssputs_r>:
 8003308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800330c:	688e      	ldr	r6, [r1, #8]
 800330e:	429e      	cmp	r6, r3
 8003310:	4682      	mov	sl, r0
 8003312:	460c      	mov	r4, r1
 8003314:	4690      	mov	r8, r2
 8003316:	461f      	mov	r7, r3
 8003318:	d838      	bhi.n	800338c <__ssputs_r+0x84>
 800331a:	898a      	ldrh	r2, [r1, #12]
 800331c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003320:	d032      	beq.n	8003388 <__ssputs_r+0x80>
 8003322:	6825      	ldr	r5, [r4, #0]
 8003324:	6909      	ldr	r1, [r1, #16]
 8003326:	eba5 0901 	sub.w	r9, r5, r1
 800332a:	6965      	ldr	r5, [r4, #20]
 800332c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003330:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003334:	3301      	adds	r3, #1
 8003336:	444b      	add	r3, r9
 8003338:	106d      	asrs	r5, r5, #1
 800333a:	429d      	cmp	r5, r3
 800333c:	bf38      	it	cc
 800333e:	461d      	movcc	r5, r3
 8003340:	0553      	lsls	r3, r2, #21
 8003342:	d531      	bpl.n	80033a8 <__ssputs_r+0xa0>
 8003344:	4629      	mov	r1, r5
 8003346:	f000 fb47 	bl	80039d8 <_malloc_r>
 800334a:	4606      	mov	r6, r0
 800334c:	b950      	cbnz	r0, 8003364 <__ssputs_r+0x5c>
 800334e:	230c      	movs	r3, #12
 8003350:	f8ca 3000 	str.w	r3, [sl]
 8003354:	89a3      	ldrh	r3, [r4, #12]
 8003356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800335a:	81a3      	strh	r3, [r4, #12]
 800335c:	f04f 30ff 	mov.w	r0, #4294967295
 8003360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003364:	6921      	ldr	r1, [r4, #16]
 8003366:	464a      	mov	r2, r9
 8003368:	f000 fabe 	bl	80038e8 <memcpy>
 800336c:	89a3      	ldrh	r3, [r4, #12]
 800336e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003376:	81a3      	strh	r3, [r4, #12]
 8003378:	6126      	str	r6, [r4, #16]
 800337a:	6165      	str	r5, [r4, #20]
 800337c:	444e      	add	r6, r9
 800337e:	eba5 0509 	sub.w	r5, r5, r9
 8003382:	6026      	str	r6, [r4, #0]
 8003384:	60a5      	str	r5, [r4, #8]
 8003386:	463e      	mov	r6, r7
 8003388:	42be      	cmp	r6, r7
 800338a:	d900      	bls.n	800338e <__ssputs_r+0x86>
 800338c:	463e      	mov	r6, r7
 800338e:	4632      	mov	r2, r6
 8003390:	6820      	ldr	r0, [r4, #0]
 8003392:	4641      	mov	r1, r8
 8003394:	f000 fab6 	bl	8003904 <memmove>
 8003398:	68a3      	ldr	r3, [r4, #8]
 800339a:	6822      	ldr	r2, [r4, #0]
 800339c:	1b9b      	subs	r3, r3, r6
 800339e:	4432      	add	r2, r6
 80033a0:	60a3      	str	r3, [r4, #8]
 80033a2:	6022      	str	r2, [r4, #0]
 80033a4:	2000      	movs	r0, #0
 80033a6:	e7db      	b.n	8003360 <__ssputs_r+0x58>
 80033a8:	462a      	mov	r2, r5
 80033aa:	f000 fb6f 	bl	8003a8c <_realloc_r>
 80033ae:	4606      	mov	r6, r0
 80033b0:	2800      	cmp	r0, #0
 80033b2:	d1e1      	bne.n	8003378 <__ssputs_r+0x70>
 80033b4:	6921      	ldr	r1, [r4, #16]
 80033b6:	4650      	mov	r0, sl
 80033b8:	f000 fabe 	bl	8003938 <_free_r>
 80033bc:	e7c7      	b.n	800334e <__ssputs_r+0x46>
	...

080033c0 <_svfiprintf_r>:
 80033c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033c4:	4698      	mov	r8, r3
 80033c6:	898b      	ldrh	r3, [r1, #12]
 80033c8:	061b      	lsls	r3, r3, #24
 80033ca:	b09d      	sub	sp, #116	; 0x74
 80033cc:	4607      	mov	r7, r0
 80033ce:	460d      	mov	r5, r1
 80033d0:	4614      	mov	r4, r2
 80033d2:	d50e      	bpl.n	80033f2 <_svfiprintf_r+0x32>
 80033d4:	690b      	ldr	r3, [r1, #16]
 80033d6:	b963      	cbnz	r3, 80033f2 <_svfiprintf_r+0x32>
 80033d8:	2140      	movs	r1, #64	; 0x40
 80033da:	f000 fafd 	bl	80039d8 <_malloc_r>
 80033de:	6028      	str	r0, [r5, #0]
 80033e0:	6128      	str	r0, [r5, #16]
 80033e2:	b920      	cbnz	r0, 80033ee <_svfiprintf_r+0x2e>
 80033e4:	230c      	movs	r3, #12
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	f04f 30ff 	mov.w	r0, #4294967295
 80033ec:	e0d1      	b.n	8003592 <_svfiprintf_r+0x1d2>
 80033ee:	2340      	movs	r3, #64	; 0x40
 80033f0:	616b      	str	r3, [r5, #20]
 80033f2:	2300      	movs	r3, #0
 80033f4:	9309      	str	r3, [sp, #36]	; 0x24
 80033f6:	2320      	movs	r3, #32
 80033f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003400:	2330      	movs	r3, #48	; 0x30
 8003402:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80035ac <_svfiprintf_r+0x1ec>
 8003406:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800340a:	f04f 0901 	mov.w	r9, #1
 800340e:	4623      	mov	r3, r4
 8003410:	469a      	mov	sl, r3
 8003412:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003416:	b10a      	cbz	r2, 800341c <_svfiprintf_r+0x5c>
 8003418:	2a25      	cmp	r2, #37	; 0x25
 800341a:	d1f9      	bne.n	8003410 <_svfiprintf_r+0x50>
 800341c:	ebba 0b04 	subs.w	fp, sl, r4
 8003420:	d00b      	beq.n	800343a <_svfiprintf_r+0x7a>
 8003422:	465b      	mov	r3, fp
 8003424:	4622      	mov	r2, r4
 8003426:	4629      	mov	r1, r5
 8003428:	4638      	mov	r0, r7
 800342a:	f7ff ff6d 	bl	8003308 <__ssputs_r>
 800342e:	3001      	adds	r0, #1
 8003430:	f000 80aa 	beq.w	8003588 <_svfiprintf_r+0x1c8>
 8003434:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003436:	445a      	add	r2, fp
 8003438:	9209      	str	r2, [sp, #36]	; 0x24
 800343a:	f89a 3000 	ldrb.w	r3, [sl]
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 80a2 	beq.w	8003588 <_svfiprintf_r+0x1c8>
 8003444:	2300      	movs	r3, #0
 8003446:	f04f 32ff 	mov.w	r2, #4294967295
 800344a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800344e:	f10a 0a01 	add.w	sl, sl, #1
 8003452:	9304      	str	r3, [sp, #16]
 8003454:	9307      	str	r3, [sp, #28]
 8003456:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800345a:	931a      	str	r3, [sp, #104]	; 0x68
 800345c:	4654      	mov	r4, sl
 800345e:	2205      	movs	r2, #5
 8003460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003464:	4851      	ldr	r0, [pc, #324]	; (80035ac <_svfiprintf_r+0x1ec>)
 8003466:	f7fc fed3 	bl	8000210 <memchr>
 800346a:	9a04      	ldr	r2, [sp, #16]
 800346c:	b9d8      	cbnz	r0, 80034a6 <_svfiprintf_r+0xe6>
 800346e:	06d0      	lsls	r0, r2, #27
 8003470:	bf44      	itt	mi
 8003472:	2320      	movmi	r3, #32
 8003474:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003478:	0711      	lsls	r1, r2, #28
 800347a:	bf44      	itt	mi
 800347c:	232b      	movmi	r3, #43	; 0x2b
 800347e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003482:	f89a 3000 	ldrb.w	r3, [sl]
 8003486:	2b2a      	cmp	r3, #42	; 0x2a
 8003488:	d015      	beq.n	80034b6 <_svfiprintf_r+0xf6>
 800348a:	9a07      	ldr	r2, [sp, #28]
 800348c:	4654      	mov	r4, sl
 800348e:	2000      	movs	r0, #0
 8003490:	f04f 0c0a 	mov.w	ip, #10
 8003494:	4621      	mov	r1, r4
 8003496:	f811 3b01 	ldrb.w	r3, [r1], #1
 800349a:	3b30      	subs	r3, #48	; 0x30
 800349c:	2b09      	cmp	r3, #9
 800349e:	d94e      	bls.n	800353e <_svfiprintf_r+0x17e>
 80034a0:	b1b0      	cbz	r0, 80034d0 <_svfiprintf_r+0x110>
 80034a2:	9207      	str	r2, [sp, #28]
 80034a4:	e014      	b.n	80034d0 <_svfiprintf_r+0x110>
 80034a6:	eba0 0308 	sub.w	r3, r0, r8
 80034aa:	fa09 f303 	lsl.w	r3, r9, r3
 80034ae:	4313      	orrs	r3, r2
 80034b0:	9304      	str	r3, [sp, #16]
 80034b2:	46a2      	mov	sl, r4
 80034b4:	e7d2      	b.n	800345c <_svfiprintf_r+0x9c>
 80034b6:	9b03      	ldr	r3, [sp, #12]
 80034b8:	1d19      	adds	r1, r3, #4
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	9103      	str	r1, [sp, #12]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	bfbb      	ittet	lt
 80034c2:	425b      	neglt	r3, r3
 80034c4:	f042 0202 	orrlt.w	r2, r2, #2
 80034c8:	9307      	strge	r3, [sp, #28]
 80034ca:	9307      	strlt	r3, [sp, #28]
 80034cc:	bfb8      	it	lt
 80034ce:	9204      	strlt	r2, [sp, #16]
 80034d0:	7823      	ldrb	r3, [r4, #0]
 80034d2:	2b2e      	cmp	r3, #46	; 0x2e
 80034d4:	d10c      	bne.n	80034f0 <_svfiprintf_r+0x130>
 80034d6:	7863      	ldrb	r3, [r4, #1]
 80034d8:	2b2a      	cmp	r3, #42	; 0x2a
 80034da:	d135      	bne.n	8003548 <_svfiprintf_r+0x188>
 80034dc:	9b03      	ldr	r3, [sp, #12]
 80034de:	1d1a      	adds	r2, r3, #4
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	9203      	str	r2, [sp, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	bfb8      	it	lt
 80034e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80034ec:	3402      	adds	r4, #2
 80034ee:	9305      	str	r3, [sp, #20]
 80034f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80035bc <_svfiprintf_r+0x1fc>
 80034f4:	7821      	ldrb	r1, [r4, #0]
 80034f6:	2203      	movs	r2, #3
 80034f8:	4650      	mov	r0, sl
 80034fa:	f7fc fe89 	bl	8000210 <memchr>
 80034fe:	b140      	cbz	r0, 8003512 <_svfiprintf_r+0x152>
 8003500:	2340      	movs	r3, #64	; 0x40
 8003502:	eba0 000a 	sub.w	r0, r0, sl
 8003506:	fa03 f000 	lsl.w	r0, r3, r0
 800350a:	9b04      	ldr	r3, [sp, #16]
 800350c:	4303      	orrs	r3, r0
 800350e:	3401      	adds	r4, #1
 8003510:	9304      	str	r3, [sp, #16]
 8003512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003516:	4826      	ldr	r0, [pc, #152]	; (80035b0 <_svfiprintf_r+0x1f0>)
 8003518:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800351c:	2206      	movs	r2, #6
 800351e:	f7fc fe77 	bl	8000210 <memchr>
 8003522:	2800      	cmp	r0, #0
 8003524:	d038      	beq.n	8003598 <_svfiprintf_r+0x1d8>
 8003526:	4b23      	ldr	r3, [pc, #140]	; (80035b4 <_svfiprintf_r+0x1f4>)
 8003528:	bb1b      	cbnz	r3, 8003572 <_svfiprintf_r+0x1b2>
 800352a:	9b03      	ldr	r3, [sp, #12]
 800352c:	3307      	adds	r3, #7
 800352e:	f023 0307 	bic.w	r3, r3, #7
 8003532:	3308      	adds	r3, #8
 8003534:	9303      	str	r3, [sp, #12]
 8003536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003538:	4433      	add	r3, r6
 800353a:	9309      	str	r3, [sp, #36]	; 0x24
 800353c:	e767      	b.n	800340e <_svfiprintf_r+0x4e>
 800353e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003542:	460c      	mov	r4, r1
 8003544:	2001      	movs	r0, #1
 8003546:	e7a5      	b.n	8003494 <_svfiprintf_r+0xd4>
 8003548:	2300      	movs	r3, #0
 800354a:	3401      	adds	r4, #1
 800354c:	9305      	str	r3, [sp, #20]
 800354e:	4619      	mov	r1, r3
 8003550:	f04f 0c0a 	mov.w	ip, #10
 8003554:	4620      	mov	r0, r4
 8003556:	f810 2b01 	ldrb.w	r2, [r0], #1
 800355a:	3a30      	subs	r2, #48	; 0x30
 800355c:	2a09      	cmp	r2, #9
 800355e:	d903      	bls.n	8003568 <_svfiprintf_r+0x1a8>
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0c5      	beq.n	80034f0 <_svfiprintf_r+0x130>
 8003564:	9105      	str	r1, [sp, #20]
 8003566:	e7c3      	b.n	80034f0 <_svfiprintf_r+0x130>
 8003568:	fb0c 2101 	mla	r1, ip, r1, r2
 800356c:	4604      	mov	r4, r0
 800356e:	2301      	movs	r3, #1
 8003570:	e7f0      	b.n	8003554 <_svfiprintf_r+0x194>
 8003572:	ab03      	add	r3, sp, #12
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	462a      	mov	r2, r5
 8003578:	4b0f      	ldr	r3, [pc, #60]	; (80035b8 <_svfiprintf_r+0x1f8>)
 800357a:	a904      	add	r1, sp, #16
 800357c:	4638      	mov	r0, r7
 800357e:	f3af 8000 	nop.w
 8003582:	1c42      	adds	r2, r0, #1
 8003584:	4606      	mov	r6, r0
 8003586:	d1d6      	bne.n	8003536 <_svfiprintf_r+0x176>
 8003588:	89ab      	ldrh	r3, [r5, #12]
 800358a:	065b      	lsls	r3, r3, #25
 800358c:	f53f af2c 	bmi.w	80033e8 <_svfiprintf_r+0x28>
 8003590:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003592:	b01d      	add	sp, #116	; 0x74
 8003594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003598:	ab03      	add	r3, sp, #12
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	462a      	mov	r2, r5
 800359e:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <_svfiprintf_r+0x1f8>)
 80035a0:	a904      	add	r1, sp, #16
 80035a2:	4638      	mov	r0, r7
 80035a4:	f000 f87a 	bl	800369c <_printf_i>
 80035a8:	e7eb      	b.n	8003582 <_svfiprintf_r+0x1c2>
 80035aa:	bf00      	nop
 80035ac:	08003d7c 	.word	0x08003d7c
 80035b0:	08003d86 	.word	0x08003d86
 80035b4:	00000000 	.word	0x00000000
 80035b8:	08003309 	.word	0x08003309
 80035bc:	08003d82 	.word	0x08003d82

080035c0 <_printf_common>:
 80035c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035c4:	4616      	mov	r6, r2
 80035c6:	4699      	mov	r9, r3
 80035c8:	688a      	ldr	r2, [r1, #8]
 80035ca:	690b      	ldr	r3, [r1, #16]
 80035cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035d0:	4293      	cmp	r3, r2
 80035d2:	bfb8      	it	lt
 80035d4:	4613      	movlt	r3, r2
 80035d6:	6033      	str	r3, [r6, #0]
 80035d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035dc:	4607      	mov	r7, r0
 80035de:	460c      	mov	r4, r1
 80035e0:	b10a      	cbz	r2, 80035e6 <_printf_common+0x26>
 80035e2:	3301      	adds	r3, #1
 80035e4:	6033      	str	r3, [r6, #0]
 80035e6:	6823      	ldr	r3, [r4, #0]
 80035e8:	0699      	lsls	r1, r3, #26
 80035ea:	bf42      	ittt	mi
 80035ec:	6833      	ldrmi	r3, [r6, #0]
 80035ee:	3302      	addmi	r3, #2
 80035f0:	6033      	strmi	r3, [r6, #0]
 80035f2:	6825      	ldr	r5, [r4, #0]
 80035f4:	f015 0506 	ands.w	r5, r5, #6
 80035f8:	d106      	bne.n	8003608 <_printf_common+0x48>
 80035fa:	f104 0a19 	add.w	sl, r4, #25
 80035fe:	68e3      	ldr	r3, [r4, #12]
 8003600:	6832      	ldr	r2, [r6, #0]
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	42ab      	cmp	r3, r5
 8003606:	dc26      	bgt.n	8003656 <_printf_common+0x96>
 8003608:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800360c:	1e13      	subs	r3, r2, #0
 800360e:	6822      	ldr	r2, [r4, #0]
 8003610:	bf18      	it	ne
 8003612:	2301      	movne	r3, #1
 8003614:	0692      	lsls	r2, r2, #26
 8003616:	d42b      	bmi.n	8003670 <_printf_common+0xb0>
 8003618:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800361c:	4649      	mov	r1, r9
 800361e:	4638      	mov	r0, r7
 8003620:	47c0      	blx	r8
 8003622:	3001      	adds	r0, #1
 8003624:	d01e      	beq.n	8003664 <_printf_common+0xa4>
 8003626:	6823      	ldr	r3, [r4, #0]
 8003628:	68e5      	ldr	r5, [r4, #12]
 800362a:	6832      	ldr	r2, [r6, #0]
 800362c:	f003 0306 	and.w	r3, r3, #6
 8003630:	2b04      	cmp	r3, #4
 8003632:	bf08      	it	eq
 8003634:	1aad      	subeq	r5, r5, r2
 8003636:	68a3      	ldr	r3, [r4, #8]
 8003638:	6922      	ldr	r2, [r4, #16]
 800363a:	bf0c      	ite	eq
 800363c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003640:	2500      	movne	r5, #0
 8003642:	4293      	cmp	r3, r2
 8003644:	bfc4      	itt	gt
 8003646:	1a9b      	subgt	r3, r3, r2
 8003648:	18ed      	addgt	r5, r5, r3
 800364a:	2600      	movs	r6, #0
 800364c:	341a      	adds	r4, #26
 800364e:	42b5      	cmp	r5, r6
 8003650:	d11a      	bne.n	8003688 <_printf_common+0xc8>
 8003652:	2000      	movs	r0, #0
 8003654:	e008      	b.n	8003668 <_printf_common+0xa8>
 8003656:	2301      	movs	r3, #1
 8003658:	4652      	mov	r2, sl
 800365a:	4649      	mov	r1, r9
 800365c:	4638      	mov	r0, r7
 800365e:	47c0      	blx	r8
 8003660:	3001      	adds	r0, #1
 8003662:	d103      	bne.n	800366c <_printf_common+0xac>
 8003664:	f04f 30ff 	mov.w	r0, #4294967295
 8003668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800366c:	3501      	adds	r5, #1
 800366e:	e7c6      	b.n	80035fe <_printf_common+0x3e>
 8003670:	18e1      	adds	r1, r4, r3
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	2030      	movs	r0, #48	; 0x30
 8003676:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800367a:	4422      	add	r2, r4
 800367c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003680:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003684:	3302      	adds	r3, #2
 8003686:	e7c7      	b.n	8003618 <_printf_common+0x58>
 8003688:	2301      	movs	r3, #1
 800368a:	4622      	mov	r2, r4
 800368c:	4649      	mov	r1, r9
 800368e:	4638      	mov	r0, r7
 8003690:	47c0      	blx	r8
 8003692:	3001      	adds	r0, #1
 8003694:	d0e6      	beq.n	8003664 <_printf_common+0xa4>
 8003696:	3601      	adds	r6, #1
 8003698:	e7d9      	b.n	800364e <_printf_common+0x8e>
	...

0800369c <_printf_i>:
 800369c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036a0:	460c      	mov	r4, r1
 80036a2:	4691      	mov	r9, r2
 80036a4:	7e27      	ldrb	r7, [r4, #24]
 80036a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80036a8:	2f78      	cmp	r7, #120	; 0x78
 80036aa:	4680      	mov	r8, r0
 80036ac:	469a      	mov	sl, r3
 80036ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036b2:	d807      	bhi.n	80036c4 <_printf_i+0x28>
 80036b4:	2f62      	cmp	r7, #98	; 0x62
 80036b6:	d80a      	bhi.n	80036ce <_printf_i+0x32>
 80036b8:	2f00      	cmp	r7, #0
 80036ba:	f000 80d8 	beq.w	800386e <_printf_i+0x1d2>
 80036be:	2f58      	cmp	r7, #88	; 0x58
 80036c0:	f000 80a3 	beq.w	800380a <_printf_i+0x16e>
 80036c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80036c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036cc:	e03a      	b.n	8003744 <_printf_i+0xa8>
 80036ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036d2:	2b15      	cmp	r3, #21
 80036d4:	d8f6      	bhi.n	80036c4 <_printf_i+0x28>
 80036d6:	a001      	add	r0, pc, #4	; (adr r0, 80036dc <_printf_i+0x40>)
 80036d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80036dc:	08003735 	.word	0x08003735
 80036e0:	08003749 	.word	0x08003749
 80036e4:	080036c5 	.word	0x080036c5
 80036e8:	080036c5 	.word	0x080036c5
 80036ec:	080036c5 	.word	0x080036c5
 80036f0:	080036c5 	.word	0x080036c5
 80036f4:	08003749 	.word	0x08003749
 80036f8:	080036c5 	.word	0x080036c5
 80036fc:	080036c5 	.word	0x080036c5
 8003700:	080036c5 	.word	0x080036c5
 8003704:	080036c5 	.word	0x080036c5
 8003708:	08003855 	.word	0x08003855
 800370c:	08003779 	.word	0x08003779
 8003710:	08003837 	.word	0x08003837
 8003714:	080036c5 	.word	0x080036c5
 8003718:	080036c5 	.word	0x080036c5
 800371c:	08003877 	.word	0x08003877
 8003720:	080036c5 	.word	0x080036c5
 8003724:	08003779 	.word	0x08003779
 8003728:	080036c5 	.word	0x080036c5
 800372c:	080036c5 	.word	0x080036c5
 8003730:	0800383f 	.word	0x0800383f
 8003734:	680b      	ldr	r3, [r1, #0]
 8003736:	1d1a      	adds	r2, r3, #4
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	600a      	str	r2, [r1, #0]
 800373c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003740:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003744:	2301      	movs	r3, #1
 8003746:	e0a3      	b.n	8003890 <_printf_i+0x1f4>
 8003748:	6825      	ldr	r5, [r4, #0]
 800374a:	6808      	ldr	r0, [r1, #0]
 800374c:	062e      	lsls	r6, r5, #24
 800374e:	f100 0304 	add.w	r3, r0, #4
 8003752:	d50a      	bpl.n	800376a <_printf_i+0xce>
 8003754:	6805      	ldr	r5, [r0, #0]
 8003756:	600b      	str	r3, [r1, #0]
 8003758:	2d00      	cmp	r5, #0
 800375a:	da03      	bge.n	8003764 <_printf_i+0xc8>
 800375c:	232d      	movs	r3, #45	; 0x2d
 800375e:	426d      	negs	r5, r5
 8003760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003764:	485e      	ldr	r0, [pc, #376]	; (80038e0 <_printf_i+0x244>)
 8003766:	230a      	movs	r3, #10
 8003768:	e019      	b.n	800379e <_printf_i+0x102>
 800376a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800376e:	6805      	ldr	r5, [r0, #0]
 8003770:	600b      	str	r3, [r1, #0]
 8003772:	bf18      	it	ne
 8003774:	b22d      	sxthne	r5, r5
 8003776:	e7ef      	b.n	8003758 <_printf_i+0xbc>
 8003778:	680b      	ldr	r3, [r1, #0]
 800377a:	6825      	ldr	r5, [r4, #0]
 800377c:	1d18      	adds	r0, r3, #4
 800377e:	6008      	str	r0, [r1, #0]
 8003780:	0628      	lsls	r0, r5, #24
 8003782:	d501      	bpl.n	8003788 <_printf_i+0xec>
 8003784:	681d      	ldr	r5, [r3, #0]
 8003786:	e002      	b.n	800378e <_printf_i+0xf2>
 8003788:	0669      	lsls	r1, r5, #25
 800378a:	d5fb      	bpl.n	8003784 <_printf_i+0xe8>
 800378c:	881d      	ldrh	r5, [r3, #0]
 800378e:	4854      	ldr	r0, [pc, #336]	; (80038e0 <_printf_i+0x244>)
 8003790:	2f6f      	cmp	r7, #111	; 0x6f
 8003792:	bf0c      	ite	eq
 8003794:	2308      	moveq	r3, #8
 8003796:	230a      	movne	r3, #10
 8003798:	2100      	movs	r1, #0
 800379a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800379e:	6866      	ldr	r6, [r4, #4]
 80037a0:	60a6      	str	r6, [r4, #8]
 80037a2:	2e00      	cmp	r6, #0
 80037a4:	bfa2      	ittt	ge
 80037a6:	6821      	ldrge	r1, [r4, #0]
 80037a8:	f021 0104 	bicge.w	r1, r1, #4
 80037ac:	6021      	strge	r1, [r4, #0]
 80037ae:	b90d      	cbnz	r5, 80037b4 <_printf_i+0x118>
 80037b0:	2e00      	cmp	r6, #0
 80037b2:	d04d      	beq.n	8003850 <_printf_i+0x1b4>
 80037b4:	4616      	mov	r6, r2
 80037b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80037ba:	fb03 5711 	mls	r7, r3, r1, r5
 80037be:	5dc7      	ldrb	r7, [r0, r7]
 80037c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80037c4:	462f      	mov	r7, r5
 80037c6:	42bb      	cmp	r3, r7
 80037c8:	460d      	mov	r5, r1
 80037ca:	d9f4      	bls.n	80037b6 <_printf_i+0x11a>
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d10b      	bne.n	80037e8 <_printf_i+0x14c>
 80037d0:	6823      	ldr	r3, [r4, #0]
 80037d2:	07df      	lsls	r7, r3, #31
 80037d4:	d508      	bpl.n	80037e8 <_printf_i+0x14c>
 80037d6:	6923      	ldr	r3, [r4, #16]
 80037d8:	6861      	ldr	r1, [r4, #4]
 80037da:	4299      	cmp	r1, r3
 80037dc:	bfde      	ittt	le
 80037de:	2330      	movle	r3, #48	; 0x30
 80037e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80037e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80037e8:	1b92      	subs	r2, r2, r6
 80037ea:	6122      	str	r2, [r4, #16]
 80037ec:	f8cd a000 	str.w	sl, [sp]
 80037f0:	464b      	mov	r3, r9
 80037f2:	aa03      	add	r2, sp, #12
 80037f4:	4621      	mov	r1, r4
 80037f6:	4640      	mov	r0, r8
 80037f8:	f7ff fee2 	bl	80035c0 <_printf_common>
 80037fc:	3001      	adds	r0, #1
 80037fe:	d14c      	bne.n	800389a <_printf_i+0x1fe>
 8003800:	f04f 30ff 	mov.w	r0, #4294967295
 8003804:	b004      	add	sp, #16
 8003806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800380a:	4835      	ldr	r0, [pc, #212]	; (80038e0 <_printf_i+0x244>)
 800380c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	680e      	ldr	r6, [r1, #0]
 8003814:	061f      	lsls	r7, r3, #24
 8003816:	f856 5b04 	ldr.w	r5, [r6], #4
 800381a:	600e      	str	r6, [r1, #0]
 800381c:	d514      	bpl.n	8003848 <_printf_i+0x1ac>
 800381e:	07d9      	lsls	r1, r3, #31
 8003820:	bf44      	itt	mi
 8003822:	f043 0320 	orrmi.w	r3, r3, #32
 8003826:	6023      	strmi	r3, [r4, #0]
 8003828:	b91d      	cbnz	r5, 8003832 <_printf_i+0x196>
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	f023 0320 	bic.w	r3, r3, #32
 8003830:	6023      	str	r3, [r4, #0]
 8003832:	2310      	movs	r3, #16
 8003834:	e7b0      	b.n	8003798 <_printf_i+0xfc>
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	f043 0320 	orr.w	r3, r3, #32
 800383c:	6023      	str	r3, [r4, #0]
 800383e:	2378      	movs	r3, #120	; 0x78
 8003840:	4828      	ldr	r0, [pc, #160]	; (80038e4 <_printf_i+0x248>)
 8003842:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003846:	e7e3      	b.n	8003810 <_printf_i+0x174>
 8003848:	065e      	lsls	r6, r3, #25
 800384a:	bf48      	it	mi
 800384c:	b2ad      	uxthmi	r5, r5
 800384e:	e7e6      	b.n	800381e <_printf_i+0x182>
 8003850:	4616      	mov	r6, r2
 8003852:	e7bb      	b.n	80037cc <_printf_i+0x130>
 8003854:	680b      	ldr	r3, [r1, #0]
 8003856:	6826      	ldr	r6, [r4, #0]
 8003858:	6960      	ldr	r0, [r4, #20]
 800385a:	1d1d      	adds	r5, r3, #4
 800385c:	600d      	str	r5, [r1, #0]
 800385e:	0635      	lsls	r5, r6, #24
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	d501      	bpl.n	8003868 <_printf_i+0x1cc>
 8003864:	6018      	str	r0, [r3, #0]
 8003866:	e002      	b.n	800386e <_printf_i+0x1d2>
 8003868:	0671      	lsls	r1, r6, #25
 800386a:	d5fb      	bpl.n	8003864 <_printf_i+0x1c8>
 800386c:	8018      	strh	r0, [r3, #0]
 800386e:	2300      	movs	r3, #0
 8003870:	6123      	str	r3, [r4, #16]
 8003872:	4616      	mov	r6, r2
 8003874:	e7ba      	b.n	80037ec <_printf_i+0x150>
 8003876:	680b      	ldr	r3, [r1, #0]
 8003878:	1d1a      	adds	r2, r3, #4
 800387a:	600a      	str	r2, [r1, #0]
 800387c:	681e      	ldr	r6, [r3, #0]
 800387e:	6862      	ldr	r2, [r4, #4]
 8003880:	2100      	movs	r1, #0
 8003882:	4630      	mov	r0, r6
 8003884:	f7fc fcc4 	bl	8000210 <memchr>
 8003888:	b108      	cbz	r0, 800388e <_printf_i+0x1f2>
 800388a:	1b80      	subs	r0, r0, r6
 800388c:	6060      	str	r0, [r4, #4]
 800388e:	6863      	ldr	r3, [r4, #4]
 8003890:	6123      	str	r3, [r4, #16]
 8003892:	2300      	movs	r3, #0
 8003894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003898:	e7a8      	b.n	80037ec <_printf_i+0x150>
 800389a:	6923      	ldr	r3, [r4, #16]
 800389c:	4632      	mov	r2, r6
 800389e:	4649      	mov	r1, r9
 80038a0:	4640      	mov	r0, r8
 80038a2:	47d0      	blx	sl
 80038a4:	3001      	adds	r0, #1
 80038a6:	d0ab      	beq.n	8003800 <_printf_i+0x164>
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	079b      	lsls	r3, r3, #30
 80038ac:	d413      	bmi.n	80038d6 <_printf_i+0x23a>
 80038ae:	68e0      	ldr	r0, [r4, #12]
 80038b0:	9b03      	ldr	r3, [sp, #12]
 80038b2:	4298      	cmp	r0, r3
 80038b4:	bfb8      	it	lt
 80038b6:	4618      	movlt	r0, r3
 80038b8:	e7a4      	b.n	8003804 <_printf_i+0x168>
 80038ba:	2301      	movs	r3, #1
 80038bc:	4632      	mov	r2, r6
 80038be:	4649      	mov	r1, r9
 80038c0:	4640      	mov	r0, r8
 80038c2:	47d0      	blx	sl
 80038c4:	3001      	adds	r0, #1
 80038c6:	d09b      	beq.n	8003800 <_printf_i+0x164>
 80038c8:	3501      	adds	r5, #1
 80038ca:	68e3      	ldr	r3, [r4, #12]
 80038cc:	9903      	ldr	r1, [sp, #12]
 80038ce:	1a5b      	subs	r3, r3, r1
 80038d0:	42ab      	cmp	r3, r5
 80038d2:	dcf2      	bgt.n	80038ba <_printf_i+0x21e>
 80038d4:	e7eb      	b.n	80038ae <_printf_i+0x212>
 80038d6:	2500      	movs	r5, #0
 80038d8:	f104 0619 	add.w	r6, r4, #25
 80038dc:	e7f5      	b.n	80038ca <_printf_i+0x22e>
 80038de:	bf00      	nop
 80038e0:	08003d8d 	.word	0x08003d8d
 80038e4:	08003d9e 	.word	0x08003d9e

080038e8 <memcpy>:
 80038e8:	440a      	add	r2, r1
 80038ea:	4291      	cmp	r1, r2
 80038ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80038f0:	d100      	bne.n	80038f4 <memcpy+0xc>
 80038f2:	4770      	bx	lr
 80038f4:	b510      	push	{r4, lr}
 80038f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038fe:	4291      	cmp	r1, r2
 8003900:	d1f9      	bne.n	80038f6 <memcpy+0xe>
 8003902:	bd10      	pop	{r4, pc}

08003904 <memmove>:
 8003904:	4288      	cmp	r0, r1
 8003906:	b510      	push	{r4, lr}
 8003908:	eb01 0402 	add.w	r4, r1, r2
 800390c:	d902      	bls.n	8003914 <memmove+0x10>
 800390e:	4284      	cmp	r4, r0
 8003910:	4623      	mov	r3, r4
 8003912:	d807      	bhi.n	8003924 <memmove+0x20>
 8003914:	1e43      	subs	r3, r0, #1
 8003916:	42a1      	cmp	r1, r4
 8003918:	d008      	beq.n	800392c <memmove+0x28>
 800391a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800391e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003922:	e7f8      	b.n	8003916 <memmove+0x12>
 8003924:	4402      	add	r2, r0
 8003926:	4601      	mov	r1, r0
 8003928:	428a      	cmp	r2, r1
 800392a:	d100      	bne.n	800392e <memmove+0x2a>
 800392c:	bd10      	pop	{r4, pc}
 800392e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003932:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003936:	e7f7      	b.n	8003928 <memmove+0x24>

08003938 <_free_r>:
 8003938:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800393a:	2900      	cmp	r1, #0
 800393c:	d048      	beq.n	80039d0 <_free_r+0x98>
 800393e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003942:	9001      	str	r0, [sp, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	f1a1 0404 	sub.w	r4, r1, #4
 800394a:	bfb8      	it	lt
 800394c:	18e4      	addlt	r4, r4, r3
 800394e:	f000 f8d3 	bl	8003af8 <__malloc_lock>
 8003952:	4a20      	ldr	r2, [pc, #128]	; (80039d4 <_free_r+0x9c>)
 8003954:	9801      	ldr	r0, [sp, #4]
 8003956:	6813      	ldr	r3, [r2, #0]
 8003958:	4615      	mov	r5, r2
 800395a:	b933      	cbnz	r3, 800396a <_free_r+0x32>
 800395c:	6063      	str	r3, [r4, #4]
 800395e:	6014      	str	r4, [r2, #0]
 8003960:	b003      	add	sp, #12
 8003962:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003966:	f000 b8cd 	b.w	8003b04 <__malloc_unlock>
 800396a:	42a3      	cmp	r3, r4
 800396c:	d90b      	bls.n	8003986 <_free_r+0x4e>
 800396e:	6821      	ldr	r1, [r4, #0]
 8003970:	1862      	adds	r2, r4, r1
 8003972:	4293      	cmp	r3, r2
 8003974:	bf04      	itt	eq
 8003976:	681a      	ldreq	r2, [r3, #0]
 8003978:	685b      	ldreq	r3, [r3, #4]
 800397a:	6063      	str	r3, [r4, #4]
 800397c:	bf04      	itt	eq
 800397e:	1852      	addeq	r2, r2, r1
 8003980:	6022      	streq	r2, [r4, #0]
 8003982:	602c      	str	r4, [r5, #0]
 8003984:	e7ec      	b.n	8003960 <_free_r+0x28>
 8003986:	461a      	mov	r2, r3
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	b10b      	cbz	r3, 8003990 <_free_r+0x58>
 800398c:	42a3      	cmp	r3, r4
 800398e:	d9fa      	bls.n	8003986 <_free_r+0x4e>
 8003990:	6811      	ldr	r1, [r2, #0]
 8003992:	1855      	adds	r5, r2, r1
 8003994:	42a5      	cmp	r5, r4
 8003996:	d10b      	bne.n	80039b0 <_free_r+0x78>
 8003998:	6824      	ldr	r4, [r4, #0]
 800399a:	4421      	add	r1, r4
 800399c:	1854      	adds	r4, r2, r1
 800399e:	42a3      	cmp	r3, r4
 80039a0:	6011      	str	r1, [r2, #0]
 80039a2:	d1dd      	bne.n	8003960 <_free_r+0x28>
 80039a4:	681c      	ldr	r4, [r3, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	6053      	str	r3, [r2, #4]
 80039aa:	4421      	add	r1, r4
 80039ac:	6011      	str	r1, [r2, #0]
 80039ae:	e7d7      	b.n	8003960 <_free_r+0x28>
 80039b0:	d902      	bls.n	80039b8 <_free_r+0x80>
 80039b2:	230c      	movs	r3, #12
 80039b4:	6003      	str	r3, [r0, #0]
 80039b6:	e7d3      	b.n	8003960 <_free_r+0x28>
 80039b8:	6825      	ldr	r5, [r4, #0]
 80039ba:	1961      	adds	r1, r4, r5
 80039bc:	428b      	cmp	r3, r1
 80039be:	bf04      	itt	eq
 80039c0:	6819      	ldreq	r1, [r3, #0]
 80039c2:	685b      	ldreq	r3, [r3, #4]
 80039c4:	6063      	str	r3, [r4, #4]
 80039c6:	bf04      	itt	eq
 80039c8:	1949      	addeq	r1, r1, r5
 80039ca:	6021      	streq	r1, [r4, #0]
 80039cc:	6054      	str	r4, [r2, #4]
 80039ce:	e7c7      	b.n	8003960 <_free_r+0x28>
 80039d0:	b003      	add	sp, #12
 80039d2:	bd30      	pop	{r4, r5, pc}
 80039d4:	200004c8 	.word	0x200004c8

080039d8 <_malloc_r>:
 80039d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039da:	1ccd      	adds	r5, r1, #3
 80039dc:	f025 0503 	bic.w	r5, r5, #3
 80039e0:	3508      	adds	r5, #8
 80039e2:	2d0c      	cmp	r5, #12
 80039e4:	bf38      	it	cc
 80039e6:	250c      	movcc	r5, #12
 80039e8:	2d00      	cmp	r5, #0
 80039ea:	4606      	mov	r6, r0
 80039ec:	db01      	blt.n	80039f2 <_malloc_r+0x1a>
 80039ee:	42a9      	cmp	r1, r5
 80039f0:	d903      	bls.n	80039fa <_malloc_r+0x22>
 80039f2:	230c      	movs	r3, #12
 80039f4:	6033      	str	r3, [r6, #0]
 80039f6:	2000      	movs	r0, #0
 80039f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039fa:	f000 f87d 	bl	8003af8 <__malloc_lock>
 80039fe:	4921      	ldr	r1, [pc, #132]	; (8003a84 <_malloc_r+0xac>)
 8003a00:	680a      	ldr	r2, [r1, #0]
 8003a02:	4614      	mov	r4, r2
 8003a04:	b99c      	cbnz	r4, 8003a2e <_malloc_r+0x56>
 8003a06:	4f20      	ldr	r7, [pc, #128]	; (8003a88 <_malloc_r+0xb0>)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	b923      	cbnz	r3, 8003a16 <_malloc_r+0x3e>
 8003a0c:	4621      	mov	r1, r4
 8003a0e:	4630      	mov	r0, r6
 8003a10:	f000 f862 	bl	8003ad8 <_sbrk_r>
 8003a14:	6038      	str	r0, [r7, #0]
 8003a16:	4629      	mov	r1, r5
 8003a18:	4630      	mov	r0, r6
 8003a1a:	f000 f85d 	bl	8003ad8 <_sbrk_r>
 8003a1e:	1c43      	adds	r3, r0, #1
 8003a20:	d123      	bne.n	8003a6a <_malloc_r+0x92>
 8003a22:	230c      	movs	r3, #12
 8003a24:	6033      	str	r3, [r6, #0]
 8003a26:	4630      	mov	r0, r6
 8003a28:	f000 f86c 	bl	8003b04 <__malloc_unlock>
 8003a2c:	e7e3      	b.n	80039f6 <_malloc_r+0x1e>
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	1b5b      	subs	r3, r3, r5
 8003a32:	d417      	bmi.n	8003a64 <_malloc_r+0x8c>
 8003a34:	2b0b      	cmp	r3, #11
 8003a36:	d903      	bls.n	8003a40 <_malloc_r+0x68>
 8003a38:	6023      	str	r3, [r4, #0]
 8003a3a:	441c      	add	r4, r3
 8003a3c:	6025      	str	r5, [r4, #0]
 8003a3e:	e004      	b.n	8003a4a <_malloc_r+0x72>
 8003a40:	6863      	ldr	r3, [r4, #4]
 8003a42:	42a2      	cmp	r2, r4
 8003a44:	bf0c      	ite	eq
 8003a46:	600b      	streq	r3, [r1, #0]
 8003a48:	6053      	strne	r3, [r2, #4]
 8003a4a:	4630      	mov	r0, r6
 8003a4c:	f000 f85a 	bl	8003b04 <__malloc_unlock>
 8003a50:	f104 000b 	add.w	r0, r4, #11
 8003a54:	1d23      	adds	r3, r4, #4
 8003a56:	f020 0007 	bic.w	r0, r0, #7
 8003a5a:	1ac2      	subs	r2, r0, r3
 8003a5c:	d0cc      	beq.n	80039f8 <_malloc_r+0x20>
 8003a5e:	1a1b      	subs	r3, r3, r0
 8003a60:	50a3      	str	r3, [r4, r2]
 8003a62:	e7c9      	b.n	80039f8 <_malloc_r+0x20>
 8003a64:	4622      	mov	r2, r4
 8003a66:	6864      	ldr	r4, [r4, #4]
 8003a68:	e7cc      	b.n	8003a04 <_malloc_r+0x2c>
 8003a6a:	1cc4      	adds	r4, r0, #3
 8003a6c:	f024 0403 	bic.w	r4, r4, #3
 8003a70:	42a0      	cmp	r0, r4
 8003a72:	d0e3      	beq.n	8003a3c <_malloc_r+0x64>
 8003a74:	1a21      	subs	r1, r4, r0
 8003a76:	4630      	mov	r0, r6
 8003a78:	f000 f82e 	bl	8003ad8 <_sbrk_r>
 8003a7c:	3001      	adds	r0, #1
 8003a7e:	d1dd      	bne.n	8003a3c <_malloc_r+0x64>
 8003a80:	e7cf      	b.n	8003a22 <_malloc_r+0x4a>
 8003a82:	bf00      	nop
 8003a84:	200004c8 	.word	0x200004c8
 8003a88:	200004cc 	.word	0x200004cc

08003a8c <_realloc_r>:
 8003a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8e:	4607      	mov	r7, r0
 8003a90:	4614      	mov	r4, r2
 8003a92:	460e      	mov	r6, r1
 8003a94:	b921      	cbnz	r1, 8003aa0 <_realloc_r+0x14>
 8003a96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	f7ff bf9c 	b.w	80039d8 <_malloc_r>
 8003aa0:	b922      	cbnz	r2, 8003aac <_realloc_r+0x20>
 8003aa2:	f7ff ff49 	bl	8003938 <_free_r>
 8003aa6:	4625      	mov	r5, r4
 8003aa8:	4628      	mov	r0, r5
 8003aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aac:	f000 f830 	bl	8003b10 <_malloc_usable_size_r>
 8003ab0:	42a0      	cmp	r0, r4
 8003ab2:	d20f      	bcs.n	8003ad4 <_realloc_r+0x48>
 8003ab4:	4621      	mov	r1, r4
 8003ab6:	4638      	mov	r0, r7
 8003ab8:	f7ff ff8e 	bl	80039d8 <_malloc_r>
 8003abc:	4605      	mov	r5, r0
 8003abe:	2800      	cmp	r0, #0
 8003ac0:	d0f2      	beq.n	8003aa8 <_realloc_r+0x1c>
 8003ac2:	4631      	mov	r1, r6
 8003ac4:	4622      	mov	r2, r4
 8003ac6:	f7ff ff0f 	bl	80038e8 <memcpy>
 8003aca:	4631      	mov	r1, r6
 8003acc:	4638      	mov	r0, r7
 8003ace:	f7ff ff33 	bl	8003938 <_free_r>
 8003ad2:	e7e9      	b.n	8003aa8 <_realloc_r+0x1c>
 8003ad4:	4635      	mov	r5, r6
 8003ad6:	e7e7      	b.n	8003aa8 <_realloc_r+0x1c>

08003ad8 <_sbrk_r>:
 8003ad8:	b538      	push	{r3, r4, r5, lr}
 8003ada:	4d06      	ldr	r5, [pc, #24]	; (8003af4 <_sbrk_r+0x1c>)
 8003adc:	2300      	movs	r3, #0
 8003ade:	4604      	mov	r4, r0
 8003ae0:	4608      	mov	r0, r1
 8003ae2:	602b      	str	r3, [r5, #0]
 8003ae4:	f7fd fb02 	bl	80010ec <_sbrk>
 8003ae8:	1c43      	adds	r3, r0, #1
 8003aea:	d102      	bne.n	8003af2 <_sbrk_r+0x1a>
 8003aec:	682b      	ldr	r3, [r5, #0]
 8003aee:	b103      	cbz	r3, 8003af2 <_sbrk_r+0x1a>
 8003af0:	6023      	str	r3, [r4, #0]
 8003af2:	bd38      	pop	{r3, r4, r5, pc}
 8003af4:	20000f9c 	.word	0x20000f9c

08003af8 <__malloc_lock>:
 8003af8:	4801      	ldr	r0, [pc, #4]	; (8003b00 <__malloc_lock+0x8>)
 8003afa:	f000 b811 	b.w	8003b20 <__retarget_lock_acquire_recursive>
 8003afe:	bf00      	nop
 8003b00:	20000fa4 	.word	0x20000fa4

08003b04 <__malloc_unlock>:
 8003b04:	4801      	ldr	r0, [pc, #4]	; (8003b0c <__malloc_unlock+0x8>)
 8003b06:	f000 b80c 	b.w	8003b22 <__retarget_lock_release_recursive>
 8003b0a:	bf00      	nop
 8003b0c:	20000fa4 	.word	0x20000fa4

08003b10 <_malloc_usable_size_r>:
 8003b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b14:	1f18      	subs	r0, r3, #4
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	bfbc      	itt	lt
 8003b1a:	580b      	ldrlt	r3, [r1, r0]
 8003b1c:	18c0      	addlt	r0, r0, r3
 8003b1e:	4770      	bx	lr

08003b20 <__retarget_lock_acquire_recursive>:
 8003b20:	4770      	bx	lr

08003b22 <__retarget_lock_release_recursive>:
 8003b22:	4770      	bx	lr

08003b24 <_init>:
 8003b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b26:	bf00      	nop
 8003b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b2a:	bc08      	pop	{r3}
 8003b2c:	469e      	mov	lr, r3
 8003b2e:	4770      	bx	lr

08003b30 <_fini>:
 8003b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b32:	bf00      	nop
 8003b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b36:	bc08      	pop	{r3}
 8003b38:	469e      	mov	lr, r3
 8003b3a:	4770      	bx	lr
